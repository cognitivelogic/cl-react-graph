{"version":3,"sources":["webpack:///./src/pages/histogram.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","HistogramExample","a","createElement"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAkNeG,UAJkB,WAC/B,OAAOF,EAAAG,EAAAC,cAAA","file":"component---src-pages-histogram-tsx-9216391dbb5cc6a55c4e.js","sourcesContent":["import React, { FC } from 'react';\n\n// import React, {\n//   useReducer,\n//   useState,\n// } from 'react';\n// import ReactDataSheet from 'react-datasheet';\n// import ReactJson from 'react-json-view';\n\n// import {\n//   Card,\n//   CardContent,\n//   Grid,\n//   MenuItem,\n//   Tab,\n//   Tabs,\n//   TextField,\n//   Typography,\n// } from '@material-ui/core';\n\n// import { HorizontalHistogram } from '../../../src';\n// import Histogram, { IHistogramData } from '../../../src/Histogram';\n// import Legend from '../../../src/Legend';\n// import Layout from '../components/layout';\n// import SEO from '../components/seo';\n// import { TabContainer } from '../components/TabContainer';\n// import {\n//   axis,\n//   data,\n//   grid,\n//   theme,\n// } from '../data';\n\n// const tipContentFns = [\n//   (bins, i, d) =>\n//     bins[i] + '<br />HI THere ' + d.toFixed(2),\n//   (bins, i, d) =>\n//     bins[i] + '<br />Bookay ' + d.toFixed(2),\n// ];\n\n// const dataLegendData = {\n//   bins: data.counts.map((c) => c.label),\n//   counts: [{\n//     data: data.counts.map((c) => c.data.reduce((p, n) => p + n, 0)),\n//     label: '',\n//   }],\n// };\n\n// interface IInitialState {\n//   chartType: 'HorizontalHistogram' | 'Histogram';\n//   data: IHistogramData;\n// }\n// const initialSate: IInitialState = {\n//   chartType: 'Histogram',\n//   data,\n// };\n\n// type Actions = { type: 'setChartType'; chartType: string }\n//   | { type: 'setData', data: IHistogramData };\n\n// function reducer(state: IInitialState, action: Actions) {\n//   switch (action.type) {\n//     case 'setChartType':\n//       return { ...state, chartType: action.chartType };\n//     case 'setData':\n//       return { ...state, data: action.data };\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// export const dataToSpreadSheet = (datum: IHistogramData): any => {\n//   const speadSheetData: any = [];\n\n//   datum.bins.forEach((b, i) => {\n//     if (!speadSheetData[i]) {\n//       speadSheetData[i] = [];\n//     }\n//     speadSheetData[i][0] = { value: b };\n//   });\n//   datum.counts.forEach((c, i) => {\n//     c.data.forEach((d, x) => {\n//       if (!speadSheetData[x]) {\n//         speadSheetData[x] = [];\n//       }\n//       speadSheetData[x][i + 1] = { value: d };\n//     });\n//   });\n//   return speadSheetData;\n// };\n\n// const HistogramExample = () => {\n//   const [tab, setTab] = useState(0);\n//   const [state, dispatch] = useReducer(reducer, initialSate);\n//   const [visible, setVisible] = useState({});\n\n//   const speadSheetData = dataToSpreadSheet(state.data);\n\n//   const Chart = state.chartType === 'Histogram' ? Histogram : HorizontalHistogram;\n//   return (\n//     <Layout>\n//       <SEO title=\"Histogram\" description=\"\" />\n//       <Typography variant=\"h2\">Histogram</Typography>\n//       <div>\n//         <Grid container spacing={24}>\n//           <Grid item xs={6}>\n//             <Card>\n//               <CardContent>\n//                 <Chart data={state.data}\n//                   axis={axis}\n//                   grid={grid}\n//                   width={'100%'}\n//                   height={300}\n//                   visible={visible}\n//                   colorScheme={theme}\n//                   tipContentFn={tipContentFns[0]} />\n//                 <Legend\n//                   theme={theme}\n//                   data={dataLegendData}\n//                   onSelect={(key) => {\n//                     setVisible({ ...visible, [key]: visible.hasOwnProperty(key) ? !visible[key] : false });\n//                   }}\n//                   visible={visible}\n//                 />\n//               </CardContent>\n//             </Card>\n//             <br />\n//             <Card>\n//               <CardContent>\n//                 <ReactJson src={state} />\n//               </CardContent>\n//             </Card>\n//           </Grid>\n//           <Grid item xs={6}>\n//             <Card>\n//               <CardContent>\n//                 <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n//                   <Tab label=\"Data\" />\n//                   <Tab label=\"Styling\" />\n//                 </Tabs>\n//                 {\n//                   tab === 0 && <TabContainer>\n//                     <ReactDataSheet<any, any> data={speadSheetData}\n//                       valueRenderer={(cell) => cell.value}\n//                       sheetRenderer={(props) => (\n//                         <table className={props.className + ' my-awesome-extra-class'}>\n//                           <thead>\n//                             <tr>\n//                               <th className=\"action-cell\">Bin</th>\n//                               {\n//                                 state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n//                                   {count.label}\n//                                 </th>))\n//                               }\n//                             </tr>\n//                           </thead>\n//                           <tbody>\n//                             {props.children}\n//                           </tbody>\n//                         </table>\n//                       )}\n//                       onCellsChanged={(changes) => {\n//                         changes.forEach(({ cell, row, col, value }) => {\n//                           if (col === 0) {\n//                             state.data.bins[row] = value;\n//                           } else {\n//                             state.data.counts[col - 1].data[row] = Number(value);\n//                           }\n//                         });\n//                         dispatch({ type: 'setData', data: state.data });\n//                       }} />\n//                   </TabContainer>\n//                 }\n//                 {\n//                   tab === 1 && <TabContainer>\n//                     <Grid container spacing={24}>\n//                       <Grid item xs={6}>\n//                         <TextField\n//                           select\n//                           label=\"Chart direction\"\n//                           value={state.chartType}\n//                           onChange={(e) => {\n//                             dispatch({ type: 'setChartType', chartType: e.target.value });\n//                           }}\n//                         >\n//                           <MenuItem value=\"Histogram\">\n//                             Histogram\n//                             </MenuItem>\n//                           <MenuItem value=\"HorizontalHistogram\">\n//                             HorizontalHistogram\n//                             </MenuItem>\n\n//                         </TextField>\n//                       </Grid>\n//                     </Grid>\n//                   </TabContainer>\n//                 }\n//               </CardContent>\n//             </Card>\n//           </Grid>\n//         </Grid>\n//       </div>\n//     </Layout>\n//   );\n// };\n\nconst HistogramExample: FC<{}> = () => {\n  return <div>test</div>;\n};\n\nexport default HistogramExample;\n"],"sourceRoot":""}