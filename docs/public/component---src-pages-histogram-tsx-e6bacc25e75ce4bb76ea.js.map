{"version":3,"sources":["webpack:///./src/pages/histogram.tsx","webpack:///../src/HistogramD3.ts","webpack:///../src/Histogram.tsx","webpack:///../src/colors/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///../src/d3/attrs.ts","webpack:///../src/tip.ts","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///../src/colors/filterRange.ts","webpack:///../src/Legend.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/grid.ts","webpack:///./src/components/TabContainer.tsx","webpack:///./src/data.ts","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/MapD3.ts","webpack:///../src/Map.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///../src/index.ts"],"names":["tipContentFns","bins","i","d","toFixed","dataLegendData","data","counts","map","c","label","reduce","p","n","initialSate","chartType","reducer","state","action","type","Object","assign","Error","dataToSpreadSheet","datum","speadSheetData","forEach","b","value","x","HistogramExample","_useState","useState","tab","setTab","_useReducer","useReducer","dispatch","_useState2","visible","setVisible","Chart","Histogram","HorizontalHistogram","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_9__","_components_seo__WEBPACK_IMPORTED_MODULE_10__","title","description","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","variant","container","spacing","item","xs","axis","grid","width","height","colorScheme","theme","tipContentFn","_src_Legend__WEBPACK_IMPORTED_MODULE_8__","onSelect","key","_Object$assign","hasOwnProperty","JSON","stringify","onChange","e","v","_components_TabContainer__WEBPACK_IMPORTED_MODULE_11__","react_datasheet__WEBPACK_IMPORTED_MODULE_4___default","valueRenderer","cell","sheetRenderer","props","className","count","children","onCellsChanged","changes","_ref","row","col","Number","select","target","histogramD3","svg","tipContainer","tipContent","y","scaleLinear","scaleBand","innerScaleBand","defaultProps","margin","style","fill","shape-rendering","stroke","stroke-opacity","stroke-width","text","ticks","bar","groupMargin","delay","domain","max","min","duration","left","top","color","dasharray","linecap","tip","tips","create","el","this","mergeProps","_makeSvg","makeGrid","makeScales","append","attr","update","newProps","merge","selectAll","remove","childNodes","getElementsByTagName","length","removeChild","_this$props","scale","r","makeTip","valuesCount","appendDomainRange","yDomain","_this$props2","allCounts","prev","next","concat","thisExtent","extent","yRange","xAxisHeight","range","xAxis","yAxis","xAxisLabel","yAxisLabel","_drawScales","_this$props3","w","gridWidth","dataLabels","rangeRound","paddingInner","groupedMargin","bandwidth","barMargin","axisBottom","tickSize","get","undefined","tickValues","filter","dateFormat","tickFormat","timeFormat","yAxisWidth","call","dataSets","axisLeft","yTickSize","transition","attrs","m","barWidth","updateChart","groupData","_this","_this$props4","colors","scaleOrdinal","gHeight","gridHeight","g","bars","enter","stackIndex","setIndex","findIndex","on","ix","html","fx","in","move","out","groupLabel","currentHeight","exit","xText","yText","gridX","gridY","_this2","_this$props5","push","drawGrid","destroy","_React$Component","chart","parentWidth","handleResize","elem","getDOMNode","ref","offsetWidth","setState","getChartState","componentDidMount","_this3","window","addEventListener","componentDidUpdate","rest","objectWithoutPropertiesLoose_default","componentWillUnmount","removeEventListener","ReactDOM","render","_this4","react","React","rgb","darker","toString","__webpack_exports__","__webpack_require__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","object","string","isRequired","func","module","exports","require","default","selection","keys","k","d3_selection__WEBPACK_IMPORTED_MODULE_0__","event","pageX","pageY","selector","SEO","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","name","property","author","join","arrayOf","array","Header","siteTitle","react_default","index_es","position","gatsby_browser_entry","to","Layout","Fragment","header","flexGrow","padding","paddingTop","Date","getFullYear","href","_755544856","node","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","Color","hsl","luminosity","index","self","indexOf","sort","Math","random","legendIconStyle","cursor","display","listStyle","Legend","_ref$theme","scheme","labels","react__WEBPACK_IMPORTED_MODULE_2__","active","backgroundColor","border","onClick","pieChartD3","donutWidth","displayFn","previousData","set","containers","dataSet","drawChartBg","drawCharts","outerRadius","_this$props2$donutWid","radius","innerRadius","_this$props3$donutWid","drawChart","tau","PI","bgArc","arc","startAngle","endAngle","background","_this$props6","thisPie","pie","arcs","thisArc","path","j","each","_current","attrTween","interpolate","t","arcTween","path2","_height","_width","centroid","PieChart","d3_axis__WEBPACK_IMPORTED_MODULE_0__","lodash_get__WEBPACK_IMPORTED_MODULE_1__","_d3_attrs__WEBPACK_IMPORTED_MODULE_2__","axisWidth","offset","makeXGridlines","makeYGridlines","TabContainer","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","component","data2","_src_colors_filterRange__WEBPACK_IMPORTED_MODULE_0__","borderColors","dy","text-anchor","transform","filterRange","horizontalHistogramD3","xDomain","xRange","h","_drawBars","info","drawDataSet","barHeight","setCount","barItem","all","multiLineOffset","currentWidth","_drawGrid","gy","make_x_gridlines","make_y_gridlines","histogram","componentWillReceiveProps","joyPlotD3","yOuterScaleBand","joyTitle","_props","thisCounts","_props5","getBins","Array","from","Set","_props6","yLabels","yOuterBounds","_props7","_props8","_props9","thisMax","joyLabel","_props10","_props11","lineData","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineProps","curveType","curveCatmullRom","show","strokeDashArray","strokeDashOffset","pointProps","easeCubic","line","point","datumProps","_buildScales","lineContainer","_createLines","_drawDataPointSet","getYAxisWidth","pointContainer","points","dx","ys","numberFormat","format","getXAxisHeight","parsedY","parsedX","_drawLines","curve","drawAreas","area","y0","y1","console","log","_buildScales2","timeParse","LineChart","mapD3","geojson","features","projection","geoMercator","translate","geoGenerator","geoPath","Map","scatterPlotD3","yScale","xScale","domainByTrait","choices","legendWidth","xSize","ySize","_drawLegend","split","legend","_drawPoints","traits","nx","cross","plotCell","values","distModels","trait","ScatterPlot","_Component","chartWidth","chartHeight","innerHeight","getBoundingClientRect","Component","src_HorizontalHistogram","src_LineChart"],"mappings":"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","file":"component---src-pages-histogram-tsx-e6bacc25e75ce4bb76ea.js","sourcesContent":["import React, {\n  useReducer,\n  useState,\n} from 'react';\nimport ReactDataSheet from 'react-datasheet';\n\nimport {\n  Card,\n  CardContent,\n  Grid,\n  MenuItem,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\nimport { HorizontalHistogram } from '../../../src';\nimport Histogram, { IHistogramData } from '../../../src/Histogram';\nimport Legend from '../../../src/Legend';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { TabContainer } from '../components/TabContainer';\nimport {\n  axis,\n  data,\n  grid,\n  theme,\n} from '../data';\n\nconst tipContentFns = [\n  (bins, i, d) =>\n    bins[i] + '<br />HI THere ' + d.toFixed(2),\n  (bins, i, d) =>\n    bins[i] + '<br />Bookay ' + d.toFixed(2),\n];\n\nconst dataLegendData = {\n  bins: data.counts.map((c) => c.label),\n  counts: [{\n    data: data.counts.map((c) => c.data.reduce((p, n) => p + n, 0)),\n    label: '',\n  }],\n};\n\ninterface IInitialState {\n  chartType: 'HorizontalHistogram' | 'Histogram';\n  data: IHistogramData;\n}\nconst initialSate: IInitialState = {\n  chartType: 'Histogram',\n  data,\n};\n\ntype Actions = { type: 'setChartType'; chartType: string }\n  | { type: 'setData', data: IHistogramData };\n\nfunction reducer(state: IInitialState, action: Actions) {\n  switch (action.type) {\n    case 'setChartType':\n      return { ...state, chartType: action.chartType };\n    case 'setData':\n      return { ...state, data: action.data };\n    default:\n      throw new Error();\n  }\n}\n\nexport const dataToSpreadSheet = (datum: IHistogramData): any => {\n  const speadSheetData: any = [];\n\n  datum.bins.forEach((b, i) => {\n    if (!speadSheetData[i]) {\n      speadSheetData[i] = [];\n    }\n    speadSheetData[i][0] = { value: b };\n  });\n  datum.counts.forEach((c, i) => {\n    c.data.forEach((d, x) => {\n      if (!speadSheetData[x]) {\n        speadSheetData[x] = [];\n      }\n      speadSheetData[x][i + 1] = { value: d };\n    });\n  });\n  return speadSheetData;\n};\n\nconst HistogramExample = () => {\n  const [tab, setTab] = useState(0);\n  const [state, dispatch] = useReducer(reducer, initialSate);\n  const [visible, setVisible] = useState({});\n\n  const speadSheetData = dataToSpreadSheet(state.data);\n\n  const Chart = state.chartType === 'Histogram' ? Histogram : HorizontalHistogram;\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <Typography variant=\"h2\">Histogram</Typography>\n      <div>\n        <Grid container spacing={24}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Chart data={state.data}\n                  axis={axis}\n                  grid={grid}\n                  width={'100%'}\n                  height={300}\n                  visible={visible}\n                  colorScheme={theme}\n                  tipContentFn={tipContentFns[0]}\n                />\n                <Legend\n                  theme={theme}\n                  data={dataLegendData}\n                  onSelect={(key) => {\n                    setVisible({ ...visible, [key]: visible.hasOwnProperty(key) ? !visible[key] : false });\n                  }}\n                  visible={visible}\n                />\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <pre>\n                  {JSON.stringify(state)}\n                </pre>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n                  <Tab label=\"Data\" />\n                  <Tab label=\"Styling\" />\n                </Tabs>\n                {\n                  tab === 0 && <TabContainer>\n                    <ReactDataSheet<any, any> data={speadSheetData}\n                      valueRenderer={(cell) => cell.value}\n                      sheetRenderer={(props) => (\n                        <table className={props.className + ' my-awesome-extra-class'}>\n                          <thead>\n                            <tr>\n                              <th className=\"action-cell\">Bin</th>\n                              {\n                                state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n                                  {count.label}\n                                </th>))\n                              }\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {props.children}\n                          </tbody>\n                        </table>\n                      )}\n                      onCellsChanged={(changes) => {\n                        changes.forEach(({ cell, row, col, value }) => {\n                          if (col === 0) {\n                            state.data.bins[row] = value;\n                          } else {\n                            state.data.counts[col - 1].data[row] = Number(value);\n                          }\n                        });\n                        dispatch({ type: 'setData', data: state.data });\n                      }} />\n                  </TabContainer>\n                }\n                {\n                  tab === 1 && <TabContainer>\n                    <Grid container spacing={24}>\n                      <Grid item xs={6}>\n                        <TextField\n                          select\n                          label=\"Chart direction\"\n                          value={state.chartType}\n                          onChange={(e) => {\n                            dispatch({ type: 'setChartType', chartType: e.target.value });\n                          }}\n                        >\n                          <MenuItem value=\"Histogram\">\n                            Histogram\n                            </MenuItem>\n                          <MenuItem value=\"HorizontalHistogram\">\n                            HorizontalHistogram\n                            </MenuItem>\n\n                        </TextField>\n                      </Grid>\n                    </Grid>\n                  </TabContainer>\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nexport default HistogramExample;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  // @TODO make this a prop\n  const stacked = false;\n\n  const defaultProps: IHistogramProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: HTMLElement, props: Partial<IHistogramProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IHistogramProps>) {\n      this.props = merge<IHistogramProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n      if (newProps.colorScheme) {\n        this.props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height } = this.props;\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [height - (margin.top * 2) - xAxisHeight(this.props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { axis, margin, height } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(this.props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      if (stacked) {\n        innerScaleBand\n          .domain(['main'])\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      } else {\n        innerScaleBand\n          .domain(dataLabels)\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      }\n      const xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(this.props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, this.dataSets);\n\n      const yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (axis.y.scale === 'TIME' && axis.y.dateFormat) {\n        yAxis.tickFormat(timeFormat(axis.y.dateFormat));\n      }\n      this.yAxis\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(this.props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(this.props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip } = this.props;\n      const barWidth = this.barWidth();\n\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(this.props.colorScheme);\n      const gHeight = gridHeight(this.props);\n\n      const g = this.container\n        .selectAll('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append('g')\n        .merge(g)\n        .attr('transform', (d) => {\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + x(d[0].label);\n          return `translate(${xdelta}, 0)`;\n        })\n        .selectAll('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => this.props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('height', 0)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          const setIndex = bins.findIndex((b) => b === d.label);\n          const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? y(10)\n          //   : 0;\n          const offset = 0;\n          return gHeight - offset;\n        })\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d) => {\n          return innerScaleBand(d.groupLabel);\n        })\n        .attr('width', (d) => barWidth)\n        .attr('fill', (d, i) => colors(i))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          // const setIndex = bins.findIndex((b) => b === d.label);\n          // const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? 5\n          //   : 0;\n          const offset = 0;\n          return y(d.value + offset);\n        })\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem): string => {\n            const currentHeight = gHeight - (y(d.value));\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = this.xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (width / 2) + ' ,' +\n          ((height - xAxisHeight(this.props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = this.yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      const { data, visible } = this.props;\n      this.dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!this.dataSets[i]) {\n            this.dataSets[i] = [];\n          }\n          this.dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales(this.props.data);\n      drawGrid(x, y, this.gridX, this.gridY, this.props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, this.dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\n\nexport interface IChartAdaptor {\n  create: (el: Element | Text, props: { [key: string]: any }) => void;\n  update: (el: Element | Text, props: { [key: string]: any }) => void;\n  destroy: (el: Element | Text) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin?: number;\n  margin?: number;\n  width?: number;\n}\n\nexport interface IGrid {\n  x?: {\n    height?: number;\n    ticks?: number;\n    visible?: boolean;\n    style?: ISVGLineStyle;\n  };\n  y?: {\n    style?: ISVGLineStyle;\n    ticks?: number;\n    visible?: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray?: string;\n  linecap?: string;\n  width: number;\n}\n\nexport interface IAxes {\n  y?: IAxis;\n  x?: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n  grid?: IGrid;\n}\n\nexport interface IDomain {\n  max: number;\n  min: number;\n}\n\nexport interface IMargin {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n}\nexport interface IHistogramProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData;\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke'?: string;\n  'fill'?: string;\n  'opacity'?: number;\n  'stroke-width'?: number;\n  'stroke-opacity'?: number;\n  'shape-rendering'?: string;\n  'visible'?: boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\n\nexport interface IAxis {\n  dateFormat?: string;\n  numberFormat?: string;\n  ticks?: number;\n  tickValues?: number[];\n  height?: number;\n  label?: string;\n  margin?: number;\n  scale?: Scale;\n  style?: ISVGLineStyle;\n  text?: {\n    style: ISVGTextStyle;\n  };\n  width?: number;\n  tickSize?: number;\n  visible?: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IHistogramProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IHistogramProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"/histogram\">Histogram</Link></Button>\n      <Button><Link to=\"/line\">Line Chart</Link></Button>\n      <Button><Link to=\"/pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"/joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","import { scaleOrdinal } from 'd3-scale';\nimport * as React from 'react';\n\nimport colorScheme from './colors';\nimport { IHistogramDataSet } from './Histogram';\n\ninterface IProps {\n  className?: string;\n  theme?: string[];\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  onSelect: (label: string) => void;\n  visible: { [key: string]: boolean };\n}\n\nconst legendIconStyle = {\n  cursor: 'pointer',\n  display: 'inline-block',\n  height: '1rem',\n  margin: '0.25rem 0.5rem',\n  width: '1rem',\n};\n\nconst listStyle = {\n  listStyle: 'none',\n};\n\nconst Legend: React.SFC<IProps> = ({ className, theme = colorScheme, data, onSelect, visible }) => {\n  const scheme: any = scaleOrdinal(theme);\n  const labels = data.bins;\n  return (\n    <div className={className}>\n      <ul style={listStyle}>\n        {\n          labels.map((label) => {\n            const active = (visible.hasOwnProperty(label) && visible[label]) || !visible.hasOwnProperty(label);\n            return (\n              <li key={label}>\n                <div style={{\n                  ...legendIconStyle,\n                  backgroundColor: active ? scheme(label) : '#FFF',\n                  border: '2px solid ' + scheme(label),\n                }}\n                  onClick={() => onSelect(label)}>\n                </div> {label}\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Legend;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport {\n  arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\n\nexport const pieChartD3 = ((): IChartAdaptor => {\n\n  let svg;\n  let tipContainer;\n  let tipContent;\n\n  const defaultProps: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      left: 10,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const PieChartD3 = {\n\n    create(el: HTMLElement, props: Partial<IPieChartProps> = {}) {\n      this.props = merge(defaultProps, { ...props });\n      this.previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      this.containers = [];\n      this.previousData.forEach((dataSet, i) => {\n        this.drawChartBg(this.props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: HTMLElement, props: Partial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      if (props.colorScheme) {\n        this.props.colorScheme = props.colorScheme;\n      }\n      // this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = this.props;\n      this.dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      this.dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', this.props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      this.previousData = this.dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = this.props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!this.containers[i]) {\n        this.containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = this.props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => {\n          return d.count;\n        });\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(this.previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = this.containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each(function (d, j) { this._current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = this.containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      const gLabel = path2.enter().append('text')\n        .attr('class', 'label')\n        .each(function () {\n          // Store initial offset incase we change chart heights.\n          this._height = height;\n          this._width = width;\n        })\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each(function (d, j) {\n          // Store current value to work out fx transition opacities\n          this._current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d, ix, c) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.count === 0 || c[ix]._current.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(thisArc) {\n  return function (d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\n\ninterface ILabels {\n  display: boolean;\n  displayFn?: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor?: string;\n  className?: string;\n  colorScheme?: string[];\n  donutWidth?: number;\n  height: number;\n  labels?: ILabels;\n  margin?: IMargin;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends React.Component<IPieChartProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IPieChartProps> = {\n    backgroundColor: '#ddd',\n    donutWidth: 0,\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IPieChartProps) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IPieChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { axisBottom, axisLeft } from 'd3-axis';\nimport * as get from 'lodash.get';\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n    gridX.call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n      .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n      .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n    );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import React, { FC } from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nexport const TabContainer: FC<{}> = (props) => {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n};\n\n","import {\n  IAxes,\n  IHistogramData,\n} from '../../src';\nimport filterRange from '../../src/colors/filterRange';\n\nexport const grid = {\n  x: {\n    style: {\n      'stroke': '#eeAA00',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    height: 20,\n    style: {\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n  grid,\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const axis: IAxes = {\n  x: {\n    height: 20,\n    label: 'X Axis',\n    margin: 20,\n    text: {\n      style: {\n        'dy': '.35em',\n        'text-anchor': 'start',\n        'transform': 'rotate(90)',\n        'x': 0,\n        'y': 0,\n      },\n    },\n    tickSize: 0,\n  },\n  y: {\n    label: 'Y Axis!',\n    style: {\n      fill: 'none',\n      stroke: '#eeAA00',\n    },\n    text: {\n      style: {\n        fill: '#eeAA00',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    width: 50,\n  },\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const defaultProps = {\n    axis: {\n      x: {\n        height: 25,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        width: 20,\n      },\n    },\n    bar: {\n      height: 50,\n      margin: 10,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props = {}) {\n      this.props = merge(defaultProps, props);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, width - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = this.props;\n      return width - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = this.props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = this.props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = this.props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = this.props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || this.props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(i))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, colors)\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      if (stroke.dasharray !== '') {\n        barItem.attr('stroke-dasharray', stroke.dasharray);\n      }\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid(props: IHistogramProps) {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this._drawScales(this.props.data);\n      this._drawGrid(this.props);\n      this._drawBars(this.props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends React.Component<IHistogramProps, IChartState> {\n\n  private histogram: IChartAdaptor;\n  private ref;\n\n  public static defaultProps = {\n    axis: {},\n    bar: {\n      margin: 2,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.histogram.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   * @param {Object} props Props\n   */\n  public componentWillReceiveProps(props: IHistogramProps) {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","import { extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleBand, scaleLinear, ScaleLinear, scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport { IChartAdaptor, IHistogramData, IHistogramDataSet } from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  let props: IJoyPlotProps;\n  let dataSets: IGroupData[];\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const defaultProps: IJoyPlotProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, newProps: Partial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid(props);\n      this.makeScales();\n      this.containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IJoyPlotProps>) {\n      props = merge<IJoyPlotProps>(defaultProps, newProps);\n      props.data = newProps.data;\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { bar, domain, margin, width, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => d.title);\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      this.yAxis\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      const { ...xLabelStyle } = axis.x.text.style;\n      const { ...yLabelStyle } = axis.y.text.style;\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     * @return {number} bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n      const groupedMargin = this.groupedMargin();\n\n      const maxItems = groupData.reduce((prev, next) => {\n        const thisMax = next.reduce((p, n) => n.length > p ? n.length : p, 0);\n        return thisMax > prev ? thisMax : prev;\n      }, 0);\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = this.containers[i]\n          .selectAll('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + x(d[0].label);\n\n            const ydelta = yOuterScaleBand(d[0].joyLabel);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => innerScaleBand(d.groupLabel))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(ix))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(ix);\n            }\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n        );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid(props: IJoyPlotProps) {\n      const { grid } = props;\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin, bar } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        this.gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        this.gridX.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(this.gridX.selectAll('.tick line'), grid.x.style);\n        attrs(this.gridX.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        this.gridY.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n        );\n\n        attrs(this.gridY.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        this.gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(this.gridY.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, newProps: IJoyPlotProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\n\nexport interface IJoyPlotProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData[];\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IJoyPlotProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IJoyPlotProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IJoyPlotProps) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IJoyPlotProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number> | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { easeCubic } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport { buildScales } from './utils/scales';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const\n    lineProps = {\n      curveType: curveCatmullRom,\n      fill: false,\n      show: true,\n      stroke: '#005870',\n      strokeDashArray: '5 5',\n      strokeDashOffset: 0,\n    };\n\n  const pointProps: ISVGPoint = {\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const defaultProps: ILineChartProps = {\n    axis: {\n      x: {\n        height: 20,\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    className: 'line-chart-d3',\n    fx: easeCubic,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 250,\n    line: lineProps,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    point: pointProps,\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (curveType, yAxisWidth, x, y) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Node, props: Object = {}) {\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      this.makeScales();\n      [this.x, this.y] = buildScales(this.props.axis);\n      this.makeGrid();\n      this.container = svg\n        .append('g')\n        .attr('class', 'linechart-container');\n\n      this.lineContainer = this.container\n        .append('g')\n        .attr('class', 'line-container');\n      this._createLines(this.props.data);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartDataSet[]) {\n      const { axis, tip } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = this.container.selectAll('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet, i: number) => {\n        tipContent.html(() => this.props.tipContentFn([d], 0));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append('circle')\n        .attr('class', 'enter')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => this.y(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return this.x(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: Array<ILineChartDataSet<IChartPoint<number, number>>>) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = this.props;\n      const w = gridWidth(this.props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft(this.y);\n      if (axis.y.tickValues) {\n        yAxis.tickValues(axis.y.tickValues);\n      } else {\n        yAxis.ticks(axis.y.ticks);\n      }\n      if (axis.y.numberFormat) {\n        yAxis.tickFormat(format(axis.y.numberFormat));\n      }\n\n      const xAxis = axisBottom(this.x); // .ticks(axis.x.ticks);\n      if (axis.x.tickValues) {\n        xAxis.tickValues(axis.x.tickValues);\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        datum.data.forEach((d: IChartPoint<number, number>) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      this.x\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      this.y.domain(yDomain)\n        .range([height - xAxisHeight, 0]);\n\n      this.yAxis\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      this.xAxis\n        .attr('transform', `translate(${yAxisWidth},${(height - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    _createLines(data: ILineChartDataSet[]) {\n      data.forEach((d, i) => {\n        this.lineContainer.append('path')\n          .attr('class', `line-${i}`);\n      });\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.append('path')\n            .attr('class', `fill-${i}`);\n\n        });\n\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: ILineChartDataSet[]) {\n      const { axis } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // change the line\n      data.forEach((d, i) => {\n        this.lineContainer.select(`.line-${i}`)\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, this.x, this.y)(d.data as any))\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: ILineChartDataSet[]) {\n      const { axis, height } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => this.x(d.x) + yAxisWidth)\n        .y0((d) => height - xAxisHeight)\n        .y1((d: any) => this.y(d.y));\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.select(`.fill-${i}`)\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data as any))\n\n            ;\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: IHistogramDataSet[]): number {\n      return data.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, props) {\n      if (!props.data) {\n        return;\n      }\n      console.log('receive update', props);\n      this.props = merge(defaultProps, props);\n      console.log('update', this.props.point);\n      [this.x, this.y] = buildScales(this.props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data);\n      this.drawAreas(data);\n      drawGrid(this.x, this.y, this.gridX, this.gridY, this.props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IGrid,\n  IHistogramData,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineChartDataSet<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  label: string;\n  point?: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line?: {\n    show: boolean;\n    fill?: {\n      show: boolean;\n      fill: string;\n    };\n    curveType?: any;\n    stroke?: string;\n    strokeDashOffset?: number;\n    strokeDashArray?: string;\n  };\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps {\n  axis?: IAxes;\n  className?: string;\n  data?: ILineChartDataSet[];\n  fx?: (n: number) => number;\n  grid?: IGrid;\n  height?: number | string;\n  line?: any;\n  margin?: IMargin;\n  point?: ISVGPoint;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<{ x: string | number, y: string | number }>;\n  width?: number | string;\n}\n\nclass LineChart extends React.Component<ILineChartProps, IState> {\n\n  private chart;\n  private ref;\n\n  constructor(props: ILineChartProps) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): ILineChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  public getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import {\n  geoMercator,\n  geoPath,\n} from 'd3-geo';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport { FeatureCollection } from 'geojson';\n\nimport { IChartAdaptor } from './Histogram';\nimport { IMapProps } from './Map';\n\nexport const mapD3 = ((): IChartAdaptor => {\n  let svg;\n\n  const defaultProps: IMapProps = {\n    className: 'map-d3',\n    data: [],\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: 200,\n  };\n\n  const MapD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props: Partial<IMapProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IMapProps>) {\n      this.props = merge<IMapProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g');\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      data: any,\n      geojson: FeatureCollection<any, any>,\n    ) {\n\n      const { width, height } = this.props;\n      const zoom = 3;\n      const projection = geoMercator()\n        .scale((width / 2 / Math.PI) * zoom)\n        .translate([(width / 2), (height / 2)]);\n\n      const geoGenerator = geoPath()\n        .projection(projection);\n\n      // const g = this.container\n      // .selectAll('g')\n      // .data(groupData);\n\n      // Join the FeatureCollection's features array to path elements\n      const u = this.container\n        .selectAll('path')\n        .data(geojson.features);\n\n      // Create path elements and update the d attribute using the geo generator\n      u.enter()\n        .append('path')\n        .attr('d', geoGenerator);\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IMapProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      const { data, geojson } = this.props;\n      this.updateChart(data, geojson);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return MapD3;\n});\n","import { FeatureCollection } from 'geojson';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { mapD3 } from './MapD3';\n\nexport interface IMapProps {\n  className?: string;\n  data: any;\n  geojson: FeatureCollection<any, any>;\n  height: number;\n  width: number | string;\n}\n\n/**\n * Map component\n */\nclass Map extends React.Component<IMapProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IMapProps> = {\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IMapProps) {\n    super(props);\n    this.chart = mapD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IMapProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"map-chart-container\"></div>);\n  }\n}\n\nexport default Map;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport { IChartPoint } from './LineChart';\nimport {\n  IScatterPlotProps,\n  ScatterPlotData,\n} from './ScatterPlot';\n\nexport const scatterPlotD3 = (() => {\n  let svg;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const defaultProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     * @param {Element} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: Element, props: IScatterPlotProps = defaultProps) {\n      this.props = merge(defaultProps, props);\n      this.update(el, props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Element} el Dom container node\n     * @param {Array} data Chart data\n     */\n    _makeSvg(el: Element, data: ScatterPlotData) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height,\n        legendWidth, padding } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(this.props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data) {\n      const { height, padding, width } = this.props;\n      const xSize = width / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (d) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = this.props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (width + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     * @param {Object} traits Chart data\n     * @param {Number} size Chart size\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = this.props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       * @param {Object} p Point\n       */\n      function plot(p: IChartPoint) {\n        const plotCell = select(this);\n        let circle;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       * @param {Object} a point\n       * @param {Object} b point\n       * @return {Array} data\n       */\n      function cross(a, b) {\n        const c = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {Node} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: Element, props: IScatterPlotProps) {\n      this.props = { ...this.props, ...props };\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = this.props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = width / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import * as React from 'react';\nimport { Component } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { scatterPlotD3 } from './ScatterPlotD3';\n\ninterface IChartState {\n  choices: string[];\n  data: any[];\n  height: number;\n  distModels: string[];\n  split: string;\n  parentWidth: number;\n  width: number | string;\n}\n\nexport type ScatterPlotData = any[];\n\nexport interface IScatterPlotProps {\n  choices?: any[];\n  className?: string;\n  chartSize?: number;\n  data: ScatterPlotData;\n  delay?: number;\n  distModels?: string[];\n  duration?: number;\n  height: number;\n  legendWidth?: number;\n  colorScheme?: string[];\n  padding?: number;\n  radius?: number;\n  split?: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<IScatterPlotProps, IChartState> {\n\n  private chart;\n  private ref;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      choices: [],\n      data: [],\n      distModels: [],\n      height: this.props.height,\n      parentWidth: 400,\n      split: '',\n      width: this.props.width,\n    };\n  }\n\n  private handleResize() {\n    const { legendWidth, padding } = this.props;\n    const chartWidth = Math.max(200, this.ref.offsetWidth - padding - legendWidth);\n    const chartHeight = Math.max(200, window.innerHeight - padding -\n      this.ref.getBoundingClientRect().top);\n    const width = Math.min(chartHeight, chartWidth);\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  private getChartState(): IChartState {\n    let { width } = this.props;\n    const { data, choices, split, distModels, height } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      choices,\n      data,\n      distModels,\n      height,\n      parentWidth: this.state.parentWidth,\n      split,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: IScatterPlotProps) {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import filterRange from './colors/filterRange';\nimport Histogram, {\n  IAxes, IHistogramBar, IHistogramData, IHistogramDataSet,\n  IHistogramProps, IStroke,\n} from './Histogram';\n\nimport HorizontalHistogram from './HorizontalHistogram';\nimport JoyPlot from './JoyPlot';\nimport Legend from './Legend';\nimport LineChart, { IChartPoint, ILineChartDataSet, ILineChartProps } from './LineChart';\nimport Map from './Map';\nimport PieChart from './PieChart';\nimport ScatterPlot from './ScatterPlot';\n\nexport {\n  filterRange,\n  JoyPlot,\n  Histogram,\n  HorizontalHistogram,\n  Legend,\n  LineChart,\n  Map,\n  PieChart,\n  ScatterPlot,\n  ILineChartDataSet,\n  IChartPoint,\n  ILineChartProps,\n  IAxes,\n  IHistogramBar,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n  IStroke,\n};\n"],"sourceRoot":""}