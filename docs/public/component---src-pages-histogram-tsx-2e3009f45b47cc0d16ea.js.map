{"version":3,"sources":["webpack:///../src/colors/index.js","webpack:///../src/d3/attrs.ts","webpack:///../src/grid.ts","webpack:///../src/tip.ts","webpack:///../src/HistogramD3.ts","webpack:///../src/Histogram.tsx","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/Legend.tsx","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/MapD3.ts","webpack:///../src/Map.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///./src/components/TabContainer.tsx","webpack:///./src/data.ts","webpack:///../src/colors/filterRange.ts","webpack:///./src/pages/histogram.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx"],"names":["src_colors","attrs","selection","style","Object","keys","forEach","k","attr","drawGrid","x","y","gridX","gridY","props","ticks","height","width","axis","grid","margin","axisWidth","offset","yAxisWidth","gridHeight","visible","call","axisBottom","makeXGridlines","get","tickSize","xAxisHeight","top","tickFormat","selectAll","stroke","transition","axisLeft","makeYGridlines","left","filter","d","i","label","gridWidth","src_tip","fx","in","container","event","pageX","pageY","duration","move","out","makeTip","selector","tipContainer","remove","select","append","tipContent","histogramD3","svg","scaleLinear","scaleBand","innerScaleBand","defaultProps","fill","shape-rendering","stroke-opacity","stroke-width","text","bar","groupMargin","className","colorScheme","data","bins","counts","delay","domain","max","min","color","dasharray","linecap","tip","tips","tipContentFn","create","el","this","mergeProps","_makeSvg","makeGrid","makeScales","update","newProps","merge","childNodes","getElementsByTagName","length","removeChild","_this$props","scale","r","valuesCount","reduce","a","b","appendDomainRange","yDomain","_this$props2","allCounts","prev","next","concat","map","n","value","thisExtent","extent","hasOwnProperty","yRange","range","xAxis","yAxis","xAxisLabel","yAxisLabel","_drawScales","_this$props3","w","dataLabels","c","rangeRound","paddingInner","groupedMargin","bandwidth","barMargin","undefined","tickValues","dateFormat","timeFormat","dataSets","yTickSize","m","barWidth","updateChart","groupData","_this","_this$props4","colors","scaleOrdinal","gHeight","g","bars","enter","stackIndex","setIndex","findIndex","on","ix","html","groupLabel","currentHeight","exit","xText","yText","_this2","_this$props5","count","push","destroy","Histogram","_React$Component","chart","state","parentWidth","handleResize","elem","getDOMNode","ref","offsetWidth","setState","getChartState","componentDidMount","_this3","window","addEventListener","e","componentDidUpdate","rest","children","objectWithoutPropertiesLoose_default","assign","componentWillUnmount","removeEventListener","ReactDOM","render","_this4","react","React","rgb","darker","toString","toFixed","horizontalHistogramD3","xDomain","xRange","h","_drawBars","info","set","drawDataSet","barHeight","setCount","Math","barItem","_this$props6","borderColors","index","all","multiLineOffset","currentWidth","_drawGrid","gy","make_x_gridlines","make_y_gridlines","HorizontalHistogram","histogram","componentWillReceiveProps","joyPlotD3","yOuterScaleBand","joyTitle","containers","_props","thisCounts","p","item","_props5","Number","getBins","Array","from","Set","_props6","yLabels","title","yOuterBounds","_props7","_props8","_props9","thisMax","joyLabel","_props10","_props11","lineData","legendIconStyle","cursor","display","listStyle","Legend","_ref","_ref$theme","theme","onSelect","scheme","labels","active","key","backgroundColor","border","onClick","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineProps","curveType","curveCatmullRom","show","strokeDashArray","strokeDashOffset","pointProps","radius","easeCubic","line","point","datumProps","_buildScales","lineContainer","_createLines","_drawDataPointSet","getYAxisWidth","pointContainer","points","dx","ys","xs","numberFormat","format","getXAxisHeight","datum","parsedY","parsedX","_drawLines","curve","drawAreas","area","y0","y1","console","log","_buildScales2","timeParse","mapD3","geojson","features","type","projection","geoMercator","PI","translate","geoGenerator","geoPath","Map","pieChartD3","donutWidth","displayFn","previousData","dataSet","drawChartBg","drawCharts","outerRadius","_this$props2$donutWid","innerRadius","_this$props3$donutWid","drawChart","tau","bgArc","arc","startAngle","endAngle","background","thisPie","pie","sort","arcs","thisArc","path","j","each","_current","attrTween","interpolate","t","arcTween","path2","_height","_width","centroid","PieChart","scatterPlotD3","yScale","xScale","domainByTrait","choices","legendWidth","padding","xSize","ySize","_drawLegend","split","legend","cell","_drawPoints","traits","nx","cross","plotCell","values","distModels","indexOf","trait","ScatterPlot","_Component","chartWidth","chartHeight","innerHeight","getBoundingClientRect","Component","TabContainer","react_default","createElement","index_es","component","dy","text-anchor","transform","Color","hsl","array","luminosity","v","self","random","tipContentFns","dataLegendData","initialSate","chartType","reducer","action","Error","dataToSpreadSheet","speadSheetData","HistogramExample","_useState","useState","tab","setTab","_useReducer","useReducer","dispatch","_useState2","setVisible","Chart","layout","seo","description","variant","spacing","src_Legend","_Object$assign","JSON","stringify","onChange","TabContainer_TabContainer","lib_default","valueRenderer","sheetRenderer","onCellsChanged","changes","row","col","target","__webpack_require__","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","object","string","isRequired","func","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","SEO","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","name","property","author","join","arrayOf","Header","siteTitle","position","gatsby_browser_entry","to","Layout","Fragment","header","flexGrow","paddingTop","Date","getFullYear","href","_755544856","node"],"mappings":"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","file":"component---src-pages-histogram-tsx-2e3009f45b47cc0d16ea.js","sourcesContent":["export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { axisBottom, axisLeft } from 'd3-axis';\nimport * as get from 'lodash.get';\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n    gridX.call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n      .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n      .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n    );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  // @TODO make this a prop\n  const stacked = false;\n\n  const defaultProps: IHistogramProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: HTMLElement, props: Partial<IHistogramProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IHistogramProps>) {\n      this.props = merge<IHistogramProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n      if (newProps.colorScheme) {\n        this.props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height } = this.props;\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [height - (margin.top * 2) - xAxisHeight(this.props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { axis, margin, height } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(this.props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      if (stacked) {\n        innerScaleBand\n          .domain(['main'])\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      } else {\n        innerScaleBand\n          .domain(dataLabels)\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      }\n      const xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(this.props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, this.dataSets);\n\n      const yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (axis.y.scale === 'TIME' && axis.y.dateFormat) {\n        yAxis.tickFormat(timeFormat(axis.y.dateFormat));\n      }\n      this.yAxis\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(this.props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(this.props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip } = this.props;\n      const barWidth = this.barWidth();\n\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(this.props.colorScheme);\n      const gHeight = gridHeight(this.props);\n\n      const g = this.container\n        .selectAll('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append('g')\n        .merge(g)\n        .attr('transform', (d) => {\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + x(d[0].label);\n          return `translate(${xdelta}, 0)`;\n        })\n        .selectAll('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => this.props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('height', 0)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          const setIndex = bins.findIndex((b) => b === d.label);\n          const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? y(10)\n          //   : 0;\n          const offset = 0;\n          return gHeight - offset;\n        })\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d) => {\n          return innerScaleBand(d.groupLabel);\n        })\n        .attr('width', (d) => barWidth)\n        .attr('fill', (d, i) => colors(i))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          // const setIndex = bins.findIndex((b) => b === d.label);\n          // const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? 5\n          //   : 0;\n          const offset = 0;\n          return y(d.value + offset);\n        })\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem): string => {\n            const currentHeight = gHeight - (y(d.value));\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = this.xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (width / 2) + ' ,' +\n          ((height - xAxisHeight(this.props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = this.yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      const { data, visible } = this.props;\n      this.dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!this.dataSets[i]) {\n            this.dataSets[i] = [];\n          }\n          this.dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales(this.props.data);\n      drawGrid(x, y, this.gridX, this.gridY, this.props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, this.dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\n\nexport interface IChartAdaptor {\n  create: (el: Element | Text, props: { [key: string]: any }) => void;\n  update: (el: Element | Text, props: { [key: string]: any }) => void;\n  destroy: (el: Element | Text) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin?: number;\n  margin?: number;\n  width?: number;\n}\n\nexport interface IGrid {\n  x?: {\n    height?: number;\n    ticks?: number;\n    visible?: boolean;\n    style?: ISVGLineStyle;\n  };\n  y?: {\n    style?: ISVGLineStyle;\n    ticks?: number;\n    visible?: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray?: string;\n  linecap?: string;\n  width: number;\n}\n\nexport interface IAxes {\n  y?: IAxis;\n  x?: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n  grid?: IGrid;\n}\n\nexport interface IDomain {\n  max: number;\n  min: number;\n}\n\nexport interface IMargin {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n}\nexport interface IHistogramProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData;\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke'?: string;\n  'fill'?: string;\n  'opacity'?: number;\n  'stroke-width'?: number;\n  'stroke-opacity'?: number;\n  'shape-rendering'?: string;\n  'visible'?: boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\n\nexport interface IAxis {\n  dateFormat?: string;\n  numberFormat?: string;\n  ticks?: number;\n  tickValues?: number[];\n  height?: number;\n  label?: string;\n  margin?: number;\n  scale?: Scale;\n  style?: ISVGLineStyle;\n  text?: {\n    style: ISVGTextStyle;\n  };\n  width?: number;\n  tickSize?: number;\n  visible?: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IHistogramProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IHistogramProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const defaultProps = {\n    axis: {\n      x: {\n        height: 25,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        width: 20,\n      },\n    },\n    bar: {\n      height: 50,\n      margin: 10,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props = {}) {\n      this.props = merge(defaultProps, props);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, width - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = this.props;\n      return width - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = this.props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = this.props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = this.props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = this.props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || this.props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(i))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, colors)\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      if (stroke.dasharray !== '') {\n        barItem.attr('stroke-dasharray', stroke.dasharray);\n      }\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid(props: IHistogramProps) {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this._drawScales(this.props.data);\n      this._drawGrid(this.props);\n      this._drawBars(this.props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends React.Component<IHistogramProps, IChartState> {\n\n  private histogram: IChartAdaptor;\n  private ref;\n\n  public static defaultProps = {\n    axis: {},\n    bar: {\n      margin: 2,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.histogram.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   * @param {Object} props Props\n   */\n  public componentWillReceiveProps(props: IHistogramProps) {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","import { extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleBand, scaleLinear, ScaleLinear, scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport { IChartAdaptor, IHistogramData, IHistogramDataSet } from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  let props: IJoyPlotProps;\n  let dataSets: IGroupData[];\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const defaultProps: IJoyPlotProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, newProps: Partial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid(props);\n      this.makeScales();\n      this.containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IJoyPlotProps>) {\n      props = merge<IJoyPlotProps>(defaultProps, newProps);\n      props.data = newProps.data;\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { bar, domain, margin, width, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => d.title);\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      this.yAxis\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      const { ...xLabelStyle } = axis.x.text.style;\n      const { ...yLabelStyle } = axis.y.text.style;\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     * @return {number} bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n      const groupedMargin = this.groupedMargin();\n\n      const maxItems = groupData.reduce((prev, next) => {\n        const thisMax = next.reduce((p, n) => n.length > p ? n.length : p, 0);\n        return thisMax > prev ? thisMax : prev;\n      }, 0);\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = this.containers[i]\n          .selectAll('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + x(d[0].label);\n\n            const ydelta = yOuterScaleBand(d[0].joyLabel);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => innerScaleBand(d.groupLabel))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(ix))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(ix);\n            }\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n        );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid(props: IJoyPlotProps) {\n      const { grid } = props;\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin, bar } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        this.gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        this.gridX.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(this.gridX.selectAll('.tick line'), grid.x.style);\n        attrs(this.gridX.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        this.gridY.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n        );\n\n        attrs(this.gridY.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        this.gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(this.gridY.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, newProps: IJoyPlotProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\n\nexport interface IJoyPlotProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData[];\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IJoyPlotProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IJoyPlotProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IJoyPlotProps) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IJoyPlotProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import { scaleOrdinal } from 'd3-scale';\nimport * as React from 'react';\n\nimport colorScheme from './colors';\nimport { IHistogramDataSet } from './Histogram';\n\ninterface IProps {\n  className?: string;\n  theme?: string[];\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  onSelect: (label: string) => void;\n  visible: { [key: string]: boolean };\n}\n\nconst legendIconStyle = {\n  cursor: 'pointer',\n  display: 'inline-block',\n  height: '1rem',\n  margin: '0.25rem 0.5rem',\n  width: '1rem',\n};\n\nconst listStyle = {\n  listStyle: 'none',\n};\n\nconst Legend: React.SFC<IProps> = ({ className, theme = colorScheme, data, onSelect, visible }) => {\n  const scheme: any = scaleOrdinal(theme);\n  const labels = data.bins;\n  return (\n    <div className={className}>\n      <ul style={listStyle}>\n        {\n          labels.map((label) => {\n            const active = (visible.hasOwnProperty(label) && visible[label]) || !visible.hasOwnProperty(label);\n            return (\n              <li key={label}>\n                <div style={{\n                  ...legendIconStyle,\n                  backgroundColor: active ? scheme(label) : '#FFF',\n                  border: '2px solid ' + scheme(label),\n                }}\n                  onClick={() => onSelect(label)}>\n                </div> {label}\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Legend;\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number> | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { easeCubic } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport { buildScales } from './utils/scales';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const\n    lineProps = {\n      curveType: curveCatmullRom,\n      fill: false,\n      show: true,\n      stroke: '#005870',\n      strokeDashArray: '5 5',\n      strokeDashOffset: 0,\n    };\n\n  const pointProps: ISVGPoint = {\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const defaultProps: ILineChartProps = {\n    axis: {\n      x: {\n        height: 20,\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    className: 'line-chart-d3',\n    fx: easeCubic,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 250,\n    line: lineProps,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    point: pointProps,\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (curveType, yAxisWidth, x, y) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Node, props: Object = {}) {\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      this.makeScales();\n      [this.x, this.y] = buildScales(this.props.axis);\n      this.makeGrid();\n      this.container = svg\n        .append('g')\n        .attr('class', 'linechart-container');\n\n      this.lineContainer = this.container\n        .append('g')\n        .attr('class', 'line-container');\n      this._createLines(this.props.data);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartDataSet[]) {\n      const { axis, tip } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = this.container.selectAll('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet, i: number) => {\n        tipContent.html(() => this.props.tipContentFn([d], 0));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append('circle')\n        .attr('class', 'enter')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => this.y(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return this.x(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: Array<ILineChartDataSet<IChartPoint<number, number>>>) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = this.props;\n      const w = gridWidth(this.props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft(this.y);\n      if (axis.y.tickValues) {\n        yAxis.tickValues(axis.y.tickValues);\n      } else {\n        yAxis.ticks(axis.y.ticks);\n      }\n      if (axis.y.numberFormat) {\n        yAxis.tickFormat(format(axis.y.numberFormat));\n      }\n\n      const xAxis = axisBottom(this.x); // .ticks(axis.x.ticks);\n      if (axis.x.tickValues) {\n        xAxis.tickValues(axis.x.tickValues);\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        datum.data.forEach((d: IChartPoint<number, number>) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      this.x\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      this.y.domain(yDomain)\n        .range([height - xAxisHeight, 0]);\n\n      this.yAxis\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      this.xAxis\n        .attr('transform', `translate(${yAxisWidth},${(height - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    _createLines(data: ILineChartDataSet[]) {\n      data.forEach((d, i) => {\n        this.lineContainer.append('path')\n          .attr('class', `line-${i}`);\n      });\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.append('path')\n            .attr('class', `fill-${i}`);\n\n        });\n\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: ILineChartDataSet[]) {\n      const { axis } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // change the line\n      data.forEach((d, i) => {\n        this.lineContainer.select(`.line-${i}`)\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, this.x, this.y)(d.data as any))\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: ILineChartDataSet[]) {\n      const { axis, height } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => this.x(d.x) + yAxisWidth)\n        .y0((d) => height - xAxisHeight)\n        .y1((d: any) => this.y(d.y));\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.select(`.fill-${i}`)\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data as any))\n\n            ;\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: IHistogramDataSet[]): number {\n      return data.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, props) {\n      if (!props.data) {\n        return;\n      }\n      console.log('receive update', props);\n      this.props = merge(defaultProps, props);\n      console.log('update', this.props.point);\n      [this.x, this.y] = buildScales(this.props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data);\n      this.drawAreas(data);\n      drawGrid(this.x, this.y, this.gridX, this.gridY, this.props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IGrid,\n  IHistogramData,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineChartDataSet<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  label: string;\n  point?: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line?: {\n    show: boolean;\n    fill?: {\n      show: boolean;\n      fill: string;\n    };\n    curveType?: any;\n    stroke?: string;\n    strokeDashOffset?: number;\n    strokeDashArray?: string;\n  };\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps {\n  axis?: IAxes;\n  className?: string;\n  data?: ILineChartDataSet[];\n  fx?: (n: number) => number;\n  grid?: IGrid;\n  height?: number | string;\n  line?: any;\n  margin?: IMargin;\n  point?: ISVGPoint;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<{ x: string | number, y: string | number }>;\n  width?: number | string;\n}\n\nclass LineChart extends React.Component<ILineChartProps, IState> {\n\n  private chart;\n  private ref;\n\n  constructor(props: ILineChartProps) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): ILineChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  public getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import {\n  geoMercator,\n  geoPath,\n} from 'd3-geo';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport { FeatureCollection } from 'geojson';\n\nimport { IChartAdaptor } from './Histogram';\nimport { IMapProps } from './Map';\n\nexport const mapD3 = ((): IChartAdaptor => {\n  let svg;\n\n  const defaultProps: IMapProps = {\n    className: 'map-d3',\n    data: [],\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: 200,\n  };\n\n  const MapD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props: Partial<IMapProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IMapProps>) {\n      this.props = merge<IMapProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g');\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      data: any,\n      geojson: FeatureCollection<any, any>,\n    ) {\n\n      const { width, height } = this.props;\n      const zoom = 3;\n      const projection = geoMercator()\n        .scale((width / 2 / Math.PI) * zoom)\n        .translate([(width / 2), (height / 2)]);\n\n      const geoGenerator = geoPath()\n        .projection(projection);\n\n      // const g = this.container\n      // .selectAll('g')\n      // .data(groupData);\n\n      // Join the FeatureCollection's features array to path elements\n      const u = this.container\n        .selectAll('path')\n        .data(geojson.features);\n\n      // Create path elements and update the d attribute using the geo generator\n      u.enter()\n        .append('path')\n        .attr('d', geoGenerator);\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IMapProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      const { data, geojson } = this.props;\n      this.updateChart(data, geojson);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return MapD3;\n});\n","import { FeatureCollection } from 'geojson';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { mapD3 } from './MapD3';\n\nexport interface IMapProps {\n  className?: string;\n  data: any;\n  geojson: FeatureCollection<any, any>;\n  height: number;\n  width: number | string;\n}\n\n/**\n * Map component\n */\nclass Map extends React.Component<IMapProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IMapProps> = {\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IMapProps) {\n    super(props);\n    this.chart = mapD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IMapProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"map-chart-container\"></div>);\n  }\n}\n\nexport default Map;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport {\n  arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\n\nexport const pieChartD3 = ((): IChartAdaptor => {\n\n  let svg;\n  let tipContainer;\n  let tipContent;\n\n  const defaultProps: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      left: 10,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const PieChartD3 = {\n\n    create(el: HTMLElement, props: Partial<IPieChartProps> = {}) {\n      this.props = merge(defaultProps, { ...props });\n      this.previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      this.containers = [];\n      this.previousData.forEach((dataSet, i) => {\n        this.drawChartBg(this.props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: HTMLElement, props: Partial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      if (props.colorScheme) {\n        this.props.colorScheme = props.colorScheme;\n      }\n      // this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = this.props;\n      this.dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      this.dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', this.props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      this.previousData = this.dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = this.props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!this.containers[i]) {\n        this.containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = this.props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => {\n          return d.count;\n        });\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(this.previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = this.containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each(function (d, j) { this._current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = this.containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      const gLabel = path2.enter().append('text')\n        .attr('class', 'label')\n        .each(function () {\n          // Store initial offset incase we change chart heights.\n          this._height = height;\n          this._width = width;\n        })\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each(function (d, j) {\n          // Store current value to work out fx transition opacities\n          this._current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d, ix, c) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.count === 0 || c[ix]._current.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(thisArc) {\n  return function (d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\n\ninterface ILabels {\n  display: boolean;\n  displayFn?: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor?: string;\n  className?: string;\n  colorScheme?: string[];\n  donutWidth?: number;\n  height: number;\n  labels?: ILabels;\n  margin?: IMargin;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends React.Component<IPieChartProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IPieChartProps> = {\n    backgroundColor: '#ddd',\n    donutWidth: 0,\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IPieChartProps) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IPieChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport { IChartPoint } from './LineChart';\nimport {\n  IScatterPlotProps,\n  ScatterPlotData,\n} from './ScatterPlot';\n\nexport const scatterPlotD3 = (() => {\n  let svg;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const defaultProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     * @param {Element} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: Element, props: IScatterPlotProps = defaultProps) {\n      this.props = merge(defaultProps, props);\n      this.update(el, props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Element} el Dom container node\n     * @param {Array} data Chart data\n     */\n    _makeSvg(el: Element, data: ScatterPlotData) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height,\n        legendWidth, padding } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(this.props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data) {\n      const { height, padding, width } = this.props;\n      const xSize = width / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (d) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = this.props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (width + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     * @param {Object} traits Chart data\n     * @param {Number} size Chart size\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = this.props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       * @param {Object} p Point\n       */\n      function plot(p: IChartPoint) {\n        const plotCell = select(this);\n        let circle;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       * @param {Object} a point\n       * @param {Object} b point\n       * @return {Array} data\n       */\n      function cross(a, b) {\n        const c = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {Node} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: Element, props: IScatterPlotProps) {\n      this.props = { ...this.props, ...props };\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = this.props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = width / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import * as React from 'react';\nimport { Component } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { scatterPlotD3 } from './ScatterPlotD3';\n\ninterface IChartState {\n  choices: string[];\n  data: any[];\n  height: number;\n  distModels: string[];\n  split: string;\n  parentWidth: number;\n  width: number | string;\n}\n\nexport type ScatterPlotData = any[];\n\nexport interface IScatterPlotProps {\n  choices?: any[];\n  className?: string;\n  chartSize?: number;\n  data: ScatterPlotData;\n  delay?: number;\n  distModels?: string[];\n  duration?: number;\n  height: number;\n  legendWidth?: number;\n  colorScheme?: string[];\n  padding?: number;\n  radius?: number;\n  split?: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<IScatterPlotProps, IChartState> {\n\n  private chart;\n  private ref;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      choices: [],\n      data: [],\n      distModels: [],\n      height: this.props.height,\n      parentWidth: 400,\n      split: '',\n      width: this.props.width,\n    };\n  }\n\n  private handleResize() {\n    const { legendWidth, padding } = this.props;\n    const chartWidth = Math.max(200, this.ref.offsetWidth - padding - legendWidth);\n    const chartHeight = Math.max(200, window.innerHeight - padding -\n      this.ref.getBoundingClientRect().top);\n    const width = Math.min(chartHeight, chartWidth);\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  private getChartState(): IChartState {\n    let { width } = this.props;\n    const { data, choices, split, distModels, height } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      choices,\n      data,\n      distModels,\n      height,\n      parentWidth: this.state.parentWidth,\n      split,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: IScatterPlotProps) {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import React, { FC } from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nexport const TabContainer: FC<{}> = (props) => {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n};\n\n","import {\n  IAxes,\n  IHistogramData,\n} from '../../src';\nimport filterRange from '../../src/colors/filterRange';\n\nexport const grid = {\n  x: {\n    style: {\n      'stroke': '#eeAA00',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    height: 20,\n    style: {\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n  grid,\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const axis: IAxes = {\n  x: {\n    height: 20,\n    label: 'X Axis',\n    margin: 20,\n    text: {\n      style: {\n        'dy': '.35em',\n        'text-anchor': 'start',\n        'transform': 'rotate(90)',\n        'x': 0,\n        'y': 0,\n      },\n    },\n    tickSize: 0,\n  },\n  y: {\n    label: 'Y Axis!',\n    style: {\n      fill: 'none',\n      stroke: '#eeAA00',\n    },\n    text: {\n      style: {\n        fill: '#eeAA00',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    width: 50,\n  },\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import * as Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","import React, {\n  useReducer,\n  useState,\n} from 'react';\nimport ReactDataSheet from 'react-datasheet';\n\nimport {\n  Card,\n  CardContent,\n  Grid,\n  MenuItem,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\nimport { HorizontalHistogram } from '../../../src';\nimport Histogram, { IHistogramData } from '../../../src/Histogram';\nimport Legend from '../../../src/Legend';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { TabContainer } from '../components/TabContainer';\nimport {\n  axis,\n  data,\n  grid,\n  theme,\n} from '../data';\n\nconst tipContentFns = [\n  (bins, i, d) =>\n    bins[i] + '<br />HI THere ' + d.toFixed(2),\n  (bins, i, d) =>\n    bins[i] + '<br />Bookay ' + d.toFixed(2),\n];\n\nconst dataLegendData = {\n  bins: data.counts.map((c) => c.label),\n  counts: [{\n    data: data.counts.map((c) => c.data.reduce((p, n) => p + n, 0)),\n    label: '',\n  }],\n};\n\ninterface IInitialState {\n  chartType: 'HorizontalHistogram' | 'Histogram';\n  data: IHistogramData;\n}\nconst initialSate: IInitialState = {\n  chartType: 'Histogram',\n  data,\n};\n\ntype Actions = { type: 'setChartType'; chartType: string }\n  | { type: 'setData', data: IHistogramData };\n\nfunction reducer(state: IInitialState, action: Actions) {\n  switch (action.type) {\n    case 'setChartType':\n      return { ...state, chartType: action.chartType };\n    case 'setData':\n      return { ...state, data: action.data };\n    default:\n      throw new Error();\n  }\n}\n\nexport const dataToSpreadSheet = (datum: IHistogramData): any => {\n  const speadSheetData: any = [];\n\n  datum.bins.forEach((b, i) => {\n    if (!speadSheetData[i]) {\n      speadSheetData[i] = [];\n    }\n    speadSheetData[i][0] = { value: b };\n  });\n  datum.counts.forEach((c, i) => {\n    c.data.forEach((d, x) => {\n      if (!speadSheetData[x]) {\n        speadSheetData[x] = [];\n      }\n      speadSheetData[x][i + 1] = { value: d };\n    });\n  });\n  return speadSheetData;\n};\n\nconst HistogramExample = () => {\n  const [tab, setTab] = useState(0);\n  const [state, dispatch] = useReducer(reducer, initialSate);\n  const [visible, setVisible] = useState({});\n\n  const speadSheetData = dataToSpreadSheet(state.data);\n\n  const Chart = state.chartType === 'Histogram' ? Histogram : HorizontalHistogram;\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <Typography variant=\"h2\">Histogram</Typography>\n      <div>\n        <Grid container spacing={24}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Chart data={state.data}\n                  axis={axis}\n                  grid={grid}\n                  width={'100%'}\n                  height={300}\n                  visible={visible}\n                  colorScheme={theme}\n                  tipContentFn={tipContentFns[0]}\n                />\n                <Legend\n                  theme={theme}\n                  data={dataLegendData}\n                  onSelect={(key) => {\n                    setVisible({ ...visible, [key]: visible.hasOwnProperty(key) ? !visible[key] : false });\n                  }}\n                  visible={visible}\n                />\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <pre>\n                  {JSON.stringify(state)}\n                </pre>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n                  <Tab label=\"Data\" />\n                  <Tab label=\"Styling\" />\n                </Tabs>\n                {\n                  tab === 0 && <TabContainer>\n                    <ReactDataSheet<any, any> data={speadSheetData}\n                      valueRenderer={(cell) => cell.value}\n                      sheetRenderer={(props) => (\n                        <table className={props.className + ' my-awesome-extra-class'}>\n                          <thead>\n                            <tr>\n                              <th className=\"action-cell\">Bin</th>\n                              {\n                                state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n                                  {count.label}\n                                </th>))\n                              }\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {props.children}\n                          </tbody>\n                        </table>\n                      )}\n                      onCellsChanged={(changes) => {\n                        changes.forEach(({ cell, row, col, value }) => {\n                          if (col === 0) {\n                            state.data.bins[row] = value;\n                          } else {\n                            state.data.counts[col - 1].data[row] = Number(value);\n                          }\n                        });\n                        dispatch({ type: 'setData', data: state.data });\n                      }} />\n                  </TabContainer>\n                }\n                {\n                  tab === 1 && <TabContainer>\n                    <Grid container spacing={24}>\n                      <Grid item xs={6}>\n                        <TextField\n                          select\n                          label=\"Chart direction\"\n                          value={state.chartType}\n                          onChange={(e) => {\n                            dispatch({ type: 'setChartType', chartType: e.target.value });\n                          }}\n                        >\n                          <MenuItem value=\"Histogram\">\n                            Histogram\n                            </MenuItem>\n                          <MenuItem value=\"HorizontalHistogram\">\n                            HorizontalHistogram\n                            </MenuItem>\n\n                        </TextField>\n                      </Grid>\n                    </Grid>\n                  </TabContainer>\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nexport default HistogramExample;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"/histogram\">Histogram</Link></Button>\n      <Button><Link to=\"/line\">Line Chart</Link></Button>\n      <Button><Link to=\"/pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"/joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}