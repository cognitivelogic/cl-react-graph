{"version":3,"sources":["webpack:///./src/components/CurveSelector.tsx","webpack:///./src/pages/line.tsx","webpack:///../src/HistogramD3.ts","webpack:///../src/Histogram.tsx","webpack:///../src/colors/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///../src/d3/attrs.ts","webpack:///../src/tip.ts","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///../src/colors/filterRange.ts","webpack:///../src/Legend.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/grid.ts","webpack:///./src/components/TabContainer.tsx","webpack:///./src/data.ts","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/MapD3.ts","webpack:///../src/Map.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///../src/index.ts"],"names":["curves","curveBasis","curveCardinal","curveCatmullRom","curveLinear","curveMonotoneX","curveStep","curveStepAfter","curveStepBefore","CurveSelector","_ref","onChange","value","_useState","useState","functionName","setFunctionName","react_default","a","createElement","index_es","select","label","_onChange","_x","apply","this","arguments","toString","e","target","Object","keys","map","c","key","initialState","data","x","y","line","curveType","fill","show","stroke","strokeDashArray","strokeDashOffset","point","radius","Date","reducer","state","action","type","assign","merge","curve","dash","offset","color","Error","LineExample","_useReducer","useReducer","dispatch","tab","setTab","Number","layout","seo","title","description","variant","container","spacing","item","xs","src_0","axis","grid","width","JSON","stringify","v","TabContainer","react_datasheet_lib_default","valueRenderer","cell","sheetRenderer","props","className","col","children","onCellsChanged","changes","newData","row","concat","forEach","pts","gutterBottom","CurveSelector_CurveSelector","lib_default","TextField_default","id","elevation","control","checked","_","Slider_default","aria-labelledby","step","histogramD3","svg","tipContainer","tipContent","scaleLinear","scaleBand","innerScaleBand","defaultProps","height","margin","style","shape-rendering","stroke-opacity","stroke-width","text","ticks","bar","groupMargin","colorScheme","bins","counts","delay","domain","max","min","duration","visible","left","top","dasharray","linecap","tip","tips","tipContentFn","i","d","create","el","mergeProps","_makeSvg","makeGrid","makeScales","append","attr","update","newProps","selectAll","remove","childNodes","getElementsByTagName","length","removeChild","_this$props","scale","r","makeTip","valuesCount","reduce","b","appendDomainRange","yDomain","_this$props2","allCounts","prev","next","n","thisExtent","extent","hasOwnProperty","yRange","xAxisHeight","range","xAxis","yAxis","xAxisLabel","yAxisLabel","_drawScales","_this$props3","w","gridWidth","dataLabels","rangeRound","paddingInner","groupedMargin","bandwidth","barMargin","axisBottom","tickSize","get","undefined","tickValues","filter","dateFormat","tickFormat","timeFormat","yAxisWidth","call","dataSets","axisLeft","yTickSize","transition","attrs","m","barWidth","updateChart","groupData","_this","_this$props4","colors","scaleOrdinal","gHeight","gridHeight","g","bars","enter","stackIndex","setIndex","findIndex","on","ix","html","fx","in","move","out","groupLabel","currentHeight","exit","xText","yText","gridX","gridY","_this2","_this$props5","count","push","drawGrid","destroy","Histogram","_React$Component","chart","parentWidth","handleResize","elem","getDOMNode","ref","offsetWidth","setState","getChartState","componentDidMount","_this3","window","addEventListener","componentDidUpdate","rest","objectWithoutPropertiesLoose_default","componentWillUnmount","removeEventListener","ReactDOM","render","_this4","react","React","rgb","darker","toFixed","__webpack_exports__","__webpack_require__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","object","string","isRequired","func","module","exports","require","default","selection","k","d3_selection__WEBPACK_IMPORTED_MODULE_0__","event","pageX","pageY","selector","SEO","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","name","property","author","join","arrayOf","array","Header","siteTitle","position","gatsby_browser_entry","to","Layout","Fragment","header","flexGrow","padding","paddingTop","getFullYear","href","_755544856","node","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","Color","hsl","luminosity","index","self","indexOf","sort","Math","random","legendIconStyle","cursor","display","listStyle","Legend","_ref$theme","theme","onSelect","scheme","labels","react__WEBPACK_IMPORTED_MODULE_2__","active","backgroundColor","border","onClick","pieChartD3","donutWidth","displayFn","previousData","set","containers","dataSet","drawChartBg","drawCharts","outerRadius","_this$props2$donutWid","innerRadius","_this$props3$donutWid","drawChart","tau","PI","bgArc","arc","startAngle","endAngle","background","_this$props6","thisPie","pie","arcs","thisArc","path","j","each","_current","attrTween","interpolate","t","arcTween","path2","_height","_width","centroid","PieChart","d3_axis__WEBPACK_IMPORTED_MODULE_0__","lodash_get__WEBPACK_IMPORTED_MODULE_1__","_d3_attrs__WEBPACK_IMPORTED_MODULE_2__","axisWidth","makeXGridlines","makeYGridlines","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","component","data2","_src_colors_filterRange__WEBPACK_IMPORTED_MODULE_0__","borderColors","dy","text-anchor","transform","filterRange","horizontalHistogramD3","xDomain","xRange","h","_drawBars","info","drawDataSet","barHeight","setCount","barItem","all","multiLineOffset","currentWidth","_drawGrid","gy","make_x_gridlines","make_y_gridlines","HorizontalHistogram","histogram","componentWillReceiveProps","joyPlotD3","yOuterScaleBand","joyTitle","_props","thisCounts","p","_props5","getBins","Array","from","Set","_props6","yLabels","yOuterBounds","_props7","_props8","_props9","thisMax","joyLabel","_props10","_props11","lineData","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineProps","pointProps","easeCubic","datumProps","_buildScales","lineContainer","_createLines","_drawDataPointSet","getYAxisWidth","pointContainer","points","dx","ys","numberFormat","format","getXAxisHeight","datum","parsedY","parsedX","_drawLines","drawAreas","area","y0","y1","console","log","_buildScales2","timeParse","LineChart","mapD3","geojson","features","projection","geoMercator","translate","geoGenerator","geoPath","Map","scatterPlotD3","yScale","xScale","domainByTrait","choices","legendWidth","xSize","ySize","_drawLegend","split","legend","_drawPoints","traits","nx","cross","plotCell","values","distModels","trait","ScatterPlot","_Component","chartWidth","chartHeight","innerHeight","getBoundingClientRect","Component","src_HorizontalHistogram","src_LineChart"],"mappings":"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","file":"component---src-pages-line-tsx-99bc6db8a4828b3596fd.js","sourcesContent":["import {\n  curveBasis,\n  curveCardinal,\n  curveCatmullRom,\n  curveLinear,\n  curveMonotoneX,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore,\n} from 'd3-shape';\nimport React, {\n  FC,\n  useState,\n} from 'react';\n\nimport {\n  MenuItem,\n  TextField,\n} from '@material-ui/core';\n\nconst curves = {\n  curveBasis,\n  curveCardinal,\n  curveCatmullRom,\n  curveLinear,\n  curveMonotoneX,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore,\n};\n\n// export const getCurve\n\ninterface IProps {\n  onChange: (curve: any) => void;\n  value: string;\n}\nexport const CurveSelector: FC<IProps> = ({ onChange, value }) => {\n  const [functionName, setFunctionName] = useState('');\n  return (\n    <TextField\n      select\n      label=\"Curve\"\n      value={functionName === '' ? value : functionName}\n      onChange={(e) => {\n        setFunctionName(e.target.value);\n        onChange(curves[e.target.value]);\n      }}\n    >\n      {Object.keys(curves).map((c) => (\n        <MenuItem key={c} value={c}>\n          {c}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n","// Be sure to include styles at some point, probably during your bootstrapping\nimport 'react-datasheet/lib/react-datasheet.css';\n\nimport {\n  curveCatmullRom,\n  curveStepAfter,\n} from 'd3-shape';\nimport merge from 'deepmerge';\nimport ColorPicker from 'material-ui-color-picker';\nimport React, {\n  FC,\n  useReducer,\n  useState,\n} from 'react';\nimport ReactDataSheet, { Cell } from 'react-datasheet';\n\nimport {\n  Card,\n  CardContent,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  Switch,\n  Tab,\n  Tabs,\n  Typography,\n} from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/lab/Slider';\n\nimport {\n  IAxes,\n  IChartPoint,\n  ILineChartDataSet,\n  LineChart,\n} from '../../../src';\nimport { CurveSelector } from '../components/CurveSelector';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { TabContainer } from '../components/TabContainer';\nimport {\n  axis,\n  grid,\n} from '../data';\n\nconst initialState: ILineChartDataSet = {\n  data: [\n    { x: 1, y: 1 },\n    { x: 2, y: 12 },\n    { x: 3, y: 3 },\n    { x: 4, y: 4 },\n  ],\n  label: 'test data',\n  line: {\n    curveType: curveCatmullRom,\n    fill: {\n      fill: 'rgba(10, 10, 10, 0.2)',\n      show: true,\n    },\n    show: true,\n    stroke: '#00a97b',\n    strokeDashArray: '10 5',\n    strokeDashOffset: 3,\n  },\n  point: {\n    fill: 'black',\n    radius: 10,\n    show: true,\n    stroke: 'red',\n  },\n};\n\nconst points2: ILineChartDataSet[] = [\n  {\n    data: [\n      { x: 1, y: 10 },\n      { x: 2, y: 15 },\n      { x: 3, y: 4 },\n      { x: 4, y: 7 },\n    ],\n    label: 'test data',\n    line: {\n      curveType: curveCatmullRom,\n      fill: {\n        fill: 'rgba(10, 10, 10, 0.2)',\n        show: true,\n      },\n      show: true,\n      stroke: 'orange',\n      strokeDashArray: '10 5',\n      strokeDashOffset: 3,\n    },\n    point: {\n      fill: 'black',\n      radius: 10,\n      show: true,\n      stroke: 'red',\n    },\n  }];\n\nconst timeData = [\n  {\n    data: [\n      { x: new Date('1-May-12'), y: 1 },\n      { x: new Date('30-Apr-15'), y: 12 },\n      { x: new Date('27-Apr-17'), y: 3 },\n      { x: new Date(), y: 4 },\n    ],\n    label: 'test data',\n    line: {\n      curveType: curveStepAfter,\n      fill: {\n        fill: 'rgba(10, 10, 10, 0.2)',\n        show: true,\n      },\n      show: true,\n      stroke: 'orange',\n      strokeDashArray: '10 5',\n      strokeDashOffset: 3,\n    },\n  },\n  {\n    data: [\n      { x: new Date('1-May-12'), y: 10 },\n      { x: new Date('30-Apr-15'), y: 12 },\n      { x: new Date('27-Apr-17'), y: 23 },\n      { x: new Date('26-Apr-19'), y: 14 },\n    ],\n    label: 'test data 2',\n  }];\n\nconst axisWithTime: IAxes = {\n  x: {\n    dateFormat: '%d-%b-%y',\n    scale: 'TIME',\n  },\n  y: {\n    numberFormat: '.2',\n    scale: 'LOG',\n  },\n};\n\ntype Actions =\n  { type: 'setData', data: IChartPoint[] }\n  | { type: 'setCurve', curve: any }\n  | { type: 'setStroke', stroke: string }\n  | { type: 'setStrokeDashArray', dash: string }\n  | { type: 'strokeDashOffset', offset: number }\n  | { type: 'pointFill', fill: string }\n  | { type: 'pointRadius', radius: number }\n  | { type: 'pointStroke', fill: string }\n  | { type: 'pointShow', show: boolean }\n  | { type: 'lineFillShow', show: boolean }\n  | { type: 'lineFillColor', fill: string }\n  ;\n\nfunction reducer(state: ILineChartDataSet, action: Actions) {\n  switch (action.type) {\n    case 'setData':\n      return {\n        ...state,\n        data: action.data,\n      };\n    case 'setCurve':\n      return merge(state, { line: { curveType: action.curve } });\n    case 'setStroke':\n      return merge(state, { line: { stroke: action.stroke } });\n    case 'setStrokeDashArray':\n      return merge(state, { line: { strokeDashArray: action.dash } });\n    case 'strokeDashOffset':\n      return merge(state, { line: { strokeDashOffset: action.offset } });\n    case 'pointFill':\n      return merge(state, { point: { fill: action.fill } });\n    case 'pointRadius':\n      return merge(state, { point: { radius: action.radius } });\n    case 'pointStroke':\n      return merge(state, { point: { stroke: action.fill } });\n    case 'pointShow':\n      return merge(state, { point: { show: action.show } });\n    case 'lineFillShow':\n      return merge(state, { line: { fill: { show: action.show } } });\n    case 'lineFillColor':\n      return merge(state, { line: { fill: { color: action.fill } } });\n    default:\n      throw new Error();\n  }\n}\nexport interface IGridElement extends ReactDataSheet.Cell<IGridElement, number> {\n  value: number | null | string;\n}\nconst LineExample: FC<{}> = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [tab, setTab] = useState(0);\n\n  const data: Cell[][] = state.data.map((point) => {\n    return [{ value: Number(point.x) }, { value: Number(point.y) }];\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"Line Chart\" description=\"\" />\n      <Typography variant=\"h2\">Line Chart</Typography>\n      <div>\n\n        <Grid container spacing={24}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <LineChart\n                  axis={axis}\n                  grid={grid}\n                  data={[state]}\n                  width=\"100%\" />\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <pre>\n                  {JSON.stringify(state)}\n                </pre>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n                  <Tab label=\"Data\" />\n                  <Tab label=\"Styling\" />\n                </Tabs>\n                {\n                  tab === 0 && <TabContainer>\n                    <ReactDataSheet data={data}\n                      valueRenderer={(cell) => cell.value}\n                      sheetRenderer={(props) => (\n                        <table className={props.className + ' my-awesome-extra-class'}>\n                          <thead>\n                            <tr>\n                              {['x', 'y'].map((col) => (<th key={col} className=\"action-cell\">{col}</th>))}\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {props.children}\n                          </tbody>\n                        </table>\n                      )}\n                      onCellsChanged={(changes) => {\n                        const newData = data.map((row) => [...row]);\n                        changes.forEach(({ cell, row, col, value }) => {\n                          newData[row][col] = { ...newData[row][col], value };\n                        });\n\n                        const pts = newData.map((row) => ({ x: Number(row[0].value), y: Number(row[1].value) }));\n                        dispatch({ type: 'setData', data: pts });\n                      }} />\n                  </TabContainer>\n                }\n                {\n                  tab === 1 && <TabContainer>\n                    <Card>\n                      <CardContent>\n                        <Typography variant=\"h6\" gutterBottom>Line</Typography>\n                        <Grid container spacing={24}>\n                          <Grid item xs={6}>\n                            <CurveSelector\n                              value={'curveCatmullRom'}\n                              onChange={(curve) => dispatch({ type: 'setCurve', curve })} />\n                          </Grid>\n                          <Grid item xs={6}>\n                            <ColorPicker\n                              value={state.line.stroke}\n                              label=\"Stroke color\"\n                              onChange={(color) => dispatch({ type: 'setStroke', stroke: color })} />\n                          </Grid>\n                          <Grid item xs={6}>\n                            <TextField\n                              id=\"strokeDashArray\"\n                              value={state.line.strokeDashArray}\n                              label=\"Stroke dash array\"\n                              onChange={(e) => dispatch({ type: 'setStrokeDashArray', dash: e.target.value })}\n                            />\n                          </Grid>\n                          <Grid item xs={6}>\n                            <TextField\n                              id=\"strokeDashOffset\"\n                              value={state.line.strokeDashOffset}\n                              label=\"Stroke dash offset\"\n                              onChange={(e) => dispatch({ type: 'strokeDashOffset', offset: Number(e.target.value) })}\n                            />\n                          </Grid>\n                        </Grid>\n                      </CardContent>\n                    </Card>\n                    <br />\n                    <Card elevation={3}>\n                      <CardContent>\n                        <Typography variant=\"h6\" gutterBottom>Point</Typography>\n                        <Grid container spacing={24}>\n                          <Grid item xs={6}>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={state.point.show}\n                                  color=\"primary\"\n                                  onChange={(_, value) => {\n                                    dispatch({ type: 'pointShow', show: value });\n                                  }}\n                                />\n                              }\n                              label=\"Show points\"\n                            />\n                          </Grid>\n                          <Grid item xs={6}>\n                            <FormGroup>\n                              <Typography>Radius <small>({state.point.radius})</small></Typography>\n                              <Slider\n                                value={state.point.radius}\n                                aria-labelledby=\"label\"\n                                step={1}\n                                onChange={(_, value) => dispatch({ type: 'pointRadius', radius: Number(value) })}\n                              />\n                            </FormGroup>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <FormGroup>\n                              <ColorPicker\n                                id=\"pointFill\"\n                                value={state.point.fill}\n                                label=\"Fill\"\n                                onChange={(color) => dispatch({ type: 'pointFill', fill: color })}\n                              />\n                            </FormGroup>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <FormGroup>\n                              <ColorPicker\n                                id=\"pointStroke\"\n                                value={state.point.stroke}\n                                label=\"Stroke color\"\n                                onChange={(color) => dispatch({ type: 'pointStroke', fill: color })}\n                              />\n                            </FormGroup>\n                          </Grid>\n                        </Grid>\n                      </CardContent>\n                    </Card>\n                    <br />\n                    <Card>\n                      <CardContent>\n\n                        <Typography variant=\"h6\" gutterBottom>Fill</Typography>\n                        <Grid container spacing={24}>\n                          <Grid item xs={6}>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={state.line.fill.show}\n                                  color=\"primary\"\n                                  onChange={(_, value) => {\n                                    dispatch({ type: 'lineFillShow', show: value });\n                                  }}\n                                />\n                              }\n                              label=\"Fill under line\"\n                            />\n                          </Grid>\n                          <Grid item xs={6}>\n                            <FormGroup>\n                              <ColorPicker\n                                id=\"lineFillColor\"\n                                value={state.line.fill.fill}\n                                label=\"Fill Color\"\n                                onChange={(color) => dispatch({ type: 'lineFillColor', fill: color })}\n                              />\n                            </FormGroup>\n                          </Grid>\n                        </Grid>\n                      </CardContent>\n                    </Card>\n                  </TabContainer>\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n      </div>\n\n    </Layout >\n  );\n};\n\nexport default LineExample;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  // @TODO make this a prop\n  const stacked = false;\n\n  const defaultProps: IHistogramProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: HTMLElement, props: Partial<IHistogramProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IHistogramProps>) {\n      this.props = merge<IHistogramProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n      if (newProps.colorScheme) {\n        this.props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height } = this.props;\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [height - (margin.top * 2) - xAxisHeight(this.props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { axis, margin, height } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(this.props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      if (stacked) {\n        innerScaleBand\n          .domain(['main'])\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      } else {\n        innerScaleBand\n          .domain(dataLabels)\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      }\n      const xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(this.props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, this.dataSets);\n\n      const yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (axis.y.scale === 'TIME' && axis.y.dateFormat) {\n        yAxis.tickFormat(timeFormat(axis.y.dateFormat));\n      }\n      this.yAxis\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(this.props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(this.props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip } = this.props;\n      const barWidth = this.barWidth();\n\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(this.props.colorScheme);\n      const gHeight = gridHeight(this.props);\n\n      const g = this.container\n        .selectAll('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append('g')\n        .merge(g)\n        .attr('transform', (d) => {\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + x(d[0].label);\n          return `translate(${xdelta}, 0)`;\n        })\n        .selectAll('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => this.props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('height', 0)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          const setIndex = bins.findIndex((b) => b === d.label);\n          const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? y(10)\n          //   : 0;\n          const offset = 0;\n          return gHeight - offset;\n        })\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d) => {\n          return innerScaleBand(d.groupLabel);\n        })\n        .attr('width', (d) => barWidth)\n        .attr('fill', (d, i) => colors(i))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          // const setIndex = bins.findIndex((b) => b === d.label);\n          // const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? 5\n          //   : 0;\n          const offset = 0;\n          return y(d.value + offset);\n        })\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem): string => {\n            const currentHeight = gHeight - (y(d.value));\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = this.xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (width / 2) + ' ,' +\n          ((height - xAxisHeight(this.props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = this.yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      const { data, visible } = this.props;\n      this.dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!this.dataSets[i]) {\n            this.dataSets[i] = [];\n          }\n          this.dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales(this.props.data);\n      drawGrid(x, y, this.gridX, this.gridY, this.props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, this.dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\n\nexport interface IChartAdaptor {\n  create: (el: Element | Text, props: { [key: string]: any }) => void;\n  update: (el: Element | Text, props: { [key: string]: any }) => void;\n  destroy: (el: Element | Text) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin?: number;\n  margin?: number;\n  width?: number;\n}\n\nexport interface IGrid {\n  x?: {\n    height?: number;\n    ticks?: number;\n    visible?: boolean;\n    style?: ISVGLineStyle;\n  };\n  y?: {\n    style?: ISVGLineStyle;\n    ticks?: number;\n    visible?: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray?: string;\n  linecap?: string;\n  width: number;\n}\n\nexport interface IAxes {\n  y?: IAxis;\n  x?: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n  grid?: IGrid;\n}\n\nexport interface IDomain {\n  max: number;\n  min: number;\n}\n\nexport interface IMargin {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n}\nexport interface IHistogramProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData;\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke'?: string;\n  'fill'?: string;\n  'opacity'?: number;\n  'stroke-width'?: number;\n  'stroke-opacity'?: number;\n  'shape-rendering'?: string;\n  'visible'?: boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\n\nexport interface IAxis {\n  dateFormat?: string;\n  numberFormat?: string;\n  ticks?: number;\n  tickValues?: number[];\n  height?: number;\n  label?: string;\n  margin?: number;\n  scale?: Scale;\n  style?: ISVGLineStyle;\n  text?: {\n    style: ISVGTextStyle;\n  };\n  width?: number;\n  tickSize?: number;\n  visible?: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IHistogramProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IHistogramProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"/histogram\">Histogram</Link></Button>\n      <Button><Link to=\"/line\">Line Chart</Link></Button>\n      <Button><Link to=\"/pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"/joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","import { scaleOrdinal } from 'd3-scale';\nimport * as React from 'react';\n\nimport colorScheme from './colors';\nimport { IHistogramDataSet } from './Histogram';\n\ninterface IProps {\n  className?: string;\n  theme?: string[];\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  onSelect: (label: string) => void;\n  visible: { [key: string]: boolean };\n}\n\nconst legendIconStyle = {\n  cursor: 'pointer',\n  display: 'inline-block',\n  height: '1rem',\n  margin: '0.25rem 0.5rem',\n  width: '1rem',\n};\n\nconst listStyle = {\n  listStyle: 'none',\n};\n\nconst Legend: React.SFC<IProps> = ({ className, theme = colorScheme, data, onSelect, visible }) => {\n  const scheme: any = scaleOrdinal(theme);\n  const labels = data.bins;\n  return (\n    <div className={className}>\n      <ul style={listStyle}>\n        {\n          labels.map((label) => {\n            const active = (visible.hasOwnProperty(label) && visible[label]) || !visible.hasOwnProperty(label);\n            return (\n              <li key={label}>\n                <div style={{\n                  ...legendIconStyle,\n                  backgroundColor: active ? scheme(label) : '#FFF',\n                  border: '2px solid ' + scheme(label),\n                }}\n                  onClick={() => onSelect(label)}>\n                </div> {label}\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Legend;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport {\n  arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\n\nexport const pieChartD3 = ((): IChartAdaptor => {\n\n  let svg;\n  let tipContainer;\n  let tipContent;\n\n  const defaultProps: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      left: 10,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const PieChartD3 = {\n\n    create(el: HTMLElement, props: Partial<IPieChartProps> = {}) {\n      this.props = merge(defaultProps, { ...props });\n      this.previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      this.containers = [];\n      this.previousData.forEach((dataSet, i) => {\n        this.drawChartBg(this.props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: HTMLElement, props: Partial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      if (props.colorScheme) {\n        this.props.colorScheme = props.colorScheme;\n      }\n      // this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = this.props;\n      this.dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      this.dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', this.props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      this.previousData = this.dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = this.props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!this.containers[i]) {\n        this.containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = this.props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => {\n          return d.count;\n        });\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(this.previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = this.containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each(function (d, j) { this._current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = this.containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      const gLabel = path2.enter().append('text')\n        .attr('class', 'label')\n        .each(function () {\n          // Store initial offset incase we change chart heights.\n          this._height = height;\n          this._width = width;\n        })\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each(function (d, j) {\n          // Store current value to work out fx transition opacities\n          this._current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d, ix, c) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.count === 0 || c[ix]._current.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(thisArc) {\n  return function (d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\n\ninterface ILabels {\n  display: boolean;\n  displayFn?: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor?: string;\n  className?: string;\n  colorScheme?: string[];\n  donutWidth?: number;\n  height: number;\n  labels?: ILabels;\n  margin?: IMargin;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends React.Component<IPieChartProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IPieChartProps> = {\n    backgroundColor: '#ddd',\n    donutWidth: 0,\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IPieChartProps) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IPieChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { axisBottom, axisLeft } from 'd3-axis';\nimport * as get from 'lodash.get';\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n    gridX.call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n      .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n      .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n    );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import React, { FC } from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nexport const TabContainer: FC<{}> = (props) => {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n};\n\n","import {\n  IAxes,\n  IHistogramData,\n} from '../../src';\nimport filterRange from '../../src/colors/filterRange';\n\nexport const grid = {\n  x: {\n    style: {\n      'stroke': '#eeAA00',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    height: 20,\n    style: {\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n  grid,\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const axis: IAxes = {\n  x: {\n    height: 20,\n    label: 'X Axis',\n    margin: 20,\n    text: {\n      style: {\n        'dy': '.35em',\n        'text-anchor': 'start',\n        'transform': 'rotate(90)',\n        'x': 0,\n        'y': 0,\n      },\n    },\n    tickSize: 0,\n  },\n  y: {\n    label: 'Y Axis!',\n    style: {\n      fill: 'none',\n      stroke: '#eeAA00',\n    },\n    text: {\n      style: {\n        fill: '#eeAA00',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    width: 50,\n  },\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const defaultProps = {\n    axis: {\n      x: {\n        height: 25,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        width: 20,\n      },\n    },\n    bar: {\n      height: 50,\n      margin: 10,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props = {}) {\n      this.props = merge(defaultProps, props);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, width - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = this.props;\n      return width - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = this.props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = this.props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = this.props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = this.props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || this.props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(i))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, colors)\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      if (stroke.dasharray !== '') {\n        barItem.attr('stroke-dasharray', stroke.dasharray);\n      }\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid(props: IHistogramProps) {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this._drawScales(this.props.data);\n      this._drawGrid(this.props);\n      this._drawBars(this.props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends React.Component<IHistogramProps, IChartState> {\n\n  private histogram: IChartAdaptor;\n  private ref;\n\n  public static defaultProps = {\n    axis: {},\n    bar: {\n      margin: 2,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.histogram.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   * @param {Object} props Props\n   */\n  public componentWillReceiveProps(props: IHistogramProps) {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","import { extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleBand, scaleLinear, ScaleLinear, scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport { IChartAdaptor, IHistogramData, IHistogramDataSet } from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  let props: IJoyPlotProps;\n  let dataSets: IGroupData[];\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const defaultProps: IJoyPlotProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, newProps: Partial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid(props);\n      this.makeScales();\n      this.containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IJoyPlotProps>) {\n      props = merge<IJoyPlotProps>(defaultProps, newProps);\n      props.data = newProps.data;\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { bar, domain, margin, width, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => d.title);\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      this.yAxis\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      const { ...xLabelStyle } = axis.x.text.style;\n      const { ...yLabelStyle } = axis.y.text.style;\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     * @return {number} bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n      const groupedMargin = this.groupedMargin();\n\n      const maxItems = groupData.reduce((prev, next) => {\n        const thisMax = next.reduce((p, n) => n.length > p ? n.length : p, 0);\n        return thisMax > prev ? thisMax : prev;\n      }, 0);\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = this.containers[i]\n          .selectAll('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + x(d[0].label);\n\n            const ydelta = yOuterScaleBand(d[0].joyLabel);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => innerScaleBand(d.groupLabel))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(ix))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(ix);\n            }\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n        );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid(props: IJoyPlotProps) {\n      const { grid } = props;\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin, bar } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        this.gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        this.gridX.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(this.gridX.selectAll('.tick line'), grid.x.style);\n        attrs(this.gridX.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        this.gridY.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n        );\n\n        attrs(this.gridY.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        this.gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(this.gridY.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, newProps: IJoyPlotProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\n\nexport interface IJoyPlotProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData[];\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IJoyPlotProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IJoyPlotProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IJoyPlotProps) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IJoyPlotProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number> | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { easeCubic } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport { buildScales } from './utils/scales';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const\n    lineProps = {\n      curveType: curveCatmullRom,\n      fill: false,\n      show: true,\n      stroke: '#005870',\n      strokeDashArray: '5 5',\n      strokeDashOffset: 0,\n    };\n\n  const pointProps: ISVGPoint = {\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const defaultProps: ILineChartProps = {\n    axis: {\n      x: {\n        height: 20,\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    className: 'line-chart-d3',\n    fx: easeCubic,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 250,\n    line: lineProps,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    point: pointProps,\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (curveType, yAxisWidth, x, y) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Node, props: Object = {}) {\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      this.makeScales();\n      [this.x, this.y] = buildScales(this.props.axis);\n      this.makeGrid();\n      this.container = svg\n        .append('g')\n        .attr('class', 'linechart-container');\n\n      this.lineContainer = this.container\n        .append('g')\n        .attr('class', 'line-container');\n      this._createLines(this.props.data);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartDataSet[]) {\n      const { axis, tip } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = this.container.selectAll('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet, i: number) => {\n        tipContent.html(() => this.props.tipContentFn([d], 0));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append('circle')\n        .attr('class', 'enter')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => this.y(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return this.x(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: Array<ILineChartDataSet<IChartPoint<number, number>>>) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = this.props;\n      const w = gridWidth(this.props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft(this.y);\n      if (axis.y.tickValues) {\n        yAxis.tickValues(axis.y.tickValues);\n      } else {\n        yAxis.ticks(axis.y.ticks);\n      }\n      if (axis.y.numberFormat) {\n        yAxis.tickFormat(format(axis.y.numberFormat));\n      }\n\n      const xAxis = axisBottom(this.x); // .ticks(axis.x.ticks);\n      if (axis.x.tickValues) {\n        xAxis.tickValues(axis.x.tickValues);\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        datum.data.forEach((d: IChartPoint<number, number>) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      this.x\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      this.y.domain(yDomain)\n        .range([height - xAxisHeight, 0]);\n\n      this.yAxis\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      this.xAxis\n        .attr('transform', `translate(${yAxisWidth},${(height - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    _createLines(data: ILineChartDataSet[]) {\n      data.forEach((d, i) => {\n        this.lineContainer.append('path')\n          .attr('class', `line-${i}`);\n      });\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.append('path')\n            .attr('class', `fill-${i}`);\n\n        });\n\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: ILineChartDataSet[]) {\n      const { axis } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // change the line\n      data.forEach((d, i) => {\n        this.lineContainer.select(`.line-${i}`)\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, this.x, this.y)(d.data as any))\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: ILineChartDataSet[]) {\n      const { axis, height } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => this.x(d.x) + yAxisWidth)\n        .y0((d) => height - xAxisHeight)\n        .y1((d: any) => this.y(d.y));\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.select(`.fill-${i}`)\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data as any))\n\n            ;\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: IHistogramDataSet[]): number {\n      return data.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, props) {\n      if (!props.data) {\n        return;\n      }\n      console.log('receive update', props);\n      this.props = merge(defaultProps, props);\n      console.log('update', this.props.point);\n      [this.x, this.y] = buildScales(this.props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data);\n      this.drawAreas(data);\n      drawGrid(this.x, this.y, this.gridX, this.gridY, this.props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IGrid,\n  IHistogramData,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineChartDataSet<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  label: string;\n  point?: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line?: {\n    show: boolean;\n    fill?: {\n      show: boolean;\n      fill: string;\n    };\n    curveType?: any;\n    stroke?: string;\n    strokeDashOffset?: number;\n    strokeDashArray?: string;\n  };\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps {\n  axis?: IAxes;\n  className?: string;\n  data?: ILineChartDataSet[];\n  fx?: (n: number) => number;\n  grid?: IGrid;\n  height?: number | string;\n  line?: any;\n  margin?: IMargin;\n  point?: ISVGPoint;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<{ x: string | number, y: string | number }>;\n  width?: number | string;\n}\n\nclass LineChart extends React.Component<ILineChartProps, IState> {\n\n  private chart;\n  private ref;\n\n  constructor(props: ILineChartProps) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): ILineChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  public getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import {\n  geoMercator,\n  geoPath,\n} from 'd3-geo';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport { FeatureCollection } from 'geojson';\n\nimport { IChartAdaptor } from './Histogram';\nimport { IMapProps } from './Map';\n\nexport const mapD3 = ((): IChartAdaptor => {\n  let svg;\n\n  const defaultProps: IMapProps = {\n    className: 'map-d3',\n    data: [],\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: 200,\n  };\n\n  const MapD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props: Partial<IMapProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IMapProps>) {\n      this.props = merge<IMapProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g');\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      data: any,\n      geojson: FeatureCollection<any, any>,\n    ) {\n\n      const { width, height } = this.props;\n      const zoom = 3;\n      const projection = geoMercator()\n        .scale((width / 2 / Math.PI) * zoom)\n        .translate([(width / 2), (height / 2)]);\n\n      const geoGenerator = geoPath()\n        .projection(projection);\n\n      // const g = this.container\n      // .selectAll('g')\n      // .data(groupData);\n\n      // Join the FeatureCollection's features array to path elements\n      const u = this.container\n        .selectAll('path')\n        .data(geojson.features);\n\n      // Create path elements and update the d attribute using the geo generator\n      u.enter()\n        .append('path')\n        .attr('d', geoGenerator);\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IMapProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      const { data, geojson } = this.props;\n      this.updateChart(data, geojson);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return MapD3;\n});\n","import { FeatureCollection } from 'geojson';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { mapD3 } from './MapD3';\n\nexport interface IMapProps {\n  className?: string;\n  data: any;\n  geojson: FeatureCollection<any, any>;\n  height: number;\n  width: number | string;\n}\n\n/**\n * Map component\n */\nclass Map extends React.Component<IMapProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IMapProps> = {\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IMapProps) {\n    super(props);\n    this.chart = mapD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IMapProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"map-chart-container\"></div>);\n  }\n}\n\nexport default Map;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport { IChartPoint } from './LineChart';\nimport {\n  IScatterPlotProps,\n  ScatterPlotData,\n} from './ScatterPlot';\n\nexport const scatterPlotD3 = (() => {\n  let svg;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const defaultProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     * @param {Element} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: Element, props: IScatterPlotProps = defaultProps) {\n      this.props = merge(defaultProps, props);\n      this.update(el, props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Element} el Dom container node\n     * @param {Array} data Chart data\n     */\n    _makeSvg(el: Element, data: ScatterPlotData) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height,\n        legendWidth, padding } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(this.props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data) {\n      const { height, padding, width } = this.props;\n      const xSize = width / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (d) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = this.props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (width + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     * @param {Object} traits Chart data\n     * @param {Number} size Chart size\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = this.props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       * @param {Object} p Point\n       */\n      function plot(p: IChartPoint) {\n        const plotCell = select(this);\n        let circle;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       * @param {Object} a point\n       * @param {Object} b point\n       * @return {Array} data\n       */\n      function cross(a, b) {\n        const c = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {Node} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: Element, props: IScatterPlotProps) {\n      this.props = { ...this.props, ...props };\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = this.props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = width / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import * as React from 'react';\nimport { Component } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { scatterPlotD3 } from './ScatterPlotD3';\n\ninterface IChartState {\n  choices: string[];\n  data: any[];\n  height: number;\n  distModels: string[];\n  split: string;\n  parentWidth: number;\n  width: number | string;\n}\n\nexport type ScatterPlotData = any[];\n\nexport interface IScatterPlotProps {\n  choices?: any[];\n  className?: string;\n  chartSize?: number;\n  data: ScatterPlotData;\n  delay?: number;\n  distModels?: string[];\n  duration?: number;\n  height: number;\n  legendWidth?: number;\n  colorScheme?: string[];\n  padding?: number;\n  radius?: number;\n  split?: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<IScatterPlotProps, IChartState> {\n\n  private chart;\n  private ref;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      choices: [],\n      data: [],\n      distModels: [],\n      height: this.props.height,\n      parentWidth: 400,\n      split: '',\n      width: this.props.width,\n    };\n  }\n\n  private handleResize() {\n    const { legendWidth, padding } = this.props;\n    const chartWidth = Math.max(200, this.ref.offsetWidth - padding - legendWidth);\n    const chartHeight = Math.max(200, window.innerHeight - padding -\n      this.ref.getBoundingClientRect().top);\n    const width = Math.min(chartHeight, chartWidth);\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  private getChartState(): IChartState {\n    let { width } = this.props;\n    const { data, choices, split, distModels, height } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      choices,\n      data,\n      distModels,\n      height,\n      parentWidth: this.state.parentWidth,\n      split,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: IScatterPlotProps) {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import filterRange from './colors/filterRange';\nimport Histogram, {\n  IAxes, IHistogramBar, IHistogramData, IHistogramDataSet,\n  IHistogramProps, IStroke,\n} from './Histogram';\n\nimport HorizontalHistogram from './HorizontalHistogram';\nimport JoyPlot from './JoyPlot';\nimport Legend from './Legend';\nimport LineChart, { IChartPoint, ILineChartDataSet, ILineChartProps } from './LineChart';\nimport Map from './Map';\nimport PieChart from './PieChart';\nimport ScatterPlot from './ScatterPlot';\n\nexport {\n  filterRange,\n  JoyPlot,\n  Histogram,\n  HorizontalHistogram,\n  Legend,\n  LineChart,\n  Map,\n  PieChart,\n  ScatterPlot,\n  ILineChartDataSet,\n  IChartPoint,\n  ILineChartProps,\n  IAxes,\n  IHistogramBar,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n  IStroke,\n};\n"],"sourceRoot":""}