{"version":3,"sources":["webpack:///./src/pages/histogram.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","HistogramExample","a","createElement","title","description","variant","d","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","data","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","SEO","_ref","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","name","property","author","concat","length","join","defaultProps","arrayOf","array","Header","siteTitle","react_default","index_es","position","color","gatsby_browser_entry","to","Layout","Fragment","header","style","flexGrow","margin","padding","paddingTop","width","Date","getFullYear","href","_755544856","node","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape"],"mappings":"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","file":"component---src-pages-histogram-tsx-ab0b22397d79fb9c2acf.js","sourcesContent":["import React, { FC } from 'react';\n\n// import React, {\n//   useReducer,\n//   useState,\n// } from 'react';\n// import ReactDataSheet from 'react-datasheet';\n// import ReactJson from 'react-json-view';\nimport {\n  Card,\n  CardContent,\n  Grid,\n  MenuItem,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\n// import { HorizontalHistogram } from '../../../src';\n// import Histogram, { IHistogramData } from '../../../src/Histogram';\n// import Legend from '../../../src/Legend';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\n// import { TabContainer } from '../components/TabContainer';\n// import {\n//   axis,\n//   data,\n//   grid,\n//   theme,\n// } from '../data';\n\n// const tipContentFns = [\n//   (bins, i, d) =>\n//     bins[i] + '<br />HI THere ' + d.toFixed(2),\n//   (bins, i, d) =>\n//     bins[i] + '<br />Bookay ' + d.toFixed(2),\n// ];\n\n// const dataLegendData = {\n//   bins: data.counts.map((c) => c.label),\n//   counts: [{\n//     data: data.counts.map((c) => c.data.reduce((p, n) => p + n, 0)),\n//     label: '',\n//   }],\n// };\n\n// interface IInitialState {\n//   chartType: 'HorizontalHistogram' | 'Histogram';\n//   data: IHistogramData;\n// }\n// const initialSate: IInitialState = {\n//   chartType: 'Histogram',\n//   data,\n// };\n\n// type Actions = { type: 'setChartType'; chartType: string }\n//   | { type: 'setData', data: IHistogramData };\n\n// function reducer(state: IInitialState, action: Actions) {\n//   switch (action.type) {\n//     case 'setChartType':\n//       return { ...state, chartType: action.chartType };\n//     case 'setData':\n//       return { ...state, data: action.data };\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// export const dataToSpreadSheet = (datum: IHistogramData): any => {\n//   const speadSheetData: any = [];\n\n//   datum.bins.forEach((b, i) => {\n//     if (!speadSheetData[i]) {\n//       speadSheetData[i] = [];\n//     }\n//     speadSheetData[i][0] = { value: b };\n//   });\n//   datum.counts.forEach((c, i) => {\n//     c.data.forEach((d, x) => {\n//       if (!speadSheetData[x]) {\n//         speadSheetData[x] = [];\n//       }\n//       speadSheetData[x][i + 1] = { value: d };\n//     });\n//   });\n//   return speadSheetData;\n// };\n\nconst HistogramExample = () => {\n  // const [tab, setTab] = useState(0);\n  // const [state, dispatch] = useReducer(reducer, initialSate);\n  // const [visible, setVisible] = useState({});\n\n  // const speadSheetData = dataToSpreadSheet(state.data);\n\n  // const Chart = state.chartType === 'Histogram' ? Histogram : HorizontalHistogram;\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <Typography variant=\"h2\">Histogram</Typography>\n      {/* <div>\n        <Grid container spacing={24}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Chart data={state.data}\n                  axis={axis}\n                  grid={grid}\n                  width={'100%'}\n                  height={300}\n                  visible={visible}\n                  colorScheme={theme}\n                  tipContentFn={tipContentFns[0]} />\n                <Legend\n                  theme={theme}\n                  data={dataLegendData}\n                  onSelect={(key) => {\n                    setVisible({ ...visible, [key]: visible.hasOwnProperty(key) ? !visible[key] : false });\n                  }}\n                  visible={visible}\n                />\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <ReactJson src={state} />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n                  <Tab label=\"Data\" />\n                  <Tab label=\"Styling\" />\n                </Tabs>\n                {\n                  tab === 0 && <TabContainer>\n                    <ReactDataSheet<any, any> data={speadSheetData}\n                      valueRenderer={(cell) => cell.value}\n                      sheetRenderer={(props) => (\n                        <table className={props.className + ' my-awesome-extra-class'}>\n                          <thead>\n                            <tr>\n                              <th className=\"action-cell\">Bin</th>\n                              {\n                                state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n                                  {count.label}\n                                </th>))\n                              }\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {props.children}\n                          </tbody>\n                        </table>\n                      )}\n                      onCellsChanged={(changes) => {\n                        changes.forEach(({ cell, row, col, value }) => {\n                          if (col === 0) {\n                            state.data.bins[row] = value;\n                          } else {\n                            state.data.counts[col - 1].data[row] = Number(value);\n                          }\n                        });\n                        dispatch({ type: 'setData', data: state.data });\n                      }} />\n                  </TabContainer>\n                }\n                {\n                  tab === 1 && <TabContainer>\n                    <Grid container spacing={24}>\n                      <Grid item xs={6}>\n                        <TextField\n                          select\n                          label=\"Chart direction\"\n                          value={state.chartType}\n                          onChange={(e) => {\n                            dispatch({ type: 'setChartType', chartType: e.target.value });\n                          }}\n                        >\n                          <MenuItem value=\"Histogram\">\n                            Histogram\n                            </MenuItem>\n                          <MenuItem value=\"HorizontalHistogram\">\n                            HorizontalHistogram\n                            </MenuItem>\n\n                        </TextField>\n                      </Grid>\n                    </Grid>\n                  </TabContainer>\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div> */}\n    </Layout>\n  );\n};\n\n// const HistogramExample: FC<{}> = () => {\n//   return <div>test</div>;\n// };\n\nexport default HistogramExample;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"/histogram\">Histogram</Link></Button>\n      <Button><Link to=\"/line\">Line Chart</Link></Button>\n      <Button><Link to=\"/pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"/joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}