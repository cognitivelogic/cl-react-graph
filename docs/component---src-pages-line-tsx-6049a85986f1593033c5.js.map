{"version":3,"sources":["webpack:///./src/pages/line.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","a","createElement"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GA2YeD,EAAA,0BAAME,EAAAE,EAAAC,cAAA","file":"component---src-pages-line-tsx-6049a85986f1593033c5.js","sourcesContent":["// // Be sure to include styles at some point, probably during your bootstrapping\n// import 'react-datasheet/lib/react-datasheet.css';\n// import {\n//   curveCatmullRom,\n//   curveStepAfter,\n// } from 'd3-shape';\n// import merge from 'deepmerge';\n// import ColorPicker from 'material-ui-color-picker';\nimport React, {\n  FC,\n  useReducer,\n  useState,\n} from 'react';\n\n// import ReactDataSheet, { Cell } from 'react-datasheet';\n// import ReactJson from 'react-json-view';\n\n// import {\n//   Card,\n//   CardContent,\n//   FormControlLabel,\n//   FormGroup,\n//   Grid,\n//   Switch,\n//   Tab,\n//   Tabs,\n//   Typography,\n// } from '@material-ui/core';\n// import TextField from '@material-ui/core/TextField';\n// import Slider from '@material-ui/lab/Slider';\n\n// import {\n//   IAxes,\n//   IChartPoint,\n//   ILineChartDataSet,\n//   LineChart,\n// } from '../../../src';\n// import { CurveSelector } from '../components/CurveSelector';\n// import Layout from '../components/layout';\n// import SEO from '../components/seo';\n// import { TabContainer } from '../components/TabContainer';\n// import {\n//   axis,\n//   grid,\n// } from '../data';\n\n// const initialState: ILineChartDataSet = {\n//   data: [\n//     { x: 1, y: 1 },\n//     { x: 2, y: 12 },\n//     { x: 3, y: 3 },\n//     { x: 4, y: 4 },\n//   ],\n//   label: 'test data',\n//   line: {\n//     curveType: curveCatmullRom,\n//     fill: {\n//       fill: 'rgba(10, 10, 10, 0.2)',\n//       show: true,\n//     },\n//     show: true,\n//     stroke: '#00a97b',\n//     strokeDashArray: '10 5',\n//     strokeDashOffset: 3,\n//   },\n//   point: {\n//     fill: 'black',\n//     radius: 10,\n//     show: true,\n//     stroke: 'red',\n//   },\n// };\n\n// const points2: ILineChartDataSet[] = [\n//   {\n//     data: [\n//       { x: 1, y: 10 },\n//       { x: 2, y: 15 },\n//       { x: 3, y: 4 },\n//       { x: 4, y: 7 },\n//     ],\n//     label: 'test data',\n//     line: {\n//       curveType: curveCatmullRom,\n//       fill: {\n//         fill: 'rgba(10, 10, 10, 0.2)',\n//         show: true,\n//       },\n//       show: true,\n//       stroke: 'orange',\n//       strokeDashArray: '10 5',\n//       strokeDashOffset: 3,\n//     },\n//     point: {\n//       fill: 'black',\n//       radius: 10,\n//       show: true,\n//       stroke: 'red',\n//     },\n//   }];\n\n// const timeData = [\n//   {\n//     data: [\n//       { x: new Date('1-May-12'), y: 1 },\n//       { x: new Date('30-Apr-15'), y: 12 },\n//       { x: new Date('27-Apr-17'), y: 3 },\n//       { x: new Date(), y: 4 },\n//     ],\n//     label: 'test data',\n//     line: {\n//       curveType: curveStepAfter,\n//       fill: {\n//         fill: 'rgba(10, 10, 10, 0.2)',\n//         show: true,\n//       },\n//       show: true,\n//       stroke: 'orange',\n//       strokeDashArray: '10 5',\n//       strokeDashOffset: 3,\n//     },\n//   },\n//   {\n//     data: [\n//       { x: new Date('1-May-12'), y: 10 },\n//       { x: new Date('30-Apr-15'), y: 12 },\n//       { x: new Date('27-Apr-17'), y: 23 },\n//       { x: new Date('26-Apr-19'), y: 14 },\n//     ],\n//     label: 'test data 2',\n//   }];\n\n// const axisWithTime: IAxes = {\n//   x: {\n//     dateFormat: '%d-%b-%y',\n//     scale: 'TIME',\n//   },\n//   y: {\n//     numberFormat: '.2',\n//     scale: 'LOG',\n//   },\n// };\n\n// type Actions =\n//   { type: 'setData', data: IChartPoint[] }\n//   | { type: 'setCurve', curve: any }\n//   | { type: 'setStroke', stroke: string }\n//   | { type: 'setStrokeDashArray', dash: string }\n//   | { type: 'strokeDashOffset', offset: number }\n//   | { type: 'pointFill', fill: string }\n//   | { type: 'pointRadius', radius: number }\n//   | { type: 'pointStroke', fill: string }\n//   | { type: 'pointShow', show: boolean }\n//   | { type: 'lineFillShow', show: boolean }\n//   | { type: 'lineFillColor', fill: string }\n//   ;\n\n// function reducer(state: ILineChartDataSet, action: Actions) {\n//   switch (action.type) {\n//     case 'setData':\n//       return {\n//         ...state,\n//         data: action.data,\n//       };\n//     case 'setCurve':\n//       return merge(state, { line: { curveType: action.curve } });\n//     case 'setStroke':\n//       return merge(state, { line: { stroke: action.stroke } });\n//     case 'setStrokeDashArray':\n//       return merge(state, { line: { strokeDashArray: action.dash } });\n//     case 'strokeDashOffset':\n//       return merge(state, { line: { strokeDashOffset: action.offset } });\n//     case 'pointFill':\n//       return merge(state, { point: { fill: action.fill } });\n//     case 'pointRadius':\n//       return merge(state, { point: { radius: action.radius } });\n//     case 'pointStroke':\n//       return merge(state, { point: { stroke: action.fill } });\n//     case 'pointShow':\n//       return merge(state, { point: { show: action.show } });\n//     case 'lineFillShow':\n//       return merge(state, { line: { fill: { show: action.show } } });\n//     case 'lineFillColor':\n//       return merge(state, { line: { fill: { color: action.fill } } });\n//     default:\n//       throw new Error();\n//   }\n// }\n// export interface IGridElement extends ReactDataSheet.Cell<IGridElement, number> {\n//   value: number | null | string;\n// }\n// const LineExample: FC<{}> = () => {\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   const [tab, setTab] = useState(0);\n\n//   const data: Cell[][] = state.data.map((point) => {\n//     return [{ value: Number(point.x) }, { value: Number(point.y) }];\n//   });\n\n//   return (\n//     <Layout>\n//       <SEO title=\"Line Chart\" description=\"\" />\n//       <Typography variant=\"h2\">Line Chart</Typography>\n//       <div>\n\n//         <Grid container spacing={24}>\n//           <Grid item xs={6}>\n//             <Card>\n//               <CardContent>\n//                 <LineChart\n//                   axis={axis}\n//                   grid={grid}\n//                   data={[state]}\n//                   width=\"100%\" />\n//               </CardContent>\n//             </Card>\n//             <br />\n//             <Card>\n//               <CardContent>\n//                 <ReactJson src={state} />\n//               </CardContent>\n//             </Card>\n//           </Grid>\n\n//           <Grid item xs={6}>\n//             <Card>\n//               <CardContent>\n//                 <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n//                   <Tab label=\"Data\" />\n//                   <Tab label=\"Styling\" />\n//                 </Tabs>\n//                 {\n//                   tab === 0 && <TabContainer>\n//                     <ReactDataSheet data={data}\n//                       valueRenderer={(cell) => cell.value}\n//                       sheetRenderer={(props) => (\n//                         <table className={props.className + ' my-awesome-extra-class'}>\n//                           <thead>\n//                             <tr>\n//                               {['x', 'y'].map((col) => (<th key={col} className=\"action-cell\">{col}</th>))}\n//                             </tr>\n//                           </thead>\n//                           <tbody>\n//                             {props.children}\n//                           </tbody>\n//                         </table>\n//                       )}\n//                       onCellsChanged={(changes) => {\n//                         const newData = data.map((row) => [...row]);\n//                         changes.forEach(({ cell, row, col, value }) => {\n//                           newData[row][col] = { ...newData[row][col], value };\n//                         });\n\n//                         const pts = newData.map((row) => ({ x: Number(row[0].value), y: Number(row[1].value) }));\n//                         dispatch({ type: 'setData', data: pts });\n//                       }} />\n//                   </TabContainer>\n//                 }\n//                 {\n//                   tab === 1 && <TabContainer>\n//                     <Card>\n//                       <CardContent>\n//                         <Typography variant=\"h6\" gutterBottom>Line</Typography>\n//                         <Grid container spacing={24}>\n//                           <Grid item xs={6}>\n//                             <CurveSelector\n//                               value={'curveCatmullRom'}\n//                               onChange={(curve) => dispatch({ type: 'setCurve', curve })} />\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <ColorPicker\n//                               value={state.line.stroke}\n//                               label=\"Stroke color\"\n//                               onChange={(color) => dispatch({ type: 'setStroke', stroke: color })} />\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <TextField\n//                               id=\"strokeDashArray\"\n//                               value={state.line.strokeDashArray}\n//                               label=\"Stroke dash array\"\n//                               onChange={(e) => dispatch({ type: 'setStrokeDashArray', dash: e.target.value })}\n//                             />\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <TextField\n//                               id=\"strokeDashOffset\"\n//                               value={state.line.strokeDashOffset}\n//                               label=\"Stroke dash offset\"\n//                               onChange={(e) => dispatch({ type: 'strokeDashOffset', offset: Number(e.target.value) })}\n//                             />\n//                           </Grid>\n//                         </Grid>\n//                       </CardContent>\n//                     </Card>\n//                     <br />\n//                     <Card elevation={3}>\n//                       <CardContent>\n//                         <Typography variant=\"h6\" gutterBottom>Point</Typography>\n//                         <Grid container spacing={24}>\n//                           <Grid item xs={6}>\n//                             <FormControlLabel\n//                               control={\n//                                 <Switch\n//                                   checked={state.point.show}\n//                                   color=\"primary\"\n//                                   onChange={(_, value) => {\n//                                     dispatch({ type: 'pointShow', show: value });\n//                                   }}\n//                                 />\n//                               }\n//                               label=\"Show points\"\n//                             />\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <FormGroup>\n//                               <Typography>Radius <small>({state.point.radius})</small></Typography>\n//                               <Slider\n//                                 value={state.point.radius}\n//                                 aria-labelledby=\"label\"\n//                                 step={1}\n//                                 onChange={(_, value) => dispatch({ type: 'pointRadius', radius: Number(value) })}\n//                               />\n//                             </FormGroup>\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <FormGroup>\n//                               <ColorPicker\n//                                 id=\"pointFill\"\n//                                 value={state.point.fill}\n//                                 label=\"Fill\"\n//                                 onChange={(color) => dispatch({ type: 'pointFill', fill: color })}\n//                               />\n//                             </FormGroup>\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <FormGroup>\n//                               <ColorPicker\n//                                 id=\"pointStroke\"\n//                                 value={state.point.stroke}\n//                                 label=\"Stroke color\"\n//                                 onChange={(color) => dispatch({ type: 'pointStroke', fill: color })}\n//                               />\n//                             </FormGroup>\n//                           </Grid>\n//                         </Grid>\n//                       </CardContent>\n//                     </Card>\n//                     <br />\n//                     <Card>\n//                       <CardContent>\n\n//                         <Typography variant=\"h6\" gutterBottom>Fill</Typography>\n//                         <Grid container spacing={24}>\n//                           <Grid item xs={6}>\n//                             <FormControlLabel\n//                               control={\n//                                 <Switch\n//                                   checked={state.line.fill.show}\n//                                   color=\"primary\"\n//                                   onChange={(_, value) => {\n//                                     dispatch({ type: 'lineFillShow', show: value });\n//                                   }}\n//                                 />\n//                               }\n//                               label=\"Fill under line\"\n//                             />\n//                           </Grid>\n//                           <Grid item xs={6}>\n//                             <FormGroup>\n//                               <ColorPicker\n//                                 id=\"lineFillColor\"\n//                                 value={state.line.fill.fill}\n//                                 label=\"Fill Color\"\n//                                 onChange={(color) => dispatch({ type: 'lineFillColor', fill: color })}\n//                               />\n//                             </FormGroup>\n//                           </Grid>\n//                         </Grid>\n//                       </CardContent>\n//                     </Card>\n//                   </TabContainer>\n//                 }\n//               </CardContent>\n//             </Card>\n//           </Grid>\n//         </Grid>\n\n//       </div>\n\n//     </Layout >\n//   );\n// };\n\n// export default LineExample;\n\nexport default () => <div>test</div>;\n"],"sourceRoot":""}