{"version":3,"sources":["webpack:///../src/TornadoD3.ts","webpack:///../src/Tornado.tsx","webpack:///./src/pages/tornado.tsx"],"names":["tornadoD3","svg","tipContainer","tipContent","container","dataSets","yAxisContainer","xAxisContainer","xAxisContainer2","yAxisLabel","domain","x","scaleLinear","y","scaleBand","innerScaleBand","props","axis","defaultAxis","bar","groupMargin","margin","overlayMargin","className","colorScheme","center","data","bins","counts","delay","max","min","duration","grid","defaultGrid","groupLayout","EGroupedBarLayout","GROUPED","height","bottom","left","right","top","splitBins","stroke","color","dasharray","linecap","width","tip","tips","tipContentFn","i","d","visible","create","el","newProps","merge","makeSvg","sizeSVG","r","makeTip","makeGrid","makeScales","append","attr","this","update","drawAxes","valuesCount","reduce","a","b","length","h","gridWidth","gridHeight","dataLabels","map","c","label","rangeRound","paddingInner","groupedMargin","groupedBarsUseSameXAxisValue","bandwidth","barMargin","xAxis","axisBottom","tickFormat","v","toString","replace","yAxis","axisLeft","calculateDomain","x2","scalePoint","xGroupAxis","tickPadding","tickSize","range","Number","ticks","axisLength","axisConfig","limitByValues","yAxisWidth","call","nice","xAxisY","xAxisHeight","attrs","selectAll","style","text","leftValues","prev","next","concat","rightValues","Math","updateChart","groupData","stackedOffset","stackIndex","oSet","find","gData","undefined","dx","filter","_","value","w","isStacked","side","colors","scaleOrdinal","gWidth","g","bars","enter","yd","on","onClick","onMouseOver","hover","fx","move","onMouseOut","OVERLAID","floor","String","groupLabel","getBarWidth","transition","currentHeight","barWidth","abs","exit","remove","yText","xText","forEach","count","genderIndex","aValue","rowIndex","push","colorRef","destroy","Tornado","ref","chart","state","parentWidth","handleResize","getDOMNode","offsetWidth","setState","getChartState","componentDidMount","window","addEventListener","e","componentDidUpdate","rest","children","componentWillUnmount","removeEventListener","node","ReactDOM","findDOMNode","HTMLElement","render","Component","initialState","lighten","reducer","action","useReducer","title","description","Typography","variant","Grid","spacing","item","xs","Card","CardContent","JSXToString","component"],"mappings":"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","file":"component---src-pages-tornado-tsx-e681c6990b3fe8b34e39.js","sourcesContent":["import {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n  scalePoint,\n} from 'd3-scale';\nimport { Selection } from 'd3-selection';\nimport merge from 'lodash/merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawHorizontalGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  EGroupedBarLayout,\n  IChartAdaptor,\n} from './Histogram';\nimport {\n  IGroupData,\n  IGroupDataItem,\n} from './HistogramD3';\nimport tips, { makeTip } from './tip';\nimport {\n  ITornadoDataSet,\n  ITornadoProps,\n} from './Tornado';\nimport {\n  barMargin,\n  getBarWidth,\n  groupedBarsUseSameXAxisValue,\n  groupedMargin,\n} from './utils/bars';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n} from './utils/defaults';\nimport {\n  appendDomainRange,\n  isStacked,\n  ticks,\n} from './utils/domain';\nimport {\n  onClick,\n  onMouseOut,\n  onMouseOver,\n} from './utils/mouseOver';\nimport {\n  makeGrid,\n  makeScales,\n  makeSvg,\n  sizeSVG,\n  TSelection,\n} from './utils/svg';\nimport { DeepPartial } from './utils/types';\n\nexport const maxValueCount = (counts: ITornadoDataSet[]): number => {\n  return counts.reduce((a: number, b: ITornadoDataSet): number => {\n    return b.data.length > a ? b.data.length : a;\n  }, 0);\n};\n\nexport const tornadoD3 = ((): IChartAdaptor<ITornadoProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n  const innerScaleBand = scaleBand();\n  let container: Selection<SVGElement, any, any, any>;\n  let dataSets: IGroupData;\n  let gridX: TSelection;\n  let gridY: TSelection;\n  let yAxisContainer: TSelection;\n  let xAxisContainer: TSelection;\n  let xAxisContainer2: TSelection;\n  let yAxisLabel: TSelection;\n  let xAxisLabel: TSelection;\n  let domain: [number, number];\n\n  const props: ITornadoProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0.1,\n      margin: 10,\n      overlayMargin: 5,\n    },\n    className: 'torando-d3',\n    colorScheme,\n    center: true,\n    data: {\n      bins: [],\n      colorScheme: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: defaultGrid,\n    groupLayout: EGroupedBarLayout.GROUPED,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    splitBins: ['Left', 'Right'],\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const TornadoD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<ITornadoProps> = {}) {\n      merge(props, newProps);\n      svg = makeSvg(el, svg);\n      const { margin, width, height, className } = props;\n      sizeSVG(svg, { margin, width, height, className });\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n      [gridX, gridY] = makeGrid(svg);\n      [xAxisContainer, yAxisContainer, xAxisLabel, yAxisLabel] = makeScales(svg);\n\n      // Used to display the 2 split bin labels\n      xAxisContainer2 = svg.append('g').attr('class', 'xAxisContainer2');\n      container = svg\n        .append<SVGElement>('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, newProps);\n    },\n\n    /**\n    * Draw Axes\n    */\n    drawAxes() {\n      const { bar, data, groupLayout, margin, width, height, axis } = props;\n      const SPLIT_AXIS_HEIGHT = 20;\n      const valuesCount = maxValueCount(data.counts);\n      const w = gridWidth(props);\n      const h = gridHeight(props) - SPLIT_AXIS_HEIGHT;\n      const dataLabels = data.counts.map((c) => c.label);\n\n      y.domain(data.bins)\n        .rangeRound([h, 0])\n        .paddingInner(groupedMargin(bar));\n\n      innerScaleBand\n        .domain(groupedBarsUseSameXAxisValue({ groupLayout }) ? ['main'] : dataLabels)\n        .rangeRound([0, y.bandwidth()])\n        .paddingInner(barMargin(props.bar));\n\n      const xAxis = axisBottom<number>(x)\n        .tickFormat((v) => v.toString().replace('-', ''));\n      const yAxis = axisLeft<string>(y);\n      this.calculateDomain();\n\n      const x2 = scalePoint<any>();\n\n      const xGroupAxis = axisBottom(x2).tickPadding(SPLIT_AXIS_HEIGHT)\n        .tickSize(0)\n\n      x2.range([Number(width) / 4, Number(width) * (3 / 4) - (margin.top * 2) - axis.y.width])\n        .domain(props.splitBins);\n\n      /** Y-Axis (label axis) set up */\n\n      ticks({\n        axis: yAxis,\n        valuesCount,\n        axisLength: h,\n        axisConfig: axis.y,\n        scaleBand: y,\n        limitByValues: true,\n      });\n\n      yAxisContainer\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', ' + margin.top + ' )')\n        .call(yAxis);\n\n      // @TODO - Stacked? (was using appendDomainRange())\n      x.range([0, Number(width) - (margin.top * 2) - axis.y.width])\n        .domain(domain)\n        .nice();\n\n      const xAxisY = height - xAxisHeight(props.axis) - margin.top - SPLIT_AXIS_HEIGHT;\n      xAxisContainer\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ',' +\n          xAxisY + ')')\n        .call(xAxis);\n\n      xAxisContainer2\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ',' +\n          (xAxisY) + ')')\n        .call(xGroupAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    calculateDomain() {\n      const { data, center } = props;\n      const leftValues = data.counts.reduce((prev, next) => prev.concat(next.data[0]), [] as number[]);\n      const rightValues = data.counts.reduce((prev, next) => prev.concat(next.data[1]), [] as number[]);\n      domain = [-Math.max(...leftValues), Math.max(...rightValues)];\n      // Center the 0 axis value in the middle of the chart\n      if (center) {\n        const max = Math.max(Math.max(...leftValues), domain[1]);\n        domain = [-max, max];\n      }\n      return domain;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, margin, delay, duration, tip, groupLayout } = props;\n\n      const stackedOffset = (d: IGroupDataItem, stackIndex: number) => {\n        const thisGroupData = groupData.find((gData) => {\n          return gData.find((dx) => dx.label === d.label) !== undefined;\n        });\n        const oSet = (thisGroupData || [])\n          .filter((_, i) => i < stackIndex)\n          .reduce((prev, next) => prev + next.value, 0);\n        const isItStacked = isStacked({ groupLayout });\n        const offset = isItStacked && stackIndex > 0\n          ? oSet\n          : 0;\n        // @TODO  reapply offset\n        const w = d.side === 'left' ? -d.value : d.value;\n        return x(Math.min(0, w));\n        // return isItStacked ? x(offset) : x(0);\n      }\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const gWidth = gridWidth(props);\n\n      const g = container\n        .selectAll<SVGElement, {}>('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append<SVGElement>('g')\n        .merge(g)\n        .attr('transform', (d: any[]) => {\n          let yd = y(d[0].label);\n          if (yd === undefined) {\n            yd = 0;\n          }\n          const x = yAxisWidth(axis) + axis.x.style['stroke-width'];\n          return `translate(${x}, ${margin.top + yd})`;\n        })\n\n        .selectAll<SVGElement, {}>('rect')\n        .data((d) => d);\n\n      bars\n        .enter()\n        .append<SVGElement>('rect')\n        .attr('width', 0)\n        .attr('x', stackedOffset)\n        .attr('class', (d) => `bar ${d.side}`)\n        .on('click', onClick(props.onClick))\n        .on('mouseover', onMouseOver({ bins, hover: props.bar.hover, colors, tipContentFn: props.tipContentFn, tipContent, tip, tipContainer }))\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', onMouseOut({ tip, tipContainer, colors }))\n        .merge(bars)\n        .attr('y', (d: IGroupDataItem, i: number) => {\n          const overlay = (props.groupLayout === EGroupedBarLayout.OVERLAID)\n            ? Math.floor(i / 2) * props.bar.overlayMargin\n            : Number(innerScaleBand(String(d.groupLabel)));\n          return overlay;\n        })\n        .attr('height', (d, i) => getBarWidth(Math.floor(i / 2), props.groupLayout, props.bar, innerScaleBand))\n        .attr('fill', (d, i) => colors(String(d.groupLabel)))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('x', stackedOffset)\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem, i): string => {\n            const currentHeight = gWidth - (x(d.value));\n            const barWidth = getBarWidth(i, props.groupLayout, props.bar, innerScaleBand);\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('width', (d: IGroupDataItem): number => {\n          const w = d.side === 'left' ? -d.value : d.value;\n          return Math.abs(x(w) - x(0))\n        });\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const yText = yAxisLabel\n        .selectAll<any, any>('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform',\n          'translate(' + (Number(height) / 2) + ' ,' +\n          ((height - yAxisWidth(props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const xText = yAxisLabel\n        .selectAll<any, any>('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gWidth / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<ITornadoProps>) {\n      if (!props.data) {\n        return;\n      }\n      merge(props, newProps);\n      if (!props.data.bins) {\n        return;\n      }\n      const { margin, width, height, className, data, visible } = props;\n      sizeSVG(svg, { margin, width, height, className });\n      dataSets = [];\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, genderIndex) => {\n          value.forEach((aValue, rowIndex) => {\n            if (!dataSets[rowIndex]) {\n              dataSets[rowIndex] = [];\n            }\n            dataSets[rowIndex].push({\n              side: genderIndex === 0 ? 'left' : 'right',\n              groupLabel: count.label,\n              colorRef: count.label,\n              label: data.bins[rowIndex],\n              value: visible[data.bins[rowIndex]] !== false && visible[count.label] !== false ? aValue : 0,\n            });\n          })\n\n        });\n      });\n      this.drawAxes();\n      // @TODO add back in,\n      // drawHorizontalGrid<any>({ x, y, gridX, gridY, props, ticks: maxValueCount(data.counts) });\n      this.updateChart(data.bins, dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return TornadoD3;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  EGroupedBarLayout,\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { IGroupDataItem } from './HistogramD3';\nimport { tornadoD3 } from './TornadoD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface ITornadoDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: [number[], number[]];\n}\n\nexport interface ITornadoData {\n  bins: string[];\n  counts: ITornadoDataSet[];\n  colorScheme?: string[];\n  title?: string;\n}\n\nexport interface ITornadoProps {\n  axis: IAxes;\n  bar: IHistogramBar;\n  center: boolean;\n  className: string;\n  data: ITornadoData;\n  delay: number;\n  duration: number;\n  colorScheme: string[];\n  domain: IDomain;\n  grid: IGrid;\n  height: number;\n  margin: IMargin;\n  groupLayout: EGroupedBarLayout;\n  onClick?: (bar: IGroupDataItem) => void;\n  splitBins: [string, string];\n  stroke: IStroke;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * Tornado component\n */\nclass Tornado extends Component<DeepPartial<ITornadoProps>, IChartState> {\n\n  private chart: IChartAdaptor<ITornadoProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<ITornadoProps>) {\n    super(props);\n    this.chart = tornadoD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.update(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<ITornadoProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"tornado-chart-container\"></div>);\n  }\n}\n\nexport default Tornado;\n","import React, { useReducer } from 'react';\n\nimport {\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\nimport {\n  EGroupedBarLayout,\n  IAxes,\n} from '../../../src';\nimport { EColorManipulations } from '../../../src/Histogram';\nimport TornadoChart, { ITornadoProps } from '../../../src/Tornado';\nimport { DeepPartial } from '../../../src/utils/types';\nimport JSXToString from '../components/JSXToString';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport {\n  axis,\n  grid,\n} from '../data';\n\ntype Actions = { type: 'TEST' }\n  | { type: 'HERE' };\n\ntype TInitialState = ITornadoProps | {\n  axis: DeepPartial<IAxes>;\n  bar: {\n    overlayMargin: number;\n    hover: Partial<Record<EColorManipulations, number>>;\n  };\n}\nconst initialState: TInitialState = {\n  data: {\n    bins: ['0 - 10', '11 - 20'],\n    // @Todo test with only one count set\n    counts: [\n      {\n        label: 'Background',\n        data: [\n          [5, 100], // Male bin 1, Male bin 2,\n          [10, 20], // Female bin 1, Female bin 2,\n        ]\n      },\n      {\n        label: 'Foreground',\n        data: [\n          [2, 1], // Male bin 1, Male bin 2,\n          [5, 3], // Female bin 1, Female bin 2,\n        ]\n      },\n\n    ],\n  },\n  axis,\n  splitBins: ['Male', 'Female'],\n  bar: {\n    overlayMargin: 10,\n    hover: {\n      lighten: 0.1,\n    },\n    // width: 40,\n  },\n  center: true,\n  delay: 0,\n  duration: 400,\n  grid,\n  groupLayout: EGroupedBarLayout.OVERLAID,\n}\n\nfunction reducer(state: ITornadoProps, action: Actions) {\n  return state;\n}\n\n\nconst Tornado = () => {\n  const [state, dispatch] = useReducer(reducer, initialState as ITornadoProps);\n  const chart = <TornadoChart\n    {...initialState}\n    data={state.data}\n    width=\"100%\" />;\n  return (\n    <Layout>\n      <SEO title=\"Line Chart\" description=\"\" />\n      <Typography variant=\"h2\">Tornado Chart</Typography>\n      <div>\n        <Grid container spacing={10}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                {chart}\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <JSXToString component={chart} />\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={6}>\n\n          </Grid>\n        </Grid>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Tornado;"],"sourceRoot":""}