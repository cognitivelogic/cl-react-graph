{"version":3,"sources":["webpack:///./src/pages/pie.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","a","createElement"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAgMeD,EAAA,0BAAME,EAAAE,EAAAC,cAAA","file":"component---src-pages-pie-tsx-72dc1e1ed436421b0f17.js","sourcesContent":["// import merge from 'deepmerge';\nimport React, {\n  useReducer,\n  useState,\n} from 'react';\n\n// import ReactDataSheet, { Cell } from 'react-datasheet';\n// import ReactJson from 'react-json-view';\n\n// import {\n//   Card,\n//   CardContent,\n//   FormControlLabel,\n//   FormGroup,\n//   Grid,\n//   Switch,\n//   Tab,\n//   Tabs,\n//   Typography,\n// } from '@material-ui/core';\n// import Slider from '@material-ui/lab/Slider';\n\n// import Legend from '../../../src/Legend';\n// import PieChart, { IPieChartProps } from '../../../src/PieChart';\n// import Layout from '../components/layout';\n// import SEO from '../components/seo';\n// import { TabContainer } from '../components/TabContainer';\n// import {\n//   data2,\n//   theme,\n// } from '../data';\n// import { dataToSpreadSheet } from './histogram';\n\n// const initialSate: IPieChartProps = {\n//   data: data2,\n//   donutWidth: 0,\n//   height: 200,\n//   labels: {\n//     display: false,\n//     // displayFn: () => null,\n//   },\n//   visible: {},\n//   width: '100%',\n// };\n\n// type Actions = { type: 'toggleVisible'; key: string }\n//   | { type: 'setData', data: IPieChartProps['data'] }\n//   | { type: 'setDonutWidth', width: number }\n//   | { type: 'showLabels', show: boolean };\n\n// function reducer(state: IPieChartProps, action: Actions) {\n//   switch (action.type) {\n//     case 'toggleVisible':\n//       const visible = {\n//         ...state.visible,\n//         [action.key]: state.visible.hasOwnProperty(action.key)\n//           ? !state.visible[action.key]\n//           : false,\n//       };\n//       return { ...state, visible };\n//     case 'setData':\n//       return { ...state, data: action.data };\n//     case 'setDonutWidth':\n//       return { ...state, donutWidth: action.width };\n//     case 'showLabels':\n//       return merge(state, { labels: { display: action.show } });\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// const PieExample = () => {\n//   const [tab, setTab] = useState(0);\n//   const [state, dispatch] = useReducer(reducer, initialSate);\n\n//   const speadSheetData = dataToSpreadSheet(state.data);\n//   console.log('state', state);\n//   return (\n//     <Layout>\n//       <SEO title=\"Histogram\" description=\"\" />\n//       <Typography variant=\"h2\">Pie Chart</Typography>\n//       <div>\n//         <Grid container spacing={24}>\n//           <Grid item xs={6}>\n//             <Card>\n//               <CardContent>\n//                 <PieChart\n//                   width={state.width}\n//                   height={state.height}\n//                   donutWidth={state.donutWidth}\n//                   labels={state.labels}\n//                   data={state.data}\n//                   colorScheme={theme}\n//                   visible={state.visible} />\n//                 <Legend\n//                   data={state.data}\n//                   theme={theme}\n//                   onSelect={(key) => dispatch({ type: 'toggleVisible', key })}\n//                   visible={state.visible}\n//                 />\n//               </CardContent>\n//             </Card>\n//             <br />\n//             <Card>\n//               <CardContent>\n//                 <ReactJson src={state} />\n//               </CardContent>\n//             </Card>\n//           </Grid>\n//           <Grid item xs={6}>\n//             <Card>\n//               <CardContent>\n//                 <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n//                   <Tab label=\"Data\" />\n//                   <Tab label=\"Styling\" />\n//                 </Tabs>\n//                 {\n//                   tab === 0 && <TabContainer>\n//                     <ReactDataSheet data={speadSheetData}\n//                       valueRenderer={(cell) => cell.value}\n//                       sheetRenderer={(props) => (\n//                         <table className={props.className + ' my-awesome-extra-class'}>\n//                           <thead>\n//                             <tr>\n//                               <th className=\"action-cell\">Bin</th>\n//                               {\n//                                 state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n//                                   {count.label}\n//                                 </th>))\n//                               }\n//                             </tr>\n//                           </thead>\n//                           <tbody>\n//                             {props.children}\n//                           </tbody>\n//                         </table>\n//                       )}\n//                       onCellsChanged={(changes) => {\n//                         changes.forEach(({ cell, row, col, value }) => {\n//                           if (col === 0) {\n//                             state.data.bins[row] = value;\n//                           } else {\n//                             state.data.counts[col - 1].data[row] = Number(value);\n//                           }\n//                         });\n//                         dispatch({ type: 'setData', data: state.data });\n//                       }} />\n//                   </TabContainer>\n//                 }\n//                 {\n//                   tab === 1 && <TabContainer>\n//                     <Grid container spacing={24}>\n//                       <Grid item xs={6}>\n//                         <FormGroup>\n//                           <Typography>Donut <small>({state.donutWidth})</small></Typography>\n//                           <Slider\n//                             value={state.donutWidth}\n//                             aria-labelledby=\"label\"\n//                             step={1}\n//                             onChange={(_, value) => dispatch({ type: 'setDonutWidth', width: Number(value) })}\n//                           />\n//                         </FormGroup>\n//                         <FormGroup>\n//                           <FormControlLabel\n//                             control={\n//                               <Switch\n//                                 checked={state.labels.display}\n//                                 color=\"primary\"\n//                                 onChange={(_, value) => {\n//                                   dispatch({ type: 'showLabels', show: value });\n//                                 }}\n//                               />\n//                             }\n//                             label=\"Show labels\"\n//                           />\n//                         </FormGroup>\n//                       </Grid>\n//                     </Grid>\n//                   </TabContainer>\n//                 }\n//               </CardContent>\n//             </Card>\n//           </Grid>\n\n//         </Grid>\n//       </div>\n//     </Layout>\n//   );\n// };\n\n// export default PieExample;\n\nexport default () => <div>test</div>;\n"],"sourceRoot":""}