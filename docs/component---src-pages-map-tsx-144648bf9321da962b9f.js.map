{"version":3,"sources":["webpack:///../node_modules/d3-request/src/request.js","webpack:///../node_modules/d3-request/src/type.js","webpack:///../node_modules/d3-request/src/json.js","webpack:///../node_modules/d3-request/src/html.js","webpack:///../node_modules/d3-dsv/src/dsv.js","webpack:///../node_modules/d3-request/src/text.js","webpack:///../node_modules/d3-request/src/xml.js","webpack:///../node_modules/d3-dsv/src/csv.js","webpack:///../node_modules/d3-dsv/src/tsv.js","webpack:///../node_modules/d3-request/src/dsv.js","webpack:///../node_modules/d3-request/src/csv.js","webpack:///../node_modules/d3-request/src/tsv.js","webpack:///./src/pages/map.tsx","webpack:///../src/utils/defaults.ts","webpack:///../src/Histogram.tsx","webpack:///../src/colors/index.js","webpack:///../src/d3/attrs.ts","webpack:///../src/tip.ts","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///../src/colors/filterRange.ts","webpack:///./src/components/seo.tsx","webpack:///../src/Legend.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/HistogramD3.ts","webpack:///../src/grid.ts","webpack:///./src/data.ts","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/index.ts"],"names":["src_request","url","callback","request","mimeType","response","responseType","event","Object","d3_dispatch","headers","d3_collection","xhr","XMLHttpRequest","user","password","timeout","respond","o","result","status","type","responseText","hasResponse","call","e","XDomainRequest","test","onload","onerror","ontimeout","onreadystatechange","readyState","onprogress","header","name","value","toLowerCase","arguments","length","get","remove","set","data","send","post","method","open","has","setRequestHeader","each","overrideMimeType","error","fixCallback","on","abort","apply","Error","defaultMimeType","r","json","document","createRange","createContextualFragment","JSON","parse","EOL","xml","responseXML","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","map","i","stringify","join","dsv","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","rows","N","I","n","eof","eol","token","c","j","slice","replace","row","push","formatRow","formatValue","convert","object","customConverter","format","columnSet","create","forEach","column","inferColumns","concat","formatRows","csv","csvParse","tsv","tsvParse","src_dsv","_","responseOf","MapExample","_useState","useState","loading","setLoading","_useState2","geojson","setGeoJson","useEffect","collection","react_default","a","createElement","layout","seo","title","description","src","height","width","lineStyle","fill","opacity","shape-rendering","stroke","stroke-opacity","stroke-width","visible","axis","curveCatmullRom","x","dateFormat","label","margin","numberFormat","scale","style","assign","dy","transform","y","tickSize","ticks","tickValues","grid","EGroupedBarLayout","Histogram","props","_this","_Component","this","ref","chart","histogramD3","state","parentWidth","handleResize","_this2","el","getDOMNode","offsetWidth","setState","update","getChartState","componentDidMount","_this3","window","addEventListener","componentDidUpdate","_this$props","rest","children","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","componentWillUnmount","removeEventListener","destroy","node","ReactDOM","findDOMNode","HTMLElement","render","_this4","react__WEBPACK_IMPORTED_MODULE_3___default","className","Component","__webpack_exports__","selection","keys","k","attr","__webpack_require__","d","makeTip","d3_selection__WEBPACK_IMPORTED_MODULE_0__","fx","in","container","pageX","pageY","transition","duration","move","out","selector","tipContainer","select","append","tipContent","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","string","isRequired","func","m","module","exports","require","default","colors","filter","Color","hsl","array","luminosity","v","index","self","indexOf","sort","Math","random","SEO","_ref","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","defaultProps","arrayOf","legendIconStyle","cursor","display","listStyle","Legend","_ref$theme","theme","colorScheme","onSelect","scheme","scaleOrdinal","labels","bins","active","hasOwnProperty","key","backgroundColor","border","onClick","Header","siteTitle","index_es","position","variant","color","gatsby_browser_entry","to","Layout","Fragment","flexGrow","padding","paddingTop","Date","getFullYear","href","_755544856","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","shape","joyPlotD3","svg","dataSets","containers","xAxisContainer","yAxisContainer","gridXContainer","gridYContainer","yOuterScaleBand","scaleBand","scaleLinear","innerScaleBand","defaultAxis","bar","groupMargin","counts","delay","domain","max","min","defaultGrid","bottom","left","right","top","dasharray","linecap","tip","tips","tipContentFn","joyTitle","newProps","mergeProps","_makeSvg","makeGrid","makeScales","merge","selectAll","childNodes","getElementsByTagName","removeChild","valuesCount","reduce","b","appendDomainRange","yDomain","allCounts","prev","next","thisCounts","p","item","thisExtent","extent","Number","yRange","bandwidth","range","yAxisWidth","xAxisHeight","gridHeight","getBins","Array","from","Set","_drawScales","xAxis","w","gridWidth","dataLabels","rangeRound","paddingInner","groupedMargin","barMargin","axisBottom","undefined","yLabels","String","yOuterBounds","yAxis","axisLeft","yTickSize","attrs","barWidth","updateChart","groupData","borderColors","g","bars","enter","ix","findIndex","html","currentHeight","exit","_drawGrid","axisWidth","offset","make_x_gridlines","tickFormat","make_y_gridlines","lineData","count","groupLabel","joyLabel","JoyPlot","objectWithoutPropertiesLoose_default","pieChartD3","previousData","storedWidth","storedHeight","donutWidth","displayFn","setIndex","dataSet","drawChartBg","drawCharts","outerRadius","_props$donutWidth","radius","innerRadius","_props$donutWidth2","drawChart","tau","PI","bgArc","arc","startAngle","endAngle","background","thisPie","pie","arcs","thisArc","path","attrTween","interpolate","_current","arcTween","path2","centroid","PieChart","shouldFormatTick","formatTick","timeFormat","isNaN","gridX","gridY","xAxisLabel","yAxisLabel","overlayMargin","groupLayout","GROUPED","stacked","sizeSVG","isStacked","STACKED","groupedBarsUseSameXAxisValue","OVERLAID","console","log","overlay","barY","stackIndex","thisGroupData","find","gData","dx","oSet","gHeight","xd","xText","yText","drawGrid","makeXGridlines","makeYGridlines","data2","filterRange","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineContainer","xScale","yScale","lineProps","curveType","show","strokeDashArray","strokeDashOffset","pointProps","info","toFixed","datumProps","line","point","_buildScales","mergeWith","objValue","srcValue","source","stack","_drawDataPointSet","getYAxisWidth","pointContainer","points","xDomain","ys","xs","getXAxisHeight","datum","parsedY","parsedX","_drawLines","oldData","newD","l","empty","curve","drawAreas","area","y0","y1","_buildScales2","timeParse","toString","LineChart","_React$Component","scatterPlotD3","domainByTrait","choices","values","distModels","legendWidth","split","xSize","ySize","_drawLegend","legend","cell","_drawPoints","traits","nx","cross","plotCell","trait","ScatterPlot","componentWillReceiveProps","horizontalHistogramD3","xRange","h","_drawBars","drawDataSet","barHeight","setCount","barItem","all","multiLineOffset","currentWidth","gy","HorizontalHistogram","histogram","src_LineChart","src_HorizontalHistogram"],"mappings":"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","file":"component---src-pages-map-tsx-144648bf9321da962b9f.js","sourcesContent":["import {map} from \"d3-collection\";\nimport {dispatch} from \"d3-dispatch\";\n\nexport default function(url, callback) {\n  var request,\n      event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      mimeType,\n      headers = map(),\n      xhr = new XMLHttpRequest,\n      user = null,\n      password = null,\n      response,\n      responseType,\n      timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\"\n      && !(\"withCredentials\" in xhr)\n      && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n  \"onload\" in xhr\n      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n  function respond(o) {\n    var status = xhr.status, result;\n    if (!status && hasResponse(xhr)\n        || status >= 200 && status < 300\n        || status === 304) {\n      if (response) {\n        try {\n          result = response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function(e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);\n      else headers.set(name, value + \"\");\n      return request;\n    },\n\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return request;\n    },\n\n    timeout: function(value) {\n      if (!arguments.length) return timeout;\n      timeout = +value;\n      return request;\n    },\n\n    user: function(value) {\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n    },\n\n    password: function(value) {\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n    },\n\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function(value) {\n      response = value;\n      return request;\n    },\n\n    // Alias for send(\"GET\", …).\n    get: function(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n\n    // Alias for send(\"POST\", …).\n    post: function(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n\n    // If callback is non-null, it will be used for error and load events.\n    send: function(method, data, callback) {\n      xhr.open(method, url, true, user, password);\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n      if (responseType != null) xhr.responseType = responseType;\n      if (timeout > 0) xhr.timeout = timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n\n    abort: function() {\n      xhr.abort();\n      return request;\n    },\n\n    on: function() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n}\n\nfunction fixCallback(callback) {\n  return function(error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\"\n      ? xhr.response // null on error\n      : xhr.responseText; // \"\" on error\n}\n","import request from \"./request\";\n\nexport default function(defaultMimeType, response) {\n  return function(url, callback) {\n    var r = request(url).mimeType(defaultMimeType).response(response);\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return r.get(callback);\n    }\n    return r;\n  };\n}\n","import type from \"./type\";\n\nexport default type(\"application/json\", function(xhr) {\n  return JSON.parse(xhr.responseText);\n});\n","import type from \"./type\";\n\nexport default type(\"text/html\", function(xhr) {\n  return document.createRange().createContextualFragment(xhr.responseText);\n});\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import type from \"./type\";\n\nexport default type(\"text/plain\", function(xhr) {\n  return xhr.responseText;\n});\n","import type from \"./type\";\n\nexport default type(\"application/xml\", function(xhr) {\n  var xml = xhr.responseXML;\n  if (!xml) throw new Error(\"parse error\");\n  return xml;\n});\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","import request from \"./request\";\n\nexport default function(defaultMimeType, parse) {\n  return function(url, row, callback) {\n    if (arguments.length < 3) callback = row, row = null;\n    var r = request(url).mimeType(defaultMimeType);\n    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n    r.row(row);\n    return callback ? r.get(callback) : r;\n  };\n}\n\nfunction responseOf(parse, row) {\n  return function(request) {\n    return parse(request.responseText, row);\n  };\n}\n","import {csvParse} from \"d3-dsv\";\nimport dsv from \"./dsv\";\n\nexport default dsv(\"text/csv\", csvParse);\n","import {tsvParse} from \"d3-dsv\";\nimport dsv from \"./dsv\";\n\nexport default dsv(\"text/tab-separated-values\", tsvParse);\n","import { json } from 'd3-request';\nimport { FeatureCollection } from 'geojson';\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\n\nimport { Map } from '../../../src';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { data } from '../data';\n\nconst MapExample = () => {\n  const [loading, setLoading] = useState(true);\n\n  const [geojson, setGeoJson] = useState<FeatureCollection<any, any>>(null);\n  useEffect(() => {\n    const url = 'https://opendata.arcgis.com/datasets/8d3a9e6e7bd445e2bdcc26cdf007eac7_3.geojson';\n    json(url, (error, collection) => {\n      if (error) { throw error; }\n      setGeoJson(collection);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return <div>loading</div>;\n  }\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <h1>Map</h1>\n      <div>\n        <Map\n          data={data}\n          geojson={geojson}\n          height={400}\n          width={400} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default MapExample;\n\n","import { curveCatmullRom } from 'd3-shape';\n\nimport {\n  IAxes,\n  IStroke,\n} from '../';\nimport {\n  IGrid,\n  ISVGLineStyle,\n} from '../Histogram';\nimport { ILineProps } from '../LineChart';\n\nexport const lineStyle: ISVGLineStyle = {\n  'fill': '#000',\n  'opacity': 1,\n  'shape-rendering': 'auto',\n  'stroke': '#000',\n  'stroke-opacity': 1,\n  'stroke-width': 1,\n  'visible': true,\n};\n\nexport const stroke: IStroke = {\n  color: '#000',\n  dasharray: '0',\n  linecap: 'butt',\n  width: 1,\n};\n\nexport const line: ILineProps = {\n  curveType: curveCatmullRom,\n  fill: {\n    fill: '#000',\n    show: true,\n  },\n  show: true,\n  stroke: '#000',\n  strokeDashArray: '0',\n  strokeDashOffset: 0,\n};\n\nexport const axis: IAxes = {\n  x: {\n    dateFormat: '',\n    height: 20,\n    label: '',\n    margin: 20,\n    numberFormat: '',\n    scale: 'LINEAR',\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#666',\n    },\n    text: {\n      style: {\n        dy: '.35em',\n        transform: 'rotate(0)',\n        x: 0,\n        y: 10,\n      },\n    },\n    tickSize: 0,\n    ticks: 3,\n    tickValues: null,\n    visible: true,\n    width: 50,\n  },\n  y: {\n    dateFormat: '',\n    height: 20,\n    label: '',\n    margin: 20,\n    numberFormat: '',\n    scale: 'LINEAR',\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#666',\n    },\n    text: {\n      style: {\n        fill: '#666',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    tickValues: null,\n    visible: true,\n    width: 50,\n  },\n};\n\nexport const grid: IGrid = {\n  x: {\n    height: 1,\n    style: {\n      ...lineStyle,\n      'fill': 'none',\n      'stroke': '#bbb',\n      'stroke-opacity': 0.7,\n      'stroke-width': 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      'fill': 'none',\n      'stroke': '#bbb',\n      'stroke-opacity': 0.7,\n      'stroke-width': 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface IChartAdaptor<P> {\n  create: (el: Element, props: DeepPartial<P>) => void;\n  update: (el: Element, props: DeepPartial<P>) => void;\n  destroy: (el: Element) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin: number;\n  margin: number;\n  overlayMargin: number; // When bars are rendered as EGroupedBarLayout.OVERLAID \n  width: number;\n}\n\nexport interface IGrid {\n  x: {\n    height: number;\n    ticks: number;\n    visible: boolean;\n    style: ISVGLineStyle;\n  };\n  y: {\n    style: ISVGLineStyle;\n    ticks: number;\n    visible: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray: string;\n  linecap: 'butt' | 'round' | 'square';\n  width: number;\n}\n\nexport interface IAxes {\n  y: IAxis;\n  x: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n}\n\nexport interface IDomain {\n  max: number | null;\n  min: number | null;\n}\n\nexport interface IMargin {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\n\nexport enum EGroupedBarLayout {\n  GROUPED,\n  STACKED,\n  OVERLAID,\n}\nexport interface IHistogramProps {\n  axis: IAxes;\n  bar: IHistogramBar;\n  className: string;\n  data: IHistogramData;\n  delay: number;\n  duration: number;\n  colorScheme: string[];\n  domain: IDomain;\n  grid: IGrid;\n  height: number;\n  margin: IMargin;\n  stacked: boolean;\n  groupLayout: EGroupedBarLayout;\n  stroke: IStroke;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke': string;\n  'fill': string;\n  'opacity': number;\n  'stroke-width': number;\n  'stroke-opacity': number;\n  'shape-rendering': string;\n  'visible': boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\nexport interface IAxis {\n  dateFormat: string;\n  numberFormat: string;\n  ticks: number;\n  height: number;\n  label: string;\n  margin: number;\n  scale: Scale;\n  style: ISVGLineStyle;\n  text: {\n    style: ISVGTextStyle;\n  };\n  width: number;\n  tickSize: number;\n  tickValues: null | number[];\n  visible: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends Component<DeepPartial<IHistogramProps>, IChartState> {\n\n  private chart: IChartAdaptor<IHistogramProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IHistogramProps>) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.update(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IHistogramProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { scaleOrdinal } from 'd3-scale';\nimport React, { FC } from 'react';\n\nimport colorScheme from './colors';\nimport { IHistogramDataSet } from './Histogram';\n\ninterface IProps {\n  className?: string;\n  theme?: string[];\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  onSelect: (label: string) => void;\n  visible: { [key: string]: boolean };\n}\n\nconst legendIconStyle = {\n  cursor: 'pointer',\n  display: 'inline-block',\n  height: '1rem',\n  margin: '0.25rem 0.5rem',\n  width: '1rem',\n};\n\nconst listStyle = {\n  listStyle: 'none',\n};\n\nconst Legend: FC<IProps> = ({ className, theme = colorScheme, data, onSelect, visible }) => {\n  const scheme: any = scaleOrdinal(theme);\n  const labels = data.bins;\n  return (\n    <div className={className}>\n      <ul style={listStyle}>\n        {\n          labels.map((label) => {\n            const active = (visible.hasOwnProperty(label) && visible[label]) || !visible.hasOwnProperty(label);\n            return (\n              <li key={label}>\n                <div style={{\n                  ...legendIconStyle,\n                  backgroundColor: active ? scheme(label) : '#FFF',\n                  border: '2px solid ' + scheme(label),\n                }}\n                  onClick={() => onSelect(label)}>\n                </div> {label}\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Legend;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"histogram\">Histogram</Link></Button>\n      <Button><Link to=\"line\">Line Chart</Link></Button>\n      <Button><Link to=\"pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport get from 'lodash.get';\nimport merge from 'lodash/merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n} from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n} from './utils/defaults';\nimport { DeepPartial } from './utils/types';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor<IJoyPlotProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  let dataSets: IGroupData[];\n  let containers: Array<Selection<SVGGElement, any, any, any>>;\n  let xAxisContainer: Selection<SVGGElement, any, any, any>;\n  let yAxisContainer: Selection<SVGGElement, any, any, any>;\n  let gridXContainer: Selection<SVGGElement, any, any, any>;\n  let gridYContainer: Selection<SVGGElement, any, any, any>;\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const props: IJoyPlotProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: defaultGrid,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: DeepPartial<IJoyPlotProps>) {\n      merge(props, newProps);\n      if (newProps.data) {\n        props.data = newProps.data as IJoyPlotProps['data'];\n      }\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : Number(thisExtent[1]);\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : Number(thisExtent[0]);\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      xAxisContainer = svg.append('g').attr('class', 'x-axis');\n      yAxisContainer = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { margin, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      xAxisContainer\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => String(d.title));\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      yAxisContainer\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     */\n    gridWidth(): number {\n      const { width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     */\n    gridHeight(): number {\n      const { height, margin } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { delay, duration, axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = containers[i]\n          .selectAll<SVGGElement, {}>('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append<SVGGElement>('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + (x(d[0].label) || 0);\n\n            const ydelta = yOuterScaleBand(d[0].label);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll<SVGRectElement, {}>('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append<SVGRectElement>('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => String(innerScaleBand(d.label)))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(String(ix)))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(String(ix));\n            }\n            return '';\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n          );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid() {\n      gridXContainer = svg.append('g')\n        .attr('class', 'grid gridX');\n      gridYContainer = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        gridXContainer.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        gridXContainer.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(gridXContainer.selectAll('.tick line'), grid.x.style);\n        attrs(gridXContainer.selectAll('.domain'), { ...axis.y.style, stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gridYContainer.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n          );\n\n        attrs(gridYContainer.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        gridYContainer.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(gridYContainer.selectAll('.domain'), { ...axis.x.style, stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IJoyPlotProps>) {\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface IJoyPlotProps {\n  axis: IAxes;\n  bar: IHistogramBar;\n  className: string;\n  data: IHistogramData[];\n  delay: number;\n  duration: number;\n  colorScheme: string[];\n  domain: IDomain;\n  grid: IGrid;\n  height: number;\n  margin: IMargin;\n  stroke: IStroke;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * JoyPlot component\n */\nclass JoyPlot extends Component<DeepPartial<IJoyPlotProps>, IChartState> {\n\n  private chart: IChartAdaptor<IJoyPlotProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IJoyPlotProps>) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.update(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IJoyPlotProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default JoyPlot;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport {\n  arc,\n  Arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport get from 'lodash.get';\nimport merge from 'lodash/merge';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\nimport { DeepPartial } from './utils/types';\n\ninterface IPieDataset {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport const pieChartD3 = ((): IChartAdaptor<IPieChartProps> => {\n\n  let tipContainer;\n  let tipContent;\n\n  const props: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      bottom: 0,\n      left: 10,\n      right: 0,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  let containers: any[];\n  let svg: Selection<any, any, any, any>;\n  let dataSets: IPieDataset[][];\n  let previousData: any;\n  let current: any;\n  let storedWidth: number;\n  let storedHeight: number;\n\n  const PieChartD3 = {\n\n    create(el: Element, newProps: DeepPartial<IPieChartProps> = {}) {\n      merge(props, newProps);\n      previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      containers = [];\n      previousData.forEach((dataSet, i) => {\n        this.drawChartBg(props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: Element, newProps: DeepPartial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      merge(props, newProps);\n      if (props.colorScheme) {\n        props.colorScheme = props.colorScheme;\n      }\n      if (!props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = props;\n\n      const radius = Math.min(Number(width), height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = props;\n      const radius = Math.min(Number(width), height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = props;\n      dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      previousData = dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + Number(width) / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!containers[i]) {\n        containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => d.count);\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + Number(width) / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each((d, j) => { current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      path2.enter().append('text')\n        .attr('class', 'label')\n        .each(() => {\n          // Store initial offset incase we change chart heights.\n          storedHeight = height;\n          storedWidth = Number(width);\n        })\n        .attr('transform', (d) => {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (storedWidth / 2);\n          const y = centroid[1] + (storedHeight / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each((d: any) => {\n          // Store current value to work out fx transition opacities\n          current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', (d) => {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (storedWidth / 2);\n          const y = centroid[1] + (storedHeight / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(this: any, thisArc: Arc<any, any>) {\n  return function (this: any, d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (this: any, t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\nimport { DeepPartial } from './utils/types';\n\ninterface ILabels {\n  display: boolean;\n  displayFn: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor: string;\n  className: string;\n  colorScheme: string[];\n  donutWidth: number;\n  height: number;\n  labels: ILabels;\n  margin: IMargin;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends Component<DeepPartial<IPieChartProps>, IChartState> {\n\n  private chart: IChartAdaptor<IPieChartProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IPieChartProps>) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (el) {\n      const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n      this.setState({\n        parentWidth: width,\n      }, () => this.chart.update(el, this.getChartState()));\n    }\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (el) {\n      this.chart.create(el, this.getChartState());\n      if (this.props.width === '100%') {\n        window.addEventListener('resize', (e) => this.handleResize());\n        this.handleResize();\n      }\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (el) {\n      this.chart.update(el, this.getChartState());\n    }\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IPieChartProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    const el = this.getDOMNode();\n    if (el) {\n      this.chart.destroy(el);\n    }\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { format } from 'd3-format';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport get from 'lodash.get';\nimport merge from 'lodash/merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  EGroupedBarLayout,\n  IAxis,\n  IChartAdaptor,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid,\n} from './utils/defaults';\nimport { DeepPartial } from './utils/types';\n\nexport const shouldFormatTick = (axis: IAxis): boolean => {\n  return (axis.scale === 'TIME' && axis.hasOwnProperty('dateFormat'))\n    || axis.hasOwnProperty('numberFormat');\n}\nexport const formatTick = (axis: IAxis) => (v: string | number) => {\n  if (axis.scale === 'TIME') {\n    return timeFormat(axis.dateFormat)(new Date(v));\n  }\n  return isNaN(Number(v)) ? v : format(axis.numberFormat)(Number(v))\n};\n\ninterface IGroupDataItem {\n  label: string;\n  groupLabel?: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor<IHistogramProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  let container: Selection<SVGElement, any, any, any>;\n  let dataSets: any[];\n  let gridX: any;\n  let gridY: any;\n  let yAxisContainer: Selection<any, any, any, any>;\n  let xAxisContainer: Selection<any, any, any, any>;\n  let xAxisLabel: any;\n  let yAxisLabel: any;\n\n  const props: IHistogramProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      overlayMargin: 5,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid,\n    groupLayout: EGroupedBarLayout.GROUPED,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    stacked: false, // Deprecated use groupLayout instead\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IHistogramProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      container = svg\n        .append<SVGElement>('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, newProps);\n    },\n\n    mergeProps(newProps: DeepPartial<IHistogramProps>) {\n      merge(props, newProps);\n      if (newProps.data) {\n        props.data = newProps.data as IHistogramProps['data'];\n      }\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      // Reference to svg element containing chart\n      svg = select(el).append('svg');\n      this.sizeSVG();\n\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    sizeSVG() {\n      const { margin, width, height, className } = props;\n      const scale = {\n        x: 1 - (margin.left / Number(width)),\n        y: 1 - (margin.top / height),\n      };\n      svg.attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    isStacked() {\n      const { groupLayout, stacked } = props;\n      return stacked || groupLayout === EGroupedBarLayout.STACKED;\n    },\n\n    groupedBarsUseSameXAxisValue() {\n      const { groupLayout, stacked } = props;\n      return stacked || groupLayout === EGroupedBarLayout.STACKED || groupLayout === EGroupedBarLayout.OVERLAID;\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data. If the chart is stacked then sum all bin values first.\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height } = props;\n\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return this.isStacked()\n          ? [...prev, next.reduce((p: number, n): number => p + n.value, 0)]\n          : [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n      const thisExtent = extent<any>(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : Number(thisExtent[1]);\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : Number(thisExtent[0]);\n      const yRange = [height - (margin.top * 2) - xAxisHeight(props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      xAxisContainer = svg.append('g').attr('class', 'x-axis');\n      yAxisContainer = svg.append('g').attr('class', 'y-axis');\n\n      xAxisLabel = svg.append('g');\n      yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales() {\n      const { axis, data, margin, height } = props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(this.groupedBarsUseSameXAxisValue() ? ['main'] : dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n      const xAxis = axisBottom<string>(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (shouldFormatTick(axis.x)) {\n        xAxis.tickFormat(formatTick(axis.x) as any);\n      }\n\n      xAxisContainer\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft<number>(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (shouldFormatTick(axis.y)) {\n        yAxis.tickFormat(formatTick(axis.y) as any);\n      }\n      yAxisContainer\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth(i: number) {\n      console.log('bar width', i, props.groupLayout);\n      const overlay = (props.groupLayout === EGroupedBarLayout.OVERLAID)\n        ? i * props.bar.overlayMargin * 2\n        : 0;\n      return innerScaleBand.bandwidth() - overlay;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip } = props;\n\n\n      const barY = (d: IGroupDataItem, stackIndex: number): number => {\n        const thisGroupData = groupData.find((gData) => {\n          return gData.find((dx) => dx.label === d.label) !== undefined;\n        });\n        const oSet = thisGroupData ?\n          thisGroupData\n            .filter((_, i) => i < stackIndex)\n            .reduce((prev, next) => prev + next.value, 0)\n          : 0;\n        const offset = this.isStacked() && stackIndex > 0\n          ? oSet\n          : 0;\n        return y(d.value + offset);\n      }\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(props.colorScheme);\n      const gHeight = gridHeight(props);\n\n      const g = container\n        .selectAll<SVGElement, {}>('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append<SVGElement>('g')\n        .merge(g)\n        .attr('transform', (d: any[]) => {\n          let xd = x(d[0].label);\n          if (xd === undefined) {\n            xd = 0;\n          }\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + xd;\n          return `translate(${xdelta}, 0)`;\n        })\n\n        .selectAll<SVGElement, {}>('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append<SVGElement>('rect')\n        .attr('height', 0)\n        .attr('y', barY)\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d: IGroupDataItem, i) => {\n          const overlay = (props.groupLayout === EGroupedBarLayout.OVERLAID)\n            ? i * props.bar.overlayMargin\n            : 0;\n          return overlay;\n          // return Number(innerScaleBand(String(d.groupLabel)));\n        })\n        .attr('width', (d, i) => this.barWidth(i))\n        .attr('fill', (d, i) => colors(String(i)))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', barY)\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem, i): string => {\n            const currentHeight = gHeight - (y(d.value));\n            const barWidth = this.barWidth(i);\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (Number(width) / 2) + ' ,' +\n          ((height - xAxisHeight(props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IHistogramProps>) {\n      if (!newProps.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      if (!props.data.bins) {\n        return;\n      }\n      this.sizeSVG();\n      const { data, visible } = props;\n      dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!dataSets[i]) {\n            dataSets[i] = [];\n          }\n          dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales();\n      drawGrid(x, y, gridX, gridY, props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`)\n      .transition()\n      .call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n        .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n        .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { ...axis.y.style, stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n      );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { ...axis.x.style, stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import { IHistogramData } from '../../src';\nimport filterRange from '../../src/colors/filterRange';\nimport { IGrid } from '../../src/Histogram';\nimport { lineStyle } from '../../src/utils/defaults';\n\nexport const grid: IGrid = {\n  x: {\n    style: {\n      ...lineStyle,\n      'stroke': '#ccc',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      'stroke': '#ccc',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number>\n  | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      y = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  CurveFactory,\n  CurveFactoryLineOnly,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport get from 'lodash.get';\nimport mergeWith from 'lodash.mergewith';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport { IChartAdaptor } from './Histogram';\nimport {\n  formatTick,\n  shouldFormatTick,\n} from './HistogramD3';\nimport {\n  ILineChartDataSet,\n  ILineChartProps,\n  ILineProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n  lineStyle,\n} from './utils/defaults';\nimport {\n  AnyScale,\n  buildScales,\n} from './utils/scales';\nimport { DeepPartial } from './utils/types';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor<ILineChartProps> => {\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const lineProps: ILineProps = {\n    curveType: curveCatmullRom,\n    fill: {\n      fill: '#eee',\n      show: false,\n    },\n    show: true,\n    stroke: '#005870',\n    strokeDashArray: '5 5',\n    strokeDashOffset: 0,\n  };\n\n  const pointProps: ISVGPoint = {\n    ...lineStyle,\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const props: ILineChartProps = {\n    axis: defaultAxis,\n    className: 'line-chart-d3',\n    data: [],\n    grid: defaultGrid,\n    height: 250,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (\n    curveType: CurveFactory | CurveFactoryLineOnly,\n    yAxisWidth: number,\n    x,\n    y,\n  ) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  // let props: ILineChartProps;\n  let svg: Selection<any, any, any, any>;\n  let container: Selection<SVGElement, any, any, any>;\n  let lineContainer: Selection<any, any, any, any>;\n  let gridX: Selection<any, any, any, any>;\n  let gridY: Selection<any, any, any, any>;\n  let xScale: any; // AnyScale;\n  let yScale: any; // AnyScale;\n  let xAxisContainer: Selection<any, any, any, any>;\n  let yAxisContainer: Selection<any, any, any, any>;\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<ILineChartProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeScales();\n      [xScale, yScale] = buildScales(props.axis);\n      this.makeGrid();\n      container = svg\n        .append<SVGElement>('g')\n        .attr('class', 'linechart-container');\n\n      lineContainer = container\n        .append<SVGElement>('g')\n        .attr('class', 'line-container');\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: DeepPartial<ILineChartProps>) {\n      const customerizer = (objValue, srcValue, key, object, source, stack) => {\n        if (key === 'data') {\n          return srcValue;\n        }\n      }\n      mergeWith(props, newProps, customerizer);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n      this.sizeSVG();\n\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    sizeSVG() {\n      const { margin, width, height, className } = props;\n      const scale = {\n        x: 1 - (margin.left / Number(width)),\n        y: 1 - (margin.top / Number(height)),\n      };\n      svg.attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartProps['data']) {\n      const { axis, tip } = props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = container.selectAll<SVGElement, {}>('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet<any>, i: number) => {\n        tipContent.html(() => props.tipContentFn([d as any], 0, 0, ''));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append<SVGElement>('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll<SVGElement, {}>('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append<SVGElement>('circle')\n        .attr('class', 'enter')\n        .on('mouseover', (d, i) => {\n          tipContent.html(() => props.tipContentFn([d as any], 0, 0, ''));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => yScale(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return xScale(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      xAxisContainer = svg.append('g').attr('class', 'x-axis');\n      yAxisContainer = svg.append('g').attr('class', 'y-axis');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: ILineChartProps['data']) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = props;\n      const w = gridWidth(props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft<number>(yScale).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (shouldFormatTick(axis.y)) {\n        yAxis.tickFormat(formatTick(axis.y) as any);\n      }\n\n      const xAxis = axisBottom<number | string>(xScale)\n        .ticks(axis.x.ticks);;\n\n      if (shouldFormatTick(axis.x)) {\n        xAxis.tickFormat(formatTick(axis.x) as any);\n      }\n\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum) => {\n        datum.data.forEach((d) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      xScale\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      yScale.domain(yDomain)\n        .range([Number(height) - xAxisHeight, 0]);\n\n      yAxisContainer\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      xAxisContainer\n        .attr('transform', `translate(${yAxisWidth},${(Number(height) - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: Array<ILineChartDataSet<any>>, oldData: Array<ILineChartDataSet<any>>) {\n      const { axis } = props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // Remove old lines\n      oldData.forEach((d, i) => {\n        const keep = data.find(((newD) => newD.label === d.label));\n        if (keep === undefined) {\n          const l = d.label.replace(/ /g, '');\n          lineContainer.select(`.line-${l}`)\n            .remove();\n        }\n      })\n\n      // change the line\n      data.forEach((d, i) => {\n        const selector = `line-${d.label.replace(/ /g, '')}`;\n        let selection = lineContainer.select(`.${selector}`)\n        if (selection.empty()) {\n          lineContainer.append('path')\n            .attr('class', selector);\n          selection = lineContainer.select(`.${selector}`)\n        }\n\n        selection\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, xScale, yScale)(d.data as any) as any)\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: Array<ILineChartDataSet<any>>, oldData: Array<ILineChartDataSet<any>>) {\n      const { axis, height } = props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => xScale(d.x) + yAxisWidth)\n        .y0((d) => Number(height) - xAxisHeight)\n        .y1((d: any) => yScale(d.y));\n\n      // Remove old lines\n      oldData.forEach((d, i) => {\n        const keep = data.find(((newD) => newD.label === d.label));\n        if (keep === undefined) {\n          const l = d.label.replace(/ /g, '');\n          lineContainer.select(`.fill-${l}`).remove();\n        }\n      })\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          const selector = `fill-${d.label.replace(/ /g, '')}`;\n          let selection = lineContainer.select(`.${selector}`);\n          if (selection.empty()) {\n            lineContainer.append('path')\n              .attr('class', selector);\n            selection = lineContainer.select(`.${selector}`)\n\n          }\n          selection\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data) as any);\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: ILineChartProps['data']): number {\n      return data.reduce((a: number, b): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<ILineChartProps>) {\n      if (!newProps.data) {\n        return;\n      }\n      const oldData = [...props.data];\n      this.mergeProps(newProps);\n      this.sizeSVG();\n      [xScale, yScale] = buildScales(props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        // Assign in default line & point styles\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data, oldData);\n      this.drawAreas(data, oldData);\n      drawGrid(xScale, yScale, gridX, gridY, props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import {\n  CurveFactory,\n  CurveFactoryLineOnly,\n} from 'd3-shape';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IGrid,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\nimport { DeepPartial } from './utils/types';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineProps {\n  show: boolean;\n  fill: {\n    show: boolean;\n    fill: string;\n  };\n  curveType: CurveFactory | CurveFactoryLineOnly;\n  stroke: string;\n  strokeDashOffset: number;\n  strokeDashArray: string;\n}\n\nexport interface ILineChartDataSet<T> {\n  label: string;\n  point: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line: ILineProps;\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  axis: IAxes;\n  className: string;\n  data: Array<ILineChartDataSet<T>>;\n  grid: IGrid;\n  height: number | string;\n  margin: IMargin;\n  tip: any;\n  tipContainer?: string;\n  tipContentFn: TipContentFn<{ x: string | number, y: string | number }>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\nclass LineChart extends React.Component<DeepPartial<ILineChartProps>, IState> {\n\n  private chart: IChartAdaptor<ILineChartProps>;\n  private ref: HTMLDivElement | null = null;\n\n  constructor(props: DeepPartial<ILineChartProps>) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.update(el, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): DeepPartial<ILineChartProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.destroy(el);\n  }\n\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport merge from 'lodash/merge';\n\nimport colorScheme from './colors';\nimport { IChartAdaptor } from './Histogram';\nimport { IChartPoint } from './LineChart';\nimport { IScatterPlotProps } from './ScatterPlot';\nimport { DeepPartial } from './utils/types';\n\nexport const scatterPlotD3 = ((): IChartAdaptor<IScatterPlotProps> => {\n  let svg: Selection<any, any, any, any>;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const props: IScatterPlotProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: {\n      keys: [],\n      values: []\n    },\n    delay: 0,\n    distModels: [],\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    split: '',\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IScatterPlotProps> = props) {\n      merge(props, newProps);\n      this.update(el, newProps);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element, data: IScatterPlotProps['data']) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height, legendWidth, padding } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', Number(width) + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: IScatterPlotProps['data']['keys']) {\n      const { height, padding, width } = props;\n      const xSize = Number(width) / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (this: any, d: any) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (this: any, d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (Number(width) + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (this: any, c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       */\n      function plot(this: any, p: IChartPoint) {\n        const plotCell = select(this);\n        let circle: Selection<SVGCircleElement, any, any, any>;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append<SVGRectElement>('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       */\n      function cross(a, b) {\n        const c: Array<{ x: number; i: number; y: number; j: number; }> = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IScatterPlotProps>) {\n      merge(props, newProps);\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = Number(width) / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent<any>(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { scatterPlotD3 } from './ScatterPlotD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface IScatterPlotProps {\n  choices: string[];\n  className: string;\n  data: {\n    keys: string[],\n    values: any[];\n  };\n  delay: number;\n  distModels: string[];\n  duration: number;\n  height: number;\n  legendWidth: number;\n  colorScheme: string[];\n  padding: number;\n  radius: number;\n  split: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<DeepPartial<IScatterPlotProps>, IChartState> {\n\n  private chart: IChartAdaptor<IScatterPlotProps>;\n  private ref: HTMLDivElement | null = null;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (el) {\n      const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n      this.setState({\n        parentWidth: width,\n      }, () => this.chart.update(el, this.getChartState()));\n    }\n  }\n\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  private getChartState(): DeepPartial<IScatterPlotProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: DeepPartial<IScatterPlotProps>) {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.destroy(el);\n  }\n\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport merge from 'lodash/merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n} from './utils/defaults';\nimport { DeepPartial } from './utils/types';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor<IHistogramProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const props: IHistogramProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0.1,\n      margin: 10,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      colorScheme: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: defaultGrid,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    stacked: false,\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IHistogramProps> = {}) {\n      merge(props, newProps);\n      this.update(el, newProps);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, Number(width) - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(String(i)))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, (j: number) => colors[j])\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      barItem.attr('stroke-dasharray', stroke.dasharray);\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { ...axis.y.style, stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { ...axis.x.style, stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IHistogramProps>) {\n      if (!props.data) {\n        return;\n      }\n      merge(props, newProps);\n      this._makeSvg(el);\n      if (!props.data.bins) {\n        return;\n      }\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this._drawBars(props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\nimport { DeepPartial } from './utils/types';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends Component<DeepPartial<IHistogramProps>, IChartState> {\n\n  private histogram: IChartAdaptor<IHistogramProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IHistogramProps>) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.update(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.histogram.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.histogram.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IHistogramProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   */\n  public componentWillReceiveProps() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.histogram.update(el, this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","export {\n  default as Histogram,\n  IAxes,\n  IHistogramBar,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n  IStroke,\n} from './Histogram';\n\nexport {\n  default as LineChart,\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n} from './LineChart';\n\nexport { default as Legend } from './Legend';\nexport { default as JoyPlot } from './JoyPlot';\n// import Map from './Map';\nexport { default as PieChart } from './PieChart';\nexport { default as ScatterPlot } from './ScatterPlot';\nexport { default as HorizontalHistogram } from './HorizontalHistogram';\nexport { default as filterRange } from './colors/filterRange';\n\nexport {\n  axis as defaultAxis,\n  lineStyle as defaultLineStyle,\n  stroke as defaultStroke,\n  line as defaultLine,\n  grid as defaultGrid,\n} from './utils/defaults';\n\n"],"sourceRoot":""}