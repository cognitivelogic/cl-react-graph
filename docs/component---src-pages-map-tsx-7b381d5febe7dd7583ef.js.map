{"version":3,"sources":["webpack:///../node_modules/d3-request/src/request.js","webpack:///../node_modules/d3-request/src/type.js","webpack:///../node_modules/d3-request/src/json.js","webpack:///../node_modules/d3-request/src/html.js","webpack:///../node_modules/d3-dsv/src/dsv.js","webpack:///../node_modules/d3-request/src/text.js","webpack:///../node_modules/d3-request/src/xml.js","webpack:///../node_modules/d3-dsv/src/csv.js","webpack:///../node_modules/d3-dsv/src/tsv.js","webpack:///../node_modules/d3-request/src/dsv.js","webpack:///../node_modules/d3-request/src/csv.js","webpack:///../node_modules/d3-request/src/tsv.js","webpack:///./src/pages/map.tsx","webpack:///../src/HistogramD3.ts","webpack:///../src/Histogram.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///../src/colors/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///../src/d3/attrs.ts","webpack:///../src/tip.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///../src/colors/filterRange.ts","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/grid.ts","webpack:///./src/data.ts","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/MapD3.ts","webpack:///../src/Map.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///../src/index.ts"],"names":["src_request","url","callback","request","mimeType","response","responseType","event","Object","d3_dispatch","headers","d3_collection","xhr","XMLHttpRequest","user","password","timeout","respond","o","result","status","type","responseText","hasResponse","call","e","XDomainRequest","test","onload","onerror","ontimeout","onreadystatechange","readyState","onprogress","header","name","value","toLowerCase","arguments","length","get","remove","set","data","send","post","method","open","has","setRequestHeader","each","overrideMimeType","error","fixCallback","on","abort","apply","Error","defaultMimeType","r","json","document","createRange","createContextualFragment","JSON","parse","EOL","xml","responseXML","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","map","i","stringify","join","dsv","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","rows","N","I","n","eof","eol","token","c","j","slice","replace","row","push","formatRow","formatValue","convert","object","customConverter","format","columnSet","create","forEach","column","inferColumns","concat","formatRows","csv","csvParse","tsv","tsvParse","src_dsv","_","responseOf","MapExample","_useState","useState","loading","setLoading","_useState2","geojson","setGeoJson","useEffect","collection","react_default","a","createElement","layout","seo","title","description","gatsby_browser_entry","to","src","height","width","histogramD3","svg","tipContainer","tipContent","y","scaleLinear","x","scaleBand","innerScaleBand","defaultProps","axis","label","margin","style","fill","shape-rendering","stroke","stroke-opacity","stroke-width","ticks","bar","groupMargin","className","colorScheme","bins","counts","delay","domain","max","min","duration","grid","visible","left","top","color","dasharray","linecap","tip","tips","tipContentFn","d","el","props","this","mergeProps","_makeSvg","makeGrid","makeScales","container","append","attr","update","newProps","merge","selectAll","childNodes","getElementsByTagName","removeChild","_this$props","scale","select","makeTip","valuesCount","reduce","b","appendDomainRange","yDomain","_this$props2","allCounts","prev","next","thisExtent","extent","hasOwnProperty","yRange","xAxisHeight","range","xAxis","yAxis","xAxisLabel","yAxisLabel","_drawScales","_this$props3","w","gridWidth","dataLabels","rangeRound","paddingInner","groupedMargin","bandwidth","barMargin","axisBottom","tickSize","undefined","tickValues","filter","dateFormat","tickFormat","timeFormat","yAxisWidth","dataSets","axisLeft","yTickSize","transition","attrs","m","barWidth","updateChart","groupData","_this","_this$props4","colors","scaleOrdinal","gHeight","gridHeight","g","bars","enter","stackIndex","setIndex","findIndex","ix","html","fx","in","move","out","groupLabel","currentHeight","exit","xText","yText","gridX","gridY","_this2","_this$props5","count","drawGrid","destroy","Histogram","_React$Component","chart","state","parentWidth","handleResize","elem","getDOMNode","ref","offsetWidth","setState","getChartState","componentDidMount","_this3","window","addEventListener","componentDidUpdate","rest","children","objectWithoutPropertiesLoose_default","assign","componentWillUnmount","removeEventListener","ReactDOM","render","_this4","react","React","rgb","darker","toString","toFixed","__webpack_require__","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","string","isRequired","func","module","exports","require","default","selection","keys","k","d3_selection__WEBPACK_IMPORTED_MODULE_0__","pageX","pageY","selector","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","shape","SEO","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","arrayOf","array","Color","hsl","luminosity","v","index","self","indexOf","sort","Math","random","Header","siteTitle","index_es","position","variant","Layout","Fragment","flexGrow","padding","paddingTop","Date","getFullYear","href","_755544856","node","joyPlotD3","yOuterScaleBand","joyTitle","containers","_props","thisCounts","p","item","_props5","Number","getBins","Array","from","Set","_props6","yLabels","yOuterBounds","_props7","_props8","_props9","borderColors","thisMax","joyLabel","_drawGrid","_props10","axisWidth","offset","make_x_gridlines","make_y_gridlines","_props11","lineData","d3_axis__WEBPACK_IMPORTED_MODULE_0__","lodash_get__WEBPACK_IMPORTED_MODULE_1__","_d3_attrs__WEBPACK_IMPORTED_MODULE_2__","makeXGridlines","makeYGridlines","data2","_src_colors_filterRange__WEBPACK_IMPORTED_MODULE_0__","filterRange","horizontalHistogramD3","xDomain","xRange","h","_drawBars","info","drawDataSet","barHeight","setCount","barItem","_this$props6","all","multiLineOffset","currentWidth","gy","HorizontalHistogram","histogram","componentWillReceiveProps","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineProps","curveType","curveCatmullRom","show","strokeDashArray","strokeDashOffset","pointProps","radius","easeCubic","line","point","datumProps","_buildScales","lineContainer","_createLines","_drawDataPointSet","getYAxisWidth","pointContainer","points","dx","ys","xs","numberFormat","getXAxisHeight","datum","parsedY","parsedX","_drawLines","curve","drawAreas","area","y0","y1","console","log","_buildScales2","timeParse","mapD3","features","projection","geoMercator","PI","translate","geoGenerator","geoPath","Map","pieChartD3","backgroundColor","donutWidth","labels","display","displayFn","previousData","dataSet","drawChartBg","drawCharts","outerRadius","_this$props2$donutWid","innerRadius","_this$props3$donutWid","theme","drawChart","tau","bgArc","arc","startAngle","endAngle","background","thisPie","pie","arcs","thisArc","path","_current","attrTween","interpolate","arcTween","path2","_height","_width","centroid","PieChart","scatterPlotD3","yScale","xScale","domainByTrait","choices","legendWidth","xSize","ySize","_drawLegend","split","legend","cell","_drawPoints","traits","nx","cross","plotCell","values","distModels","trait","ScatterPlot","_Component","chartWidth","chartHeight","innerHeight","getBoundingClientRect","Component","src_HorizontalHistogram","src_Map"],"mappings":"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","file":"component---src-pages-map-tsx-7b381d5febe7dd7583ef.js","sourcesContent":["import {map} from \"d3-collection\";\nimport {dispatch} from \"d3-dispatch\";\n\nexport default function(url, callback) {\n  var request,\n      event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      mimeType,\n      headers = map(),\n      xhr = new XMLHttpRequest,\n      user = null,\n      password = null,\n      response,\n      responseType,\n      timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\"\n      && !(\"withCredentials\" in xhr)\n      && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n  \"onload\" in xhr\n      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n  function respond(o) {\n    var status = xhr.status, result;\n    if (!status && hasResponse(xhr)\n        || status >= 200 && status < 300\n        || status === 304) {\n      if (response) {\n        try {\n          result = response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function(e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);\n      else headers.set(name, value + \"\");\n      return request;\n    },\n\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return request;\n    },\n\n    timeout: function(value) {\n      if (!arguments.length) return timeout;\n      timeout = +value;\n      return request;\n    },\n\n    user: function(value) {\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n    },\n\n    password: function(value) {\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n    },\n\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function(value) {\n      response = value;\n      return request;\n    },\n\n    // Alias for send(\"GET\", …).\n    get: function(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n\n    // Alias for send(\"POST\", …).\n    post: function(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n\n    // If callback is non-null, it will be used for error and load events.\n    send: function(method, data, callback) {\n      xhr.open(method, url, true, user, password);\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n      if (responseType != null) xhr.responseType = responseType;\n      if (timeout > 0) xhr.timeout = timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n\n    abort: function() {\n      xhr.abort();\n      return request;\n    },\n\n    on: function() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n}\n\nfunction fixCallback(callback) {\n  return function(error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\"\n      ? xhr.response // null on error\n      : xhr.responseText; // \"\" on error\n}\n","import request from \"./request\";\n\nexport default function(defaultMimeType, response) {\n  return function(url, callback) {\n    var r = request(url).mimeType(defaultMimeType).response(response);\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return r.get(callback);\n    }\n    return r;\n  };\n}\n","import type from \"./type\";\n\nexport default type(\"application/json\", function(xhr) {\n  return JSON.parse(xhr.responseText);\n});\n","import type from \"./type\";\n\nexport default type(\"text/html\", function(xhr) {\n  return document.createRange().createContextualFragment(xhr.responseText);\n});\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import type from \"./type\";\n\nexport default type(\"text/plain\", function(xhr) {\n  return xhr.responseText;\n});\n","import type from \"./type\";\n\nexport default type(\"application/xml\", function(xhr) {\n  var xml = xhr.responseXML;\n  if (!xml) throw new Error(\"parse error\");\n  return xml;\n});\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","import request from \"./request\";\n\nexport default function(defaultMimeType, parse) {\n  return function(url, row, callback) {\n    if (arguments.length < 3) callback = row, row = null;\n    var r = request(url).mimeType(defaultMimeType);\n    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n    r.row(row);\n    return callback ? r.get(callback) : r;\n  };\n}\n\nfunction responseOf(parse, row) {\n  return function(request) {\n    return parse(request.responseText, row);\n  };\n}\n","import {csvParse} from \"d3-dsv\";\nimport dsv from \"./dsv\";\n\nexport default dsv(\"text/csv\", csvParse);\n","import {tsvParse} from \"d3-dsv\";\nimport dsv from \"./dsv\";\n\nexport default dsv(\"text/tab-separated-values\", tsvParse);\n","import { json } from 'd3-request';\nimport { Link } from 'gatsby';\nimport { FeatureCollection } from 'geojson';\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\n\nimport { Map } from '../../../src';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { data } from '../data';\n\nconst MapExample = () => {\n  const [loading, setLoading] = useState(true);\n\n  const [geojson, setGeoJson] = useState<FeatureCollection<any, any>>(null);\n  useEffect(() => {\n    const url = 'https://opendata.arcgis.com/datasets/8d3a9e6e7bd445e2bdcc26cdf007eac7_3.geojson';\n    json(url, (error, collection) => {\n      if (error) { throw error; }\n      setGeoJson(collection);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return <div>loading</div>;\n  }\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <h1>Map</h1>\n      <Link to=\"/\">Go back to the homepage</Link>\n      <div>\n        <Map\n          data={data}\n          geojson={geojson}\n          height={400}\n          width={400} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default MapExample;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  // @TODO make this a prop\n  const stacked = false;\n\n  const defaultProps: IHistogramProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: HTMLElement, props: Partial<IHistogramProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IHistogramProps>) {\n      this.props = merge<IHistogramProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n      if (newProps.colorScheme) {\n        this.props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height } = this.props;\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [height - (margin.top * 2) - xAxisHeight(this.props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { axis, margin, height } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(this.props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      if (stacked) {\n        innerScaleBand\n          .domain(['main'])\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      } else {\n        innerScaleBand\n          .domain(dataLabels)\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      }\n      const xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(this.props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, this.dataSets);\n\n      const yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (axis.y.scale === 'TIME' && axis.y.dateFormat) {\n        yAxis.tickFormat(timeFormat(axis.y.dateFormat));\n      }\n      this.yAxis\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(this.props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(this.props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip } = this.props;\n      const barWidth = this.barWidth();\n\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(this.props.colorScheme);\n      const gHeight = gridHeight(this.props);\n\n      const g = this.container\n        .selectAll('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append('g')\n        .merge(g)\n        .attr('transform', (d) => {\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + x(d[0].label);\n          return `translate(${xdelta}, 0)`;\n        })\n        .selectAll('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => this.props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('height', 0)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          const setIndex = bins.findIndex((b) => b === d.label);\n          const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? y(10)\n          //   : 0;\n          const offset = 0;\n          return gHeight - offset;\n        })\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d) => {\n          return innerScaleBand(d.groupLabel);\n        })\n        .attr('width', (d) => barWidth)\n        .attr('fill', (d, i) => colors(i))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          // const setIndex = bins.findIndex((b) => b === d.label);\n          // const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? 5\n          //   : 0;\n          const offset = 0;\n          return y(d.value + offset);\n        })\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem): string => {\n            const currentHeight = gHeight - (y(d.value));\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = this.xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (width / 2) + ' ,' +\n          ((height - xAxisHeight(this.props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = this.yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      const { data, visible } = this.props;\n      this.dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!this.dataSets[i]) {\n            this.dataSets[i] = [];\n          }\n          this.dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales(this.props.data);\n      drawGrid(x, y, this.gridX, this.gridY, this.props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, this.dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\n\nexport interface IChartAdaptor {\n  create: (el: Element | Text, props: { [key: string]: any }) => void;\n  update: (el: Element | Text, props: { [key: string]: any }) => void;\n  destroy: (el: Element | Text) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin?: number;\n  margin?: number;\n  width?: number;\n}\n\nexport interface IGrid {\n  x?: {\n    height?: number;\n    ticks?: number;\n    visible?: boolean;\n    style?: ISVGLineStyle;\n  };\n  y?: {\n    style?: ISVGLineStyle;\n    ticks?: number;\n    visible?: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray?: string;\n  linecap?: string;\n  width: number;\n}\n\nexport interface IAxes {\n  y?: IAxis;\n  x?: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n  grid?: IGrid;\n}\n\nexport interface IDomain {\n  max: number;\n  min: number;\n}\n\nexport interface IMargin {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n}\nexport interface IHistogramProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData;\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke'?: string;\n  'fill'?: string;\n  'opacity'?: number;\n  'stroke-width'?: number;\n  'stroke-opacity'?: number;\n  'shape-rendering'?: string;\n  'visible'?: boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\n\nexport interface IAxis {\n  dateFormat?: string;\n  numberFormat?: string;\n  ticks?: number;\n  tickValues?: number[];\n  height?: number;\n  label?: string;\n  margin?: number;\n  scale?: Scale;\n  style?: ISVGLineStyle;\n  text?: {\n    style: ISVGTextStyle;\n  };\n  width?: number;\n  tickSize?: number;\n  visible?: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IHistogramProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IHistogramProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import * as Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"/histogram\">Histogram</Link></Button>\n      <Button><Link to=\"/line\">Line Chart</Link></Button>\n      <Button><Link to=\"/pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"/joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import { extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleBand, scaleLinear, ScaleLinear, scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport { IChartAdaptor, IHistogramData, IHistogramDataSet } from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  let props: IJoyPlotProps;\n  let dataSets: IGroupData[];\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const defaultProps: IJoyPlotProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, newProps: Partial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid(props);\n      this.makeScales();\n      this.containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IJoyPlotProps>) {\n      props = merge<IJoyPlotProps>(defaultProps, newProps);\n      props.data = newProps.data;\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { bar, domain, margin, width, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => d.title);\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      this.yAxis\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      const { ...xLabelStyle } = axis.x.text.style;\n      const { ...yLabelStyle } = axis.y.text.style;\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     * @return {number} bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n      const groupedMargin = this.groupedMargin();\n\n      const maxItems = groupData.reduce((prev, next) => {\n        const thisMax = next.reduce((p, n) => n.length > p ? n.length : p, 0);\n        return thisMax > prev ? thisMax : prev;\n      }, 0);\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = this.containers[i]\n          .selectAll('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + x(d[0].label);\n\n            const ydelta = yOuterScaleBand(d[0].joyLabel);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => innerScaleBand(d.groupLabel))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(ix))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(ix);\n            }\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n        );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid(props: IJoyPlotProps) {\n      const { grid } = props;\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin, bar } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        this.gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        this.gridX.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(this.gridX.selectAll('.tick line'), grid.x.style);\n        attrs(this.gridX.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        this.gridY.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n        );\n\n        attrs(this.gridY.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        this.gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(this.gridY.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, newProps: IJoyPlotProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\n\nexport interface IJoyPlotProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData[];\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IJoyPlotProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IJoyPlotProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IJoyPlotProps) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IJoyPlotProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import { axisBottom, axisLeft } from 'd3-axis';\nimport * as get from 'lodash.get';\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n    gridX.call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n      .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n      .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n    );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import {\n  IAxes,\n  IHistogramData,\n} from '../../src';\nimport filterRange from '../../src/colors/filterRange';\n\nexport const grid = {\n  x: {\n    style: {\n      'stroke': '#eeAA00',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    height: 20,\n    style: {\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n  grid,\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const axis: IAxes = {\n  x: {\n    height: 20,\n    label: 'X Axis',\n    margin: 20,\n    text: {\n      style: {\n        'dy': '.35em',\n        'text-anchor': 'start',\n        'transform': 'rotate(90)',\n        'x': 0,\n        'y': 0,\n      },\n    },\n    tickSize: 0,\n  },\n  y: {\n    label: 'Y Axis!',\n    style: {\n      fill: 'none',\n      stroke: '#eeAA00',\n    },\n    text: {\n      style: {\n        fill: '#eeAA00',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    width: 50,\n  },\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const defaultProps = {\n    axis: {\n      x: {\n        height: 25,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        width: 20,\n      },\n    },\n    bar: {\n      height: 50,\n      margin: 10,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props = {}) {\n      this.props = merge(defaultProps, props);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, width - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = this.props;\n      return width - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = this.props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = this.props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = this.props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = this.props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || this.props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(i))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, colors)\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      if (stroke.dasharray !== '') {\n        barItem.attr('stroke-dasharray', stroke.dasharray);\n      }\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid(props: IHistogramProps) {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this._drawScales(this.props.data);\n      this._drawGrid(this.props);\n      this._drawBars(this.props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends React.Component<IHistogramProps, IChartState> {\n\n  private histogram: IChartAdaptor;\n  private ref;\n\n  public static defaultProps = {\n    axis: {},\n    bar: {\n      margin: 2,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.histogram.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   * @param {Object} props Props\n   */\n  public componentWillReceiveProps(props: IHistogramProps) {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number> | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { easeCubic } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport { buildScales } from './utils/scales';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const\n    lineProps = {\n      curveType: curveCatmullRom,\n      fill: false,\n      show: true,\n      stroke: '#005870',\n      strokeDashArray: '5 5',\n      strokeDashOffset: 0,\n    };\n\n  const pointProps: ISVGPoint = {\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const defaultProps: ILineChartProps = {\n    axis: {\n      x: {\n        height: 20,\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    className: 'line-chart-d3',\n    fx: easeCubic,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 250,\n    line: lineProps,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    point: pointProps,\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (curveType, yAxisWidth, x, y) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Node, props: Object = {}) {\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      this.makeScales();\n      [this.x, this.y] = buildScales(this.props.axis);\n      this.makeGrid();\n      this.container = svg\n        .append('g')\n        .attr('class', 'linechart-container');\n\n      this.lineContainer = this.container\n        .append('g')\n        .attr('class', 'line-container');\n      this._createLines(this.props.data);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartDataSet[]) {\n      const { axis, tip } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = this.container.selectAll('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet, i: number) => {\n        tipContent.html(() => this.props.tipContentFn([d], 0));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append('circle')\n        .attr('class', 'enter')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => this.y(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return this.x(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: Array<ILineChartDataSet<IChartPoint<number, number>>>) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = this.props;\n      const w = gridWidth(this.props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft(this.y);\n      if (axis.y.tickValues) {\n        yAxis.tickValues(axis.y.tickValues);\n      } else {\n        yAxis.ticks(axis.y.ticks);\n      }\n      if (axis.y.numberFormat) {\n        yAxis.tickFormat(format(axis.y.numberFormat));\n      }\n\n      const xAxis = axisBottom(this.x); // .ticks(axis.x.ticks);\n      if (axis.x.tickValues) {\n        xAxis.tickValues(axis.x.tickValues);\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        datum.data.forEach((d: IChartPoint<number, number>) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      this.x\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      this.y.domain(yDomain)\n        .range([height - xAxisHeight, 0]);\n\n      this.yAxis\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      this.xAxis\n        .attr('transform', `translate(${yAxisWidth},${(height - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    _createLines(data: ILineChartDataSet[]) {\n      data.forEach((d, i) => {\n        this.lineContainer.append('path')\n          .attr('class', `line-${i}`);\n      });\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.append('path')\n            .attr('class', `fill-${i}`);\n\n        });\n\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: ILineChartDataSet[]) {\n      const { axis } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // change the line\n      data.forEach((d, i) => {\n        this.lineContainer.select(`.line-${i}`)\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, this.x, this.y)(d.data as any))\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: ILineChartDataSet[]) {\n      const { axis, height } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => this.x(d.x) + yAxisWidth)\n        .y0((d) => height - xAxisHeight)\n        .y1((d: any) => this.y(d.y));\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.select(`.fill-${i}`)\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data as any))\n\n            ;\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: IHistogramDataSet[]): number {\n      return data.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, props) {\n      if (!props.data) {\n        return;\n      }\n      console.log('receive update', props);\n      this.props = merge(defaultProps, props);\n      console.log('update', this.props.point);\n      [this.x, this.y] = buildScales(this.props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data);\n      this.drawAreas(data);\n      drawGrid(this.x, this.y, this.gridX, this.gridY, this.props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IGrid,\n  IHistogramData,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineChartDataSet<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  label: string;\n  point?: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line?: {\n    show: boolean;\n    fill?: {\n      show: boolean;\n      fill: string;\n    };\n    curveType?: any;\n    stroke?: string;\n    strokeDashOffset?: number;\n    strokeDashArray?: string;\n  };\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps {\n  axis?: IAxes;\n  className?: string;\n  data?: ILineChartDataSet[];\n  fx?: (n: number) => number;\n  grid?: IGrid;\n  height?: number | string;\n  line?: any;\n  margin?: IMargin;\n  point?: ISVGPoint;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<{ x: string | number, y: string | number }>;\n  width?: number | string;\n}\n\nclass LineChart extends React.Component<ILineChartProps, IState> {\n\n  private chart;\n  private ref;\n\n  constructor(props: ILineChartProps) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): ILineChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  public getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import {\n  geoMercator,\n  geoPath,\n} from 'd3-geo';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport { FeatureCollection } from 'geojson';\n\nimport { IChartAdaptor } from './Histogram';\nimport { IMapProps } from './Map';\n\nexport const mapD3 = ((): IChartAdaptor => {\n  let svg;\n\n  const defaultProps: IMapProps = {\n    className: 'map-d3',\n    data: [],\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: 200,\n  };\n\n  const MapD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props: Partial<IMapProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IMapProps>) {\n      this.props = merge<IMapProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g');\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      data: any,\n      geojson: FeatureCollection<any, any>,\n    ) {\n\n      const { width, height } = this.props;\n      const zoom = 3;\n      const projection = geoMercator()\n        .scale((width / 2 / Math.PI) * zoom)\n        .translate([(width / 2), (height / 2)]);\n\n      const geoGenerator = geoPath()\n        .projection(projection);\n\n      // const g = this.container\n      // .selectAll('g')\n      // .data(groupData);\n\n      // Join the FeatureCollection's features array to path elements\n      const u = this.container\n        .selectAll('path')\n        .data(geojson.features);\n\n      // Create path elements and update the d attribute using the geo generator\n      u.enter()\n        .append('path')\n        .attr('d', geoGenerator);\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IMapProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      const { data, geojson } = this.props;\n      this.updateChart(data, geojson);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return MapD3;\n});\n","import { FeatureCollection } from 'geojson';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { mapD3 } from './MapD3';\n\nexport interface IMapProps {\n  className?: string;\n  data: any;\n  geojson: FeatureCollection<any, any>;\n  height: number;\n  width: number | string;\n}\n\n/**\n * Map component\n */\nclass Map extends React.Component<IMapProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IMapProps> = {\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IMapProps) {\n    super(props);\n    this.chart = mapD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IMapProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"map-chart-container\"></div>);\n  }\n}\n\nexport default Map;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport {\n  arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\n\nexport const pieChartD3 = ((): IChartAdaptor => {\n\n  let svg;\n  let tipContainer;\n  let tipContent;\n\n  const defaultProps: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      left: 10,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const PieChartD3 = {\n\n    create(el: HTMLElement, props: Partial<IPieChartProps> = {}) {\n      this.props = merge(defaultProps, { ...props });\n      this.previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      this.containers = [];\n      this.previousData.forEach((dataSet, i) => {\n        this.drawChartBg(this.props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: HTMLElement, props: Partial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      if (props.colorScheme) {\n        this.props.colorScheme = props.colorScheme;\n      }\n      // this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = this.props;\n      this.dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      this.dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', this.props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      this.previousData = this.dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = this.props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!this.containers[i]) {\n        this.containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = this.props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => {\n          return d.count;\n        });\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(this.previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = this.containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each(function (d, j) { this._current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = this.containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      const gLabel = path2.enter().append('text')\n        .attr('class', 'label')\n        .each(function () {\n          // Store initial offset incase we change chart heights.\n          this._height = height;\n          this._width = width;\n        })\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each(function (d, j) {\n          // Store current value to work out fx transition opacities\n          this._current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d, ix, c) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.count === 0 || c[ix]._current.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(thisArc) {\n  return function (d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\n\ninterface ILabels {\n  display: boolean;\n  displayFn?: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor?: string;\n  className?: string;\n  colorScheme?: string[];\n  donutWidth?: number;\n  height: number;\n  labels?: ILabels;\n  margin?: IMargin;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends React.Component<IPieChartProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IPieChartProps> = {\n    backgroundColor: '#ddd',\n    donutWidth: 0,\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IPieChartProps) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IPieChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport { IChartPoint } from './LineChart';\nimport {\n  IScatterPlotProps,\n  ScatterPlotData,\n} from './ScatterPlot';\n\nexport const scatterPlotD3 = (() => {\n  let svg;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const defaultProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     * @param {Element} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: Element, props: IScatterPlotProps = defaultProps) {\n      this.props = merge(defaultProps, props);\n      this.update(el, props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Element} el Dom container node\n     * @param {Array} data Chart data\n     */\n    _makeSvg(el: Element, data: ScatterPlotData) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height,\n        legendWidth, padding } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(this.props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data) {\n      const { height, padding, width } = this.props;\n      const xSize = width / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (d) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = this.props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (width + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     * @param {Object} traits Chart data\n     * @param {Number} size Chart size\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = this.props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       * @param {Object} p Point\n       */\n      function plot(p: IChartPoint) {\n        const plotCell = select(this);\n        let circle;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       * @param {Object} a point\n       * @param {Object} b point\n       * @return {Array} data\n       */\n      function cross(a, b) {\n        const c = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {Node} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: Element, props: IScatterPlotProps) {\n      this.props = { ...this.props, ...props };\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = this.props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = width / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import * as React from 'react';\nimport { Component } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { scatterPlotD3 } from './ScatterPlotD3';\n\ninterface IChartState {\n  choices: string[];\n  data: any[];\n  height: number;\n  distModels: string[];\n  split: string;\n  parentWidth: number;\n  width: number | string;\n}\n\nexport type ScatterPlotData = any[];\n\nexport interface IScatterPlotProps {\n  choices?: any[];\n  className?: string;\n  chartSize?: number;\n  data: ScatterPlotData;\n  delay?: number;\n  distModels?: string[];\n  duration?: number;\n  height: number;\n  legendWidth?: number;\n  colorScheme?: string[];\n  padding?: number;\n  radius?: number;\n  split?: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<IScatterPlotProps, IChartState> {\n\n  private chart;\n  private ref;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      choices: [],\n      data: [],\n      distModels: [],\n      height: this.props.height,\n      parentWidth: 400,\n      split: '',\n      width: this.props.width,\n    };\n  }\n\n  private handleResize() {\n    const { legendWidth, padding } = this.props;\n    const chartWidth = Math.max(200, this.ref.offsetWidth - padding - legendWidth);\n    const chartHeight = Math.max(200, window.innerHeight - padding -\n      this.ref.getBoundingClientRect().top);\n    const width = Math.min(chartHeight, chartWidth);\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  private getChartState(): IChartState {\n    let { width } = this.props;\n    const { data, choices, split, distModels, height } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      choices,\n      data,\n      distModels,\n      height,\n      parentWidth: this.state.parentWidth,\n      split,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: IScatterPlotProps) {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import filterRange from './colors/filterRange';\nimport Histogram, {\n  IAxes, IHistogramBar, IHistogramData, IHistogramDataSet,\n  IHistogramProps, IStroke,\n} from './Histogram';\n\nimport HorizontalHistogram from './HorizontalHistogram';\nimport JoyPlot from './JoyPlot';\nimport Legend from './Legend';\nimport LineChart, { IChartPoint, ILineChartDataSet, ILineChartProps } from './LineChart';\nimport Map from './Map';\nimport PieChart from './PieChart';\nimport ScatterPlot from './ScatterPlot';\n\nexport {\n  filterRange,\n  JoyPlot,\n  Histogram,\n  HorizontalHistogram,\n  Legend,\n  LineChart,\n  Map,\n  PieChart,\n  ScatterPlot,\n  ILineChartDataSet,\n  IChartPoint,\n  ILineChartProps,\n  IAxes,\n  IHistogramBar,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n  IStroke,\n};\n"],"sourceRoot":""}