{"version":3,"sources":["webpack:///./src/pages/pie.tsx"],"names":["initialState","data","data2","donutWidth","height","labels","displayFn","display","visible","width","reducer","draft","action","type","key","hasOwnProperty","show","PieExample","useState","tab","setTab","useImmerReducer","state","dispatch","spreadSheetData","dataToSpreadSheet","chart","colorScheme","theme","title","description","variant","container","spacing","className","item","xs","md","onSelect","component","value","onChange","e","v","label","valueRenderer","cell","sheetRenderer","props","counts","map","count","children","onCellsChanged","changes","forEach","row","col","bins","Number","aria-labelledby","step","_","control","checked","color"],"mappings":"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","file":"component---src-pages-pie-tsx-6dc80ba3e77972ee268e.js","sourcesContent":["import { Draft } from 'immer';\nimport React, { useState } from 'react';\nimport ReactDataSheet from 'react-datasheet';\nimport { useImmerReducer } from 'use-immer';\n\nimport {\n  Card,\n  CardContent,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  Slider,\n  Switch,\n  Tab,\n  Tabs,\n  Typography,\n} from '@material-ui/core';\n\nimport PieChart, { IPieChartProps } from '../../../src/legacy/PieChart';\nimport Legend from '../../../src/Legend';\nimport JSXToString from '../components/JSXToString';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { TabContainer } from '../components/TabContainer';\nimport {\n  data2,\n  theme,\n} from '../data';\nimport { dataToSpreadSheet } from './histogram';\n\ntype IInitialState = Pick<IPieChartProps, 'data' | 'donutWidth' | 'height' | 'labels' | 'visible' | 'width'>;\n\nconst initialState: IInitialState = {\n  data: data2,\n  donutWidth: 0,\n  height: 200,\n  labels: {\n    displayFn: () => '',\n    display: false,\n  },\n  visible: {},\n  width: 300,\n};\n\ntype Actions = { type: 'toggleVisible'; key: string }\n  | { type: 'setData', data: IInitialState['data'] }\n  | { type: 'setDonutWidth', width: number }\n  | { type: 'showLabels', show: boolean };\n\nfunction reducer(draft: Draft<IInitialState>, action: Actions) {\n  switch (action.type) {\n    case 'toggleVisible':\n      draft.visible[action.key] = draft.visible.hasOwnProperty(action.key)\n        ? !draft.visible[action.key]\n        : false;\n      return;\n    case 'setData':\n      draft.data = action.data;\n      return;\n    case 'setDonutWidth':\n      draft.donutWidth = action.width;\n      return;\n    case 'showLabels':\n      draft.labels.display = action.show;\n      return;\n  }\n}\n\nconst PieExample = () => {\n  const [tab, setTab] = useState(0);\n  const [state, dispatch] = useImmerReducer(reducer, initialState);\n\n  const spreadSheetData = dataToSpreadSheet(state.data);\n  const chart = <PieChart\n    width={state.width}\n    height={state.height}\n    donutWidth={state.donutWidth}\n    labels={state.labels}\n    data={state.data}\n    colorScheme={theme}\n    visible={state.visible} />;\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <Typography variant=\"h2\">Pie Chart</Typography>\n      <div>\n        <Grid container spacing={5} className=\"wrapper\">\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                {chart}\n                <Legend\n                  data={state.data}\n                  theme={theme}\n                  onSelect={(key) => dispatch({ type: 'toggleVisible', key })}\n                  visible={state.visible}\n                />\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <JSXToString component={chart} />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n                  <Tab label=\"Data\" />\n                  <Tab label=\"Styling\" />\n                </Tabs>\n                {\n                  tab === 0 && <TabContainer>\n                    <ReactDataSheet data={spreadSheetData}\n                      valueRenderer={(cell) => cell.value}\n                      sheetRenderer={(props) => (\n                        <table className={props.className}>\n                          <thead>\n                            <tr>\n                              <th className=\"action-cell\">Bin</th>\n                              {\n                                state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n                                  {count.label}\n                                </th>))\n                              }\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {props.children}\n                          </tbody>\n                        </table>\n                      )}\n                      onCellsChanged={(changes) => {\n                        changes.forEach(({ cell, row, col, value }) => {\n                          if (col === 0) {\n                            state.data.bins[row] = value;\n                          } else {\n                            state.data.counts[col - 1].data[row] = Number(value);\n                          }\n                        });\n                        dispatch({ type: 'setData', data: state.data });\n                      }} />\n                  </TabContainer>\n                }\n                {\n                  tab === 1 && <TabContainer>\n                    <Grid container>\n                      <Grid item xs={12} md={6}>\n                        <FormGroup>\n                          <Typography>Donut <small>({state.donutWidth})</small></Typography>\n                          <Slider\n                            value={state.donutWidth}\n                            aria-labelledby=\"label\"\n                            step={1}\n                            onChange={(_, value) => dispatch({ type: 'setDonutWidth', width: Number(value) })}\n                          />\n                        </FormGroup>\n                        <FormGroup>\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                checked={state.labels.display}\n                                color=\"primary\"\n                                onChange={(_, value) => {\n                                  dispatch({ type: 'showLabels', show: value });\n                                }}\n                              />\n                            }\n                            label=\"Show labels\"\n                          />\n                        </FormGroup>\n                      </Grid>\n                    </Grid>\n                  </TabContainer>\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nexport default PieExample;\n\n"],"sourceRoot":""}