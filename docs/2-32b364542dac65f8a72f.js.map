{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///../node_modules/color/index.js","webpack:///../node_modules/color-name/index.js","webpack:///../node_modules/color-convert/conversions.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///../node_modules/color-string/index.js","webpack:///../node_modules/simple-swizzle/index.js","webpack:///../node_modules/is-arrayish/index.js","webpack:///../node_modules/color-convert/index.js","webpack:///../node_modules/color-convert/route.js"],"names":["$export","__webpack_require__","aFunction","toObject","fails","$sort","sort","test","P","F","undefined","comparefn","call","this","colorString","convert","_slice","slice","skippedModels","hashedModelKeys","Object","keys","forEach","model","labels","join","limiters","Color","obj","Error","i","channels","color","valpha","result","get","value","length","newArr","zeroArray","splice","indexOf","alpha","hashedKeys","JSON","stringify","push","limit","Math","max","min","freeze","getset","channel","modifier","Array","isArray","m","val","arguments","maxfn","v","arr","prototype","toString","string","toJSON","places","self","to","rgb","args","round","concat","percentString","percent","array","object","unitArray","unitObject","r","g","b","map","num","Number","toFixed","roundTo","roundToPlace","red","green","blue","hue","saturationl","lightness","saturationv","chroma","gray","white","wblack","cyan","magenta","yellow","black","x","y","z","l","a","keyword","hex","rgbNumber","luminosity","lum","chan","pow","contrast","color2","lum1","lum2","level","contrastRatio","isDark","isLight","negate","lighten","ratio","hsl","darken","saturate","desaturate","whiten","hwb","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","p","w","w1","w2","newAlpha","raw","module","exports","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","cssKeywords","reverseKeywords","key","hasOwnProperty","hsv","cmyk","xyz","lab","lch","ansi16","ansi256","hcg","apple","defineProperty","h","delta","rdif","gdif","bdif","s","diff","diffc","c","k","reversed","currentClosestKeyword","currentClosestDistance","Infinity","distance","t1","t2","t3","smin","lmin","hi","floor","f","q","t","sl","vmin","n","wh","bl","y2","x2","z2","atan2","PI","sqrt","hr","cos","sin","ansi","mult","rem","toUpperCase","substring","match","split","char","integer","parseInt","mg","pure","method","arg","colorNames","swizzle","reverseNames","name","cs","clamp","hexDouble","str","toLowerCase","hexAlpha","i2","parseFloat","isNaN","rgba","hsla","hwba","isArrayish","results","len","wrap","fn","Function","getOwnPropertyDescriptor","constructor","conversions","route","fromModel","routes","toModel","wrappedFn","conversion","wrapRounded","wrapRaw","deriveBFS","graph","models","parent","buildGraph","queue","current","pop","adjacents","adjacent","node","unshift","link","from","wrapConversion","path","cur"],"mappings":"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","file":"2-32b364542dac65f8a72f.js","sourcesContent":["'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (typeof obj === 'undefined') {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n"],"sourceRoot":""}