{"version":3,"sources":["webpack:///./src/pages/histogram.tsx","webpack:///../src/HistogramD3.ts","webpack:///../src/Histogram.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///../src/colors/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///../src/d3/attrs.ts","webpack:///../src/tip.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///../src/colors/filterRange.ts","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/grid.ts","webpack:///./src/data.ts","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/MapD3.ts","webpack:///../src/Map.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///../src/index.ts"],"names":["initialSate","chartType","data","reducer","state","action","type","Object","assign","Error","dataToSpreadSheet","datum","speadSheetData","bins","forEach","b","i","value","counts","c","d","x","HistogramExample","_useState","useState","_useReducer","useReducer","_useState2","Histogram","HorizontalHistogram","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","description","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","variant","histogramD3","svg","tipContainer","tipContent","y","scaleLinear","scaleBand","innerScaleBand","defaultProps","axis","height","label","margin","style","fill","shape-rendering","stroke","stroke-opacity","stroke-width","text","ticks","width","bar","groupMargin","className","colorScheme","delay","domain","max","min","duration","grid","visible","left","top","color","dasharray","linecap","tip","tips","tipContentFn","create","el","props","this","mergeProps","_makeSvg","makeGrid","makeScales","container","append","attr","update","newProps","merge","selectAll","remove","childNodes","getElementsByTagName","length","removeChild","_this$props","scale","select","r","makeTip","valuesCount","reduce","appendDomainRange","yDomain","_this$props2","allCounts","prev","next","concat","map","n","thisExtent","extent","hasOwnProperty","yRange","xAxisHeight","range","xAxis","yAxis","xAxisLabel","yAxisLabel","_drawScales","_this$props3","w","gridWidth","dataLabels","rangeRound","paddingInner","groupedMargin","bandwidth","barMargin","axisBottom","tickSize","get","undefined","tickValues","filter","dateFormat","tickFormat","timeFormat","yAxisWidth","call","dataSets","axisLeft","yTickSize","transition","attrs","m","barWidth","updateChart","groupData","_this","_this$props4","colors","scaleOrdinal","gHeight","gridHeight","g","bars","enter","stackIndex","setIndex","findIndex","on","ix","html","fx","in","move","out","groupLabel","currentHeight","exit","xText","yText","gridX","gridY","_this2","_this$props5","count","push","drawGrid","destroy","_React$Component","chart","parentWidth","handleResize","elem","getDOMNode","ref","offsetWidth","setState","getChartState","componentDidMount","_this3","window","addEventListener","e","componentDidUpdate","rest","children","objectWithoutPropertiesLoose_default","componentWillUnmount","removeEventListener","ReactDOM","render","_this4","react","React","rgb","darker","toString","toFixed","__webpack_require__","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","object","string","isRequired","func","module","exports","require","default","selection","keys","k","d3_selection__WEBPACK_IMPORTED_MODULE_0__","event","pageX","pageY","selector","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","SEO","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","name","property","author","join","arrayOf","array","Color","hsl","luminosity","v","index","self","indexOf","sort","Math","random","Header","siteTitle","react_default","index_es","position","gatsby_browser_entry","to","Layout","Fragment","header","flexGrow","padding","paddingTop","Date","getFullYear","href","_755544856","node","joyPlotD3","yOuterScaleBand","joyTitle","containers","_props","thisCounts","p","item","_props5","Number","getBins","Array","from","Set","_props6","yLabels","yOuterBounds","_props7","_props8","_props9","borderColors","thisMax","joyLabel","_drawGrid","_props10","axisWidth","offset","make_x_gridlines","make_y_gridlines","_props11","lineData","d3_axis__WEBPACK_IMPORTED_MODULE_0__","lodash_get__WEBPACK_IMPORTED_MODULE_1__","_d3_attrs__WEBPACK_IMPORTED_MODULE_2__","makeXGridlines","makeYGridlines","data2","_src_colors_filterRange__WEBPACK_IMPORTED_MODULE_0__","filterRange","horizontalHistogramD3","xDomain","xRange","h","_drawBars","info","set","drawDataSet","barHeight","setCount","barItem","_this$props6","all","multiLineOffset","currentWidth","gy","histogram","componentWillReceiveProps","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineProps","curveType","curveCatmullRom","show","strokeDashArray","strokeDashOffset","pointProps","radius","easeCubic","line","point","datumProps","_buildScales","lineContainer","_createLines","_drawDataPointSet","getYAxisWidth","pointContainer","points","dx","ys","xs","numberFormat","format","getXAxisHeight","parsedY","parsedX","_drawLines","curve","drawAreas","area","y0","y1","console","log","_buildScales2","timeParse","mapD3","geojson","features","projection","geoMercator","PI","translate","geoGenerator","geoPath","Map","pieChartD3","backgroundColor","donutWidth","labels","display","displayFn","previousData","dataSet","drawChartBg","drawCharts","outerRadius","_this$props2$donutWid","innerRadius","_this$props3$donutWid","theme","drawChart","tau","bgArc","arc","startAngle","endAngle","background","thisPie","pie","arcs","thisArc","path","j","each","_current","attrTween","interpolate","t","arcTween","path2","_height","_width","centroid","PieChart","scatterPlotD3","yScale","xScale","domainByTrait","choices","legendWidth","xSize","ySize","_drawLegend","split","legend","cell","_drawPoints","traits","nx","cross","plotCell","values","distModels","trait","ScatterPlot","_Component","chartWidth","chartHeight","innerHeight","getBoundingClientRect","Component","src_HorizontalHistogram","src_Map"],"mappings":"+NAkDMA,EAA6B,CACjCC,UAAW,YACXC,eAMF,SAASC,EAAQC,EAAsBC,GACrC,OAAQA,EAAOC,MACb,IAAK,eACH,OAAAC,OAAAC,OAAA,GAAYJ,EAAZ,CAAmBH,UAAWI,EAAOJ,YACvC,IAAK,UACH,OAAAM,OAAAC,OAAA,GAAYJ,EAAZ,CAAmBF,KAAMG,EAAOH,OAClC,QACE,MAAM,IAAIO,OAIT,IAAMC,EAAoB,SAACC,GAChC,IAAMC,EAAsB,GAgB5B,OAdAD,EAAME,KAAKC,QAAQ,SAACC,EAAGC,GAChBJ,EAAeI,KAClBJ,EAAeI,GAAK,IAEtBJ,EAAeI,GAAG,GAAK,CAAEC,MAAOF,KAElCJ,EAAMO,OAAOJ,QAAQ,SAACK,EAAGH,GACvBG,EAAEjB,KAAKY,QAAQ,SAACM,EAAGC,GACZT,EAAeS,KAClBT,EAAeS,GAAK,IAEtBT,EAAeS,GAAGL,EAAI,GAAK,CAAEC,MAAOG,OAGjCR,GAsHMU,UAnHU,WAAM,IAAAC,EACPC,mBAAS,GADFC,GAAAF,EAAA,GAAAA,EAAA,GAEHG,qBAAWvB,EAASH,IAAvCI,EAFsBqB,EAAA,GAAAE,GAAAF,EAAA,GAGCD,mBAAS,KAHVG,EAAA,GAAAA,EAAA,GAKNjB,EAAkBN,EAAMF,MAEb,cAApBE,EAAMH,UAA4B2B,IAAYC,IAC5D,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,YAAYC,YAAY,KACnCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,MAApB,aACAR,EAAAC,EAAAC,cAAA,8OC7DOO,EAAe,WAC1B,IAAIC,EACAC,EACAC,EACEC,EAAIC,cACJvB,EAAIwB,cACJC,EAAiBD,cAIjBE,EAAgC,CACpCC,KAAM,CACJ3B,EAAG,CACD4B,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,UAIZV,EAAG,CACDO,MAAO,GACPE,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,SAGVM,MAAO,GACPC,MAAO,KAGXC,IAAK,CACHC,YAAa,GACbX,OAAQ,EACRS,MAAO,IAETG,UAAW,eACXC,gBACA9D,KAAM,CACJW,KAAM,GACNK,OAAQ,IAEV+C,MAAO,EACPC,OAAQ,CACNC,IAAK,KACLC,IAAK,MAEPC,SAAU,IACVC,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPlB,OAAQ,CACNmB,MAAO,UACPC,UAAW,GACXC,QAAS,OACThB,MAAO,GAETiB,IAAKC,IACLrC,aAAc,OACdsC,aAAc,SAAClE,EAAgBG,EAAWI,GAA5B,OACZP,EAAKG,GAAK,SAAWI,GACvBmD,QAAS,GACTX,MAAO,KA2VT,MAxVoB,CAIlBoB,OAJkB,SAIXC,EAAiBC,QAAsC,IAAtCA,MAAkC,IACxDC,KAAKC,WAAWF,GAChBC,KAAKE,SAASJ,GACdE,KAAKG,WACLH,KAAKI,aACLJ,KAAKK,UAAYhD,EACdiD,OAAO,KACPC,KAAK,QAAS,uBAEjBP,KAAKQ,OAAOV,EAAIC,IAGlBE,WAhBkB,SAgBPQ,GACTT,KAAKD,MAAQW,EAAuB9C,EAAc6C,GAClDT,KAAKD,MAAMhF,KAAO0F,EAAS1F,KACvB0F,EAAS5B,cACXmB,KAAKD,MAAMlB,YAAc4B,EAAS5B,cAQtCqB,SA5BkB,SA4BTJ,GACP,GAAIzC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANnB,IAAAI,EASkCjB,KAAKD,MAA1C/B,EATGiD,EASHjD,OAAQS,EATLwC,EASKxC,MAAOX,EATZmD,EASYnD,OAAQc,EATpBqC,EASoBrC,UACzBsC,EACD,EAAKlD,EAAOqB,KAAOZ,EADlByC,EAED,EAAKlD,EAAOsB,IAAMxB,EAIvBT,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,GACd8B,KAAK,SAAUzC,GACfyC,KAAK,UAJF,OAIoB9B,EAJpB,IAI6BX,GAChCwC,OAAO,KACPC,KAAK,YANF,aAM4BvC,EAAOqB,KANnC,IAM2CrB,EAAOsB,IANlD,WAMgE4B,EANhE,IAM2EA,EAN3E,KAQN,IAAME,EAAIC,YAAQrB,KAAKD,MAAMzC,aAAcA,GAC3CC,EAAa6D,EAAE7D,WACfD,EAAe8D,EAAE9D,cAGnBgE,YAzDkB,SAyDNvF,GACV,OAAOA,EAAOwF,OAAO,SAAC3E,EAAWhB,GAC/B,OAAOA,EAAEb,KAAKgG,OAASnE,EAAIhB,EAAEb,KAAKgG,OAASnE,GAC1C,IAOL4E,kBAnEkB,SAmEAN,EAAoCnG,GACpD,IAAM0G,EAAoB,GADkDC,EAEzC1B,KAAKD,MAAhChB,EAFoE2C,EAEpE3C,OAAQf,EAF4D0D,EAE5D1D,OAAQF,EAFoD4D,EAEpD5D,OAClB6D,EAAsB5G,EAAKwG,OAAO,SAACK,EAAgBC,GACvD,SAAAC,OAAWF,EAASC,EAAKE,IAAI,SAACC,GAAD,OAAOA,EAAElG,UACrC,CAAC,IAEEmG,EAAaC,YAAOP,EAAW,SAAC1F,GAAD,OAAOA,IAC5CwF,EAAQ,GAAK1C,GAAUA,EAAOoD,eAAe,QAAyB,OAAfpD,EAAOC,IAC1DD,EAAOC,IACPiD,EAAW,GACfR,EAAQ,GAAK1C,GAAUA,EAAOoD,eAAe,QAAyB,OAAfpD,EAAOE,IAC1DF,EAAOE,IACPgD,EAAW,GACf,IAAMG,EAAS,CAACtE,EAAuB,EAAbE,EAAOsB,IAAW+C,YAAYrC,KAAKD,MAAMlC,MAAO,GAC1EqD,EAAMoB,MAAMF,GACTrD,OAAO0C,IAGZrB,WAtFkB,WAuFhBJ,KAAKuC,MAAQlF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAC3CP,KAAKwC,MAAQnF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAE3CP,KAAKyC,WAAapF,EAAIiD,OAAO,KAC7BN,KAAK0C,WAAarF,EAAIiD,OAAO,MAM/BqC,YAjGkB,SAiGN5H,GAAsB,IAAA6H,EACC5C,KAAKD,MAA9BlC,EADwB+E,EACxB/E,KAAMG,EADkB4E,EAClB5E,OAAQF,EADU8E,EACV9E,OAChBwD,EAActB,KAAKsB,YAAYvG,EAAKgB,QACpC8G,EAAIC,YAAU9C,KAAKD,OAEnBgD,EAAahI,EAAKgB,OAAOgG,IAAI,SAAC/F,GAAD,OAAOA,EAAE+B,QAE5C7B,EACG6C,OAAOhE,EAAKW,MACZsH,WAAW,CAAC,EAAGH,IACfI,aAAajD,KAAKkD,iBAQnBvF,EACGoB,OAAOgE,GACPC,WAAW,CAAC,EAAG9G,EAAEiH,cACjBF,aAAajD,KAAKoD,aAEvB,IAAMb,EAAQc,YAAWnH,GAEnBoH,EAAWC,EAAI1F,EAAM,kBAAc2F,QACxBA,IAAbF,EACFf,EAAMe,SAASA,GAEXT,EAAIvB,EAAc,IAEpBiB,EAAMkB,WAAWvH,EAAE6C,SAAS2E,OAAO,SAACzH,EAAGJ,GAAJ,QAAYA,EAAI,OAGlC,SAAjBgC,EAAK3B,EAAEgF,OAAoBrD,EAAK3B,EAAEyH,YACpCpB,EAAMqB,WAAWC,YAAWhG,EAAK3B,EAAEyH,aAGrC3D,KAAKuC,MACFhC,KAAK,YAAa,cAAgBuD,YAAWjG,GAAQA,EAAKL,EAAES,MAAM,iBAAmB,KACnFH,EAASuE,YAAYrC,KAAKD,MAAMlC,MAAuB,EAAdG,EAAOqB,MAAa,KAC/D0E,KAAKxB,GAERvC,KAAKwB,kBAAkBhE,EAAGwC,KAAKgE,UAE/B,IAAMxB,EAAQyB,YAASzG,GAAGgB,MAAMX,EAAKL,EAAEgB,OAEjC0F,EAAYX,EAAI1F,EAAM,kBAAc2F,QACxBA,IAAdU,GACF1B,EAAMc,SAASY,GAEI,SAAjBrG,EAAKL,EAAE0D,OAAoBrD,EAAKL,EAAEmG,YACpCnB,EAAMoB,WAAWC,YAAWhG,EAAKL,EAAEmG,aAErC3D,KAAKwC,MACFjC,KAAK,YAAa,aAAeuD,YAAWjG,GAAQ,QACpDsG,aACAJ,KAAKvB,GAER4B,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAKL,EAAES,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAKL,EAAEe,KAAKN,OAEvDmG,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAK3B,EAAE+B,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAK3B,EAAEqC,KAAKN,QAMzDiF,cAtKkB,WAuKhB,IAAMmB,EAAId,EAAIvD,KAAKD,MAAMrB,IAAK,cAAe,IAC7C,OAAO2F,GAAK,GAAKA,GAAK,EAClBA,EACA,IAGNjB,UA7KkB,WA8KhB,IAAMiB,EAAId,EAAIvD,KAAKD,MAAMrB,IAAK,SAAU,GACxC,OAAO2F,GAAK,GAAKA,GAAK,EAClBA,EACA,IAGNC,SApLkB,WAqLhB,OAAO3G,EAAewF,aAMxBoB,YA3LkB,SA4LhB7I,EACA8I,GACA,IAAAC,EAAAzE,KAAA0E,EAC8D1E,KAAKD,MAA3DlC,EADR6G,EACQ7G,KAAMC,EADd4G,EACc5G,OAAQW,EADtBiG,EACsBjG,MAAOT,EAD7B0G,EAC6B1G,OAAQc,EADrC4F,EACqC5F,MAAOI,EAD5CwF,EAC4CxF,SAAUQ,EADtDgF,EACsDhF,IAChD4E,EAAWtE,KAAKsE,WAGhBK,EAASC,YAAa5E,KAAKD,MAAMlB,aACjCgG,EAAUC,YAAW9E,KAAKD,OAE1BgF,EAAI/E,KAAKK,UACZM,UAAU,KACV5F,KAAKyJ,GAEFQ,EAAOD,EAAEE,QACZ3E,OAAO,KACPI,MAAMqE,GACNxE,KAAK,YAAa,SAACtE,GAIlB,oBAHe6H,YAAWjG,GACtBA,EAAKL,EAAES,MAAM,gBACb/B,EAAED,EAAE,GAAG8B,QACX,SAED4C,UAAU,QACV5F,KAAK,SAACkB,GAAD,OAAOA,IAUf+I,EACGC,QACA3E,OAAO,QACPC,KAAK,SAAU,GACfA,KAAK,IAAK,SAACtE,EAAmBiJ,GAC7B,IAAMC,EAAWzJ,EAAK0J,UAAU,SAACxJ,GAAD,OAAOA,IAAMK,EAAE8B,QAC3ByG,EAAUW,GAM9B,OAAON,EADQ,IAGhBtE,KAAK,QAAS,OACd8E,GAAG,YArBc,SAACpJ,EAAmBJ,GACtC,IAAMyJ,EAAK5J,EAAK0J,UAAU,SAACxJ,GAAD,OAAOA,IAAMK,EAAE8B,QACzCR,EAAWgI,KAAK,kBAAMd,EAAK1E,MAAMH,aAAalE,EAAM4J,EAAIrJ,EAAEH,SAC1D4D,EAAI8F,GAAGC,GAAGnI,KAmBT+H,GAAG,YAAa,kBAAM3F,EAAI8F,GAAGE,KAAKpI,KAClC+H,GAAG,WAAY,kBAAM3F,EAAI8F,GAAGG,IAAIrI,KAChCoD,MAAMsE,GACNzE,KAAK,IAAK,SAACtE,GACV,OAAO0B,EAAe1B,EAAE2J,cAEzBrF,KAAK,QAAS,SAACtE,GAAD,OAAOqI,IACrB/D,KAAK,OAAQ,SAACtE,EAAGJ,GAAJ,OAAU8I,EAAO9I,KAC9BsI,aACAjF,SAASA,GACTJ,MAAMA,GACNyB,KAAK,IAAK,SAACtE,EAAmBiJ,GAQ7B,OAAO1H,EAAEvB,EAAEH,MADI,KAIhByE,KAAK,mBACJ,SAACtE,GACC,IAAM4J,EAAgBhB,EAAWrH,EAAEvB,EAAEH,OACrC,OAAUwI,EAAV,MAAwBuB,EAAxB,IAAyCvB,IAE5C/D,KAAK,SAAU,SAACtE,GAAD,OAA+B4I,EAAWrH,EAAEvB,EAAEH,SAEhEkJ,EAAKc,OAAOlF,SACZmE,EAAEe,OAAOlF,SAET,IAAMmF,EAAQ/F,KAAKyC,WAChB9B,UAAU,QACV5F,KAAK,CAAC8C,EAAK3B,EAAE6B,QAEhBgI,EAAMd,QAAQ3E,OAAO,QAClBC,KAAK,QAAS,gBACdG,MAAMqF,GACNxF,KAAK,YACJ,aAAgB9B,EAAQ,EAAK,MAC3BX,EAASuE,YAAYrC,KAAKD,MAAMlC,MAAuB,EAAdG,EAAOqB,KAAaxB,EAAK3B,EAAE8B,QAAU,KACjFC,MAAM,cAAe,UACrBM,KAAK,SAACtC,GAAD,OAAOA,IAEf,IAAM+J,EAAQhG,KAAK0C,WAChB/B,UAAU,QACV5F,KAAK,CAAC8C,EAAKL,EAAEO,QAEhBiI,EAAMf,QAAQ3E,OAAO,QAClBC,KAAK,QAAS,gBACdG,MAAMsF,GACNzF,KAAK,YAAa,eAClBA,KAAK,IAAK,GACVA,KAAK,IAAK,GAAKsE,EAAU,EAAkB,EAAb7G,EAAOsB,MACrCiB,KAAK,KAAM,OACXtC,MAAM,cAAe,UACrBM,KAAK,SAACtC,GAAD,OAAOA,KAGjBkE,SA1SkB,WA2ShBH,KAAKiG,MAAQ5I,EAAIiD,OAAO,KACrBC,KAAK,QAAS,cACjBP,KAAKkG,MAAQ7I,EAAIiD,OAAO,KACrBC,KAAK,QAAS,eAKnBC,OAnTkB,SAmTXV,EAAiBC,GAAwB,IAAAoG,EAAAnG,KAC9C,GAAKD,EAAMhF,OAGXiF,KAAKC,WAAWF,GACXC,KAAKD,MAAMhF,KAAKW,MAArB,CAL8C,IAAA0K,EASpBpG,KAAKD,MAAvBhF,EATsCqL,EAStCrL,KAAMqE,EATgCgH,EAShChH,QACdY,KAAKgE,SAAW,GAEhBjJ,EAAKgB,OAAOJ,QAAQ,SAAC0K,GACnBA,EAAMtL,KAAKY,QAAQ,SAACG,EAAOD,GACpBsK,EAAKnC,SAASnI,KACjBsK,EAAKnC,SAASnI,GAAK,IAErBsK,EAAKnC,SAASnI,GAAGyK,KAAK,CACpBV,WAAYS,EAAMtI,MAClBA,MAAOhD,EAAKW,KAAKG,GACjBC,OAAiC,IAA1BsD,EAAQrE,EAAKW,KAAKG,MAA0C,IAAzBuD,EAAQiH,EAAMtI,OAAmBjC,EAAQ,QAKzFkE,KAAK2C,YAAY3C,KAAKD,MAAMhF,MAC5BwL,YAASrK,EAAGsB,EAAGwC,KAAKiG,MAAOjG,KAAKkG,MAAOlG,KAAKD,MAAOC,KAAKsB,YAAYvG,EAAKgB,SACzEiE,KAAKuE,YAAYxJ,EAAKW,KAAMsE,KAAKgE,YAMnCwC,QApVkB,SAoVV1G,GACNzC,EAAIsD,UAAU,WAAWC,YC3VzBnE,cAmDJ,SAAAA,EAAYsD,GAAwB,IAAA0E,EAAA,OAClCA,EAAAgC,EAAA1C,KAAA/D,KAAMD,IAANC,MACK0G,MAAQtJ,IACbqH,EAAKxJ,MAAQ,CACX0L,YAAa,KAJmBlC,sCAW5BmC,aAAR,WAAuB,IAAAT,EAAAnG,KACf6G,EAAO7G,KAAK8G,aACZrI,EAASuB,KAAK+G,KAAO/G,KAAK+G,IAAIC,YAAehH,KAAK+G,IAAIC,YAAc,EAE1EhH,KAAKiH,SAAS,CACZN,YAAalI,GACZ,kBAAM0H,EAAKO,MAAM7G,OAAOgH,EAAMV,EAAKe,sBAMjCC,kBAAP,WAA2B,IAAAC,EAAApH,KACzBA,KAAK0G,MAAM7G,OAAOG,KAAK8G,aAAc9G,KAAKkH,iBACjB,SAArBlH,KAAKD,MAAMtB,QACb4I,OAAOC,iBAAiB,SAAU,SAACC,GAAD,OAAOH,EAAKR,iBAC9C5G,KAAK4G,mBAOFY,mBAAP,WACExH,KAAK0G,MAAMlG,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAOrCA,cAAP,WAAwC,IAChCzI,EAAUuB,KAAKD,MAAftB,MADgCwC,EAERjB,KAAKD,MAAd0H,GAFiBxG,EAE9ByG,SAF8BC,IAAA1G,EAAA,eAOtC,MAJc,SAAVxC,IACFA,EAAQuB,KAAK/E,MAAM0L,aAAe,KAGpCvL,OAAAC,OAAA,GACKoM,EADL,CAEEhJ,aAQGmJ,qBAAP,WAC2B,SAArB5H,KAAKD,MAAMtB,OACb4I,OAAOQ,oBAAoB,SAAU7H,KAAK4G,cAE5C5G,KAAK0G,MAAMF,QAAQxG,KAAK8G,iBAOlBA,WAAR,WACE,OAAOgB,cAAqB9H,KAAK+G,QAO5BgB,OAAP,WAA6B,IAAAC,EAAAhI,KAC3B,OAAQiI,EAAA,qBAAKlB,IAAK,SAACA,GAAD,OAASiB,EAAKjB,IAAMA,GAAKnI,UAAU,kCAlIjCsJ,aAAlBzL,EAKUmB,aAAyC,CACrDC,KAAM,GACNa,IAAK,CACHV,OAAQ,EACRS,MAAO,IAETU,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPlB,OAAQ,CACNmB,MAAO,SAACtD,EAAGJ,EAAG8I,GAAP,OAAkBwD,YAAIxD,EAAO9I,IAAIuM,OAAO,GAAGC,YAClD5J,MAAO,GAETmB,aAAc,SAAClE,EAAgBG,EAAGI,GAApB,OACZP,EAAKG,GAAK,SAAWI,EAAEqM,QAAQ,IACjC7J,MAAO,QA0FIhC,wCCjRf8L,EAAAtM,EAAAuM,EAAA,sBAAAC,IAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAvG,EAAA0G,GAAAE,EAAAL,EAAA,GAAAM,EAAAN,EAAAvG,EAAA4G,GAAAE,EAAAP,EAAA,IAAAQ,EAAAR,EAAAvG,EAAA8G,GAAAP,EAAAtM,EAAAuM,EAAA,sBAAAO,EAAAnM,IAAA2L,EAAA,SAYMS,EAAqBd,IAAMe,cAAc,IAEzCR,EAAc,SAAA1I,GAAK,OACvB4I,EAAA/L,EAAAC,cAACmM,EAAmBE,SAApB,KACG,SAAAC,GACC,OACEpJ,EAAMhF,MACLoO,EAAgBpJ,EAAMqJ,QAAUD,EAAgBpJ,EAAMqJ,OAAOrO,MAEtDgF,EAAMgI,QAAUhI,EAAM2H,UAC5B3H,EAAMhF,KAAOgF,EAAMhF,KAAKA,KAAOoO,EAAgBpJ,EAAMqJ,OAAOrO,MAGvD4N,EAAA/L,EAAAC,cAAA,uCA4Bf4L,EAAYY,UAAY,CACtBtO,KAAMuO,IAAUC,OAChBH,MAAOE,IAAUE,OAAOC,WACxB1B,OAAQuB,IAAUI,KAClBhC,SAAU4B,IAAUI,wCCzDPlB,EAAA,GAAC,UACd,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,gCCnBF,IAAsBnE,EAKpBsF,EAAOC,SALavF,EAKWwF,EAAQ,OALRxF,EAAEyF,SAAYzF,wDCQhCmE,EAAA,WAACuB,EAAW9L,GAIzB,OAHA7C,OAAO4O,KAAK/L,GAAOtC,QAAQ,SAACsO,GAC1BF,EAAUxJ,KAAK0J,EAAGhM,EAAMgM,MAEnBF,qCCZTxB,EAAAtM,EAAAuM,EAAA,sBAAAnH,IAAA,IAAA6I,EAAA3B,EAAA,KAGeC,EAAA,GACbhD,GAAI,CACFC,GAAI,SAACpF,GACHA,EAAUpC,MAAM,OAASkM,IAAMC,MAAS,MACrCnM,MAAM,MAAQkM,IAAME,MAAQ,GAAM,MACrChK,EAAU8D,aACPjF,SAAS,KACTjB,MAAM,UAAW,KAEtByH,KAAM,SAACrF,GACLA,EAAUpC,MAAM,OAASkM,IAAMC,MAAS,MACrCnM,MAAM,MAAQkM,IAAME,MAAQ,GAAM,OAEvC1E,IAAK,SAACtF,GACJA,EAAU8D,aACPjF,SAAS,KACTjB,MAAM,UAAW,MAKnB,IAAMoD,EAAU,SAACiJ,EAAUhN,GAWhC,OAVIA,GAEFA,EAAasD,UAEftD,EAAe6D,YAAOmJ,GAAUhK,OAAO,OACpCC,KAAK,QAAS,eACdtC,MAAM,UAAW,IAEPqC,OAAO,OACjBC,KAAK,QAAS,iBACV,CACLjD,eACAC,WAAYD,EAAagD,OAAO,OAC7BC,KAAK,QAAS,sMChCfgK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAO3C,IAAMrL,cAAciO,IAApB1P,OAAAC,OAAA,CACLoP,WACAC,iBACGA,EAAcK,QAIrBR,EAAiBlB,UAAY,CAC3BoB,SAAUnB,IAAU0B,MAAM,CACxBH,SAAUvB,IAAUE,OAAOC,aAC1BA,YAGUc,6GCPf,SAASU,EAATT,GAA2D,IAA5CvN,EAA4CuN,EAA5CvN,YAAaiO,EAA+BV,EAA/BU,KAAMC,EAAyBX,EAAzBW,KAAMC,EAAmBZ,EAAnBY,SAAUpO,EAASwN,EAATxN,MACxCqO,EADiDC,EAAAvQ,KACjDsQ,KAcFE,EAAkBtO,GAAeoO,EAAKG,aAAavO,YAEzD,OACEN,EAAAC,EAAAC,cAAC4O,EAAA7O,EAAD,CACE8O,eAAgB,CACdR,QAEFlO,MAAOA,EACP2O,cAAa,QAAUN,EAAKG,aAAaxO,MACzCmO,KAAM,CACJ,CACES,QAASL,EACTM,KAAI,eAEN,CACED,QAAS5O,EACT8O,SAAQ,YAEV,CACEF,QAASL,EACTO,SAAQ,kBAEV,CACEF,QAAO,UACPE,SAAQ,WAEV,CACEF,QAAO,UACPC,KAAI,gBAEN,CACED,QAASP,EAAKG,aAAaO,OAC3BF,KAAI,mBAEN,CACED,QAAS5O,EACT6O,KAAI,iBAEN,CACED,QAASL,EACTM,KAAI,wBAGL/J,OACCsJ,EAASrK,OAAS,EACd,CACA6K,QAASR,EAASY,KAAT,MACTH,KAAI,YAEJ,IAEL/J,OAAOqJ,KAKhBF,EAAIrN,aAAe,CACjBwN,SAAU,GACVF,KAAI,KACJC,KAAM,IAGRF,EAAI5B,UAAY,CACdpM,YAAaqM,IAAUE,OACvB4B,SAAU9B,IAAU2C,QAAQ3C,IAAUE,QACtC0B,KAAM5B,IAAUE,OAChB2B,KAAM7B,IAAU4C,MAChBlP,MAAOsM,IAAUE,OAAOC,YAGXwB,wUCjGAzC,EAAA,WAAC7D,GACd,OAAOA,EAAOjB,OAAO,SAAC5H,GACpB,IACE,IAAME,EAAImQ,EAAMrQ,GACVsQ,EAAMpQ,EAAEoQ,MAAMF,QACpB,GAAIE,EAAIrL,OAAS,EAEf,OAAO,EAET,IAAMsL,EAAarQ,EAAEqQ,aACrB,OAASA,EAAa,IAAOA,EAAa,IAASD,EAAI,GAAK,KAAOA,EAAI,GAAK,GAE5E,MAAO7E,GACP,OAAO,KAGR7D,OAAO,SAAC4I,EAAGC,EAAOC,GAAX,OAAoBA,EAAKC,QAAQH,KAAOC,IAC/CG,KAAK,kBAAMC,KAAKC,SAAW,gHCR1BC,EAAS,SAAArC,GAAA,IAAGsC,EAAHtC,EAAGsC,UAAH,OACbC,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,CAAQC,SAAS,UACfF,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,KACED,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,CAAY7P,QAAQ,KAAKoC,MAAM,WAC7BwN,EAAAnQ,EAAAC,cAACqQ,EAAA,EAAD,CAAMC,GAAG,KAAKL,IAGhBC,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,KAAQD,EAAAnQ,EAAAC,cAACqQ,EAAA,EAAD,CAAMC,GAAG,cAAT,cACRJ,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,KAAQD,EAAAnQ,EAAAC,cAACqQ,EAAA,EAAD,CAAMC,GAAG,SAAT,eACRJ,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,KAAQD,EAAAnQ,EAAAC,cAACqQ,EAAA,EAAD,CAAMC,GAAG,QAAT,cACRJ,EAAAnQ,EAAAC,cAACmQ,EAAA,EAAD,KAAQD,EAAAnQ,EAAAC,cAACqQ,EAAA,EAAD,CAAMC,GAAG,YAAT,gBAMdN,EAAOxD,UAAY,CACjByD,UAAWxD,IAAUE,QAGvBqD,EAAOjP,aAAe,CACpBkP,UAAS,IAGID,QClBTO,EAAS,SAAA5C,GAAA,IAAG9C,EAAH8C,EAAG9C,SAAH,OACbqF,EAAAnQ,EAAAC,cAACqQ,EAAA,EAAD,CACE9D,MAAK,YASLrB,OAAQ,SAAChN,GAAD,OACNgS,EAAAnQ,EAAAC,cAAAkQ,EAAAnQ,EAAAyQ,SAAA,KACEN,EAAAnQ,EAAAC,cAACyQ,EAAD,CAAQR,UAAW/R,EAAKsQ,KAAKG,aAAaxO,QAC1C+P,EAAAnQ,EAAAC,cAAA,OACEoB,MAAO,CACLsP,SAAU,EACVvP,OAAM,SACNwP,QAAO,wBACPC,WAAY,EACZhP,MAAO,SAGTsO,EAAAnQ,EAAAC,cAAA,YAAO6K,IAGTqF,EAAAnQ,EAAAC,cAAA,oBACK,IAAI6Q,MAAOC,cADhB,iBAGEZ,EAAAnQ,EAAAC,cAAA,KAAG+Q,KAAK,2BAAR,cA5BR7S,KAAA8S,KAmCFT,EAAO/D,UAAY,CACjB3B,SAAU4B,IAAUwE,KAAKrE,YAGZ2D,sPCtCFW,EAAa,WACxB,IAAI1Q,EACAC,EACAC,EACAwC,EACAiE,EACEgK,EAAkBtQ,cAClBF,EAAIC,cACJvB,EAAIwB,cACJC,EAAiBD,cAcvB,IAAME,EAA8B,CAClCC,KAAM,CACJ3B,EAAG,CACD4B,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,UAIZV,EAAG,CACDO,MAAO,GACPE,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,SAGVM,MAAO,GACPC,MAAO,KAGXC,IAAK,CACHC,YAAa,EACbX,OAAQ,EACRS,MAAO,IAETG,UAAW,eACXC,gBACA9D,KAAM,CAAC,CACLW,KAAM,GACNK,OAAQ,KAEV+C,MAAO,EACPC,OAAQ,CACNC,IAAK,KACLC,IAAK,MAEPC,SAAU,IACVC,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPlB,OAAQ,CACNmB,MAAO,UACPC,UAAW,GACXC,QAAS,OACThB,MAAO,GAETiB,IAAKC,IACLrC,aAAc,OACdsC,aAAc,SAAClE,EAAMG,EAAGI,EAAGgS,GAAb,OACZA,EAAW,KACXvS,EAAKG,GAAK,SAAWI,GACvBmD,QAAS,GACTX,MAAO,KAicT,MA9bkB,CAMhBoB,OANgB,SAMTC,EAAiBW,QAAuC,IAAvCA,MAAmC,IACzDT,KAAKC,WAAWQ,GAChBT,KAAKE,SAASJ,GACdE,KAAKG,SAASJ,GACdC,KAAKI,aACLJ,KAAKkO,WAAanO,EAAMhF,KAAKgH,IAAI,SAAC9F,EAAGJ,GAAJ,OAAUwB,EACxCiD,OAAO,KACPC,KAAK,QAFmC,uBAEH1E,KAGxCmE,KAAKQ,OAAOV,EAAIC,IAGlBE,WAnBgB,SAmBLQ,IACTV,EAAQW,EAAqB9C,EAAc6C,IACrC1F,KAAO0F,EAAS1F,KAClB0F,EAAS5B,cACXkB,EAAMlB,YAAc4B,EAAS5B,cASjCqB,SAhCgB,SAgCPJ,GACP,GAAIzC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANnB,IAAAsN,EASkCpO,EAArC/B,EATGmQ,EASHnQ,OAAQS,EATL0P,EASK1P,MAAOX,EATZqQ,EASYrQ,OAAQc,EATpBuP,EASoBvP,UAG/BvB,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,GACd8B,KAAK,SAAUzC,GACfyC,KAAK,UAJF,OAIoB9B,EAJpB,IAI6BX,GAChCwC,OAAO,KACPC,KAAK,YACJ,aAAevC,EAAOqB,KAAO,IAAMrB,EAAOsB,IAAM,KACpD,IAAM8B,EAAIC,YAAQtB,EAAMzC,aAAcA,GACtCC,EAAa6D,EAAE7D,WACfD,EAAe8D,EAAE9D,cAQnBgE,YA9DgB,SA8DJvF,GACV,OAAOA,EAAOwF,OAAO,SAAC3E,EAAWhB,GAC/B,OAAOA,EAAEb,KAAKgG,OAASnE,EAAIhB,EAAEb,KAAKgG,OAASnE,GAC1C,IAOL4E,kBAxEgB,SAwEEN,EAAoCnG,GACpD,IAAM0G,EAAoB,GAClB1C,EAAWgB,EAAXhB,OAEF4C,EAAsB5G,EAAKwG,OAAO,SAACK,EAAMC,GAC7C,IAAMuM,EAAuBvM,EAAKN,OAAO,SAAC8M,EAAGrM,GAC3C,SAAAF,OAAWuM,EAAMrM,EAAED,IAAI,SAACuM,GAAD,OAAUA,EAAKxS,UACrC,IACH,SAAAgG,OAAWF,EAASwM,IACnB,CAAC,IAEEnM,EAAaC,YAAOP,EAAW,SAAC1F,GAAD,OAAOA,IAC5CwF,EAAQ,GAAK1C,GAAUA,EAAOoD,eAAe,QAAyB,OAAfpD,EAAOC,IAC1DD,EAAOC,IACPiD,EAAW,GACfR,EAAQ,GAAK1C,GAAUA,EAAOoD,eAAe,QAAyB,OAAfpD,EAAOE,IAC1DF,EAAOE,IACPgD,EAAW,GACf,IAAMG,EAAS,CAAC4L,EAAgB7K,YAAa,GAC7CjC,EAAMoB,MAAMF,GACTrD,OAAO0C,IAGZqC,WA/FgB,WA+FH,IACHjG,EAASkC,EAATlC,KACR,MAAwB,KAAjBA,EAAKL,EAAEO,MACVF,EAAKL,EAAEiB,MACPZ,EAAKL,EAAEiB,MAAQ,IAGrB4D,YAtGgB,WAsGF,IACJxE,EAASkC,EAATlC,KACR,MAAwB,KAAjBA,EAAK3B,EAAE6B,MACVF,EAAK3B,EAAE4B,OACPD,EAAK3B,EAAE4B,OAAS,IAGtBsC,WA7GgB,WA6GH,IAAAmO,EAC6BxO,EAAhClC,EADG0Q,EACH1Q,KAAMG,EADHuQ,EACGvQ,OAAQF,EADXyQ,EACWzQ,OAAQW,EADnB8P,EACmB9P,MAC9BuB,KAAKuC,MAAQlF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAC3CP,KAAKwC,MAAQnF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAEtB,KAAjB1C,EAAK3B,EAAE6B,OACTV,EAAIiD,OAAO,QACRC,KAAK,QAAS,gBACdA,KAAK,YACJ,aAAgBiO,OAAO/P,GAAS,EAAK,MACnCX,EAASkC,KAAKqC,cAA+B,EAAdrE,EAAOqB,KAAa,GAAKxB,EAAK3B,EAAE8B,QAAU,KAC5EC,MAAM,cAAe,UACrBM,KAAKV,EAAK3B,EAAE6B,OAGI,KAAjBF,EAAKL,EAAEO,OACTV,EAAIiD,OAAO,QACRC,KAAK,QAAS,gBACdA,KAAK,YAAa,iBAAmBP,KAAK8E,aAAe,gBACzDvE,KAAK,IAAK,EAAIvC,EAAOqB,MACrBkB,KAAK,IAAK,GAAKzC,EAAS,EAAkB,EAAbE,EAAOsB,MACpCiB,KAAK,KAAM,OACXtC,MAAM,cAAe,UACrBM,KAAKV,EAAKL,EAAEO,QAInB0Q,QAxIgB,WAyId,OAAO1O,EAAMhF,KAAKwG,OAAO,SAACK,EAAMC,GAC9B,OAAO6M,MAAMC,KAAK,IAAIC,IAAIhN,EAAKE,OAAOD,EAAKnG,SAC1C,KAOLiH,YAlJgB,SAkJJ5H,GAAwB,IAQ9BwH,EAR8BkC,EAAAzE,KAAA6O,EACmB9O,EAAhC/B,GADa6Q,EAC1BnQ,IAD0BmQ,EACrB9P,OADqB8P,EACb7Q,QAAeF,GADF+Q,EACLpQ,MADKoQ,EACE/Q,QAAQD,EADVgR,EACUhR,KACtCyD,EAAcvG,EAAKwG,OAAO,SAACK,EAAMC,GACrC,IAAM7F,EAAIyI,EAAKnD,YAAYO,EAAK9F,QAChC,OAAOC,EAAI4F,EAAO5F,EAAI4F,GACrB,GACGiB,EAAI7C,KAAK8C,YAGTC,EAAahI,EAAK,GAAGgB,OAAOgG,IAAI,SAAC/F,GAAD,OAAOA,EAAE+B,QAEzCrC,EAAOsE,KAAKyO,UAClBvS,EACG6C,OAAOrD,GACPsH,WAAW,CAAC,EAAGH,IACfI,aAAajD,KAAKkD,iBAErBvF,EACGoB,OAAOgE,GACPC,WAAW,CAAC,EAAG9G,EAAEiH,cACjBF,aAAajD,KAAKoD,aAErBb,EAAQc,YAAWnH,GAEnB,IAAMoH,EAAWC,EAAI1F,EAAM,kBAAc2F,QACxBA,IAAbF,EACFf,EAAMe,SAASA,GAEXT,EAAIvB,EAAc,IAEpBiB,EAAMkB,WAAWvH,EAAE6C,SAAS2E,OAAO,SAACzH,EAAGJ,GAAJ,QAAYA,EAAI,OAIvDmE,KAAKuC,MACFhC,KAAK,YAAa,cAAgBP,KAAK8D,aAAejG,EAAKL,EAAES,MAAM,iBAAmB,KACpFH,EAASkC,KAAKqC,cAA+B,EAAdrE,EAAOqB,MAAa,KACrD0E,KAAKxB,GAER,IAAMuM,EAAU/T,EAAKgH,IAAI,SAAC9F,GAAD,OAAOA,EAAEe,QAC5B+R,EAAiC,CAACjR,EAAuB,EAAbE,EAAOsB,IAAWU,KAAKqC,cAAe,GACxF2L,EAAgBjP,OAAO+P,GACpB9L,WAAW+L,GAEd/O,KAAKwB,kBAAkBhE,EAAGwG,GAE1B,IAAMxB,EAAQyB,YAAS+J,GAAiBxP,MAAMX,EAAKL,EAAEgB,OAE/C0F,EAAYX,EAAI1F,EAAM,kBAAc2F,QACxBA,IAAdU,GACF1B,EAAMc,SAASY,GAGjBlE,KAAKwC,MACFjC,KAAK,YAAa,aAAeP,KAAK8D,aAAe,QACrDK,aACAJ,KAAKvB,GAxD0BpH,OAAAC,OAAA,GA0DPwC,EAAK3B,EAAEqC,KAAKN,OA1DL7C,OAAAC,OAAA,GA2DPwC,EAAKL,EAAEe,KAAKN,OACvCmG,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAKL,EAAES,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAKL,EAAEe,KAAKN,OAEvDmG,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAK3B,EAAE+B,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAK3B,EAAEqC,KAAKN,QASzD6E,UA3NgB,WA2NI,IAAAkM,EACcjP,EAAlBtB,GADIuQ,EACVnR,KADUmR,EACJvQ,OAAOT,EADHgR,EACGhR,OACrB,OAAOwQ,OAAO/P,GAAwB,EAAdT,EAAOqB,KAAYW,KAAK8D,cASlDgB,WAtOgB,WAsOK,IAAAmK,EACclP,EAAzBjC,EADWmR,EACXnR,OAAQE,EADGiR,EACHjR,OADGiR,EACKpR,KACxB,OAAOC,EAAuB,EAAbE,EAAOsB,IAAWU,KAAKqC,eAO1Ca,cA/OgB,WAgPd,IAAMmB,EAAId,EAAIxD,EAAMrB,IAAK,cAAe,IACxC,OAAO2F,GAAK,GAAKA,GAAK,EAClBA,EACA,GAGNjB,UAtPgB,WAuPd,IAAMiB,EAAId,EAAIxD,EAAMrB,IAAK,SAAU,GACnC,OAAO2F,GAAK,GAAKA,GAAK,EAClBA,EACA,IAONC,SAjQgB,WAkQd,OAAO3G,EAAewF,aAMxBoB,YAxQgB,SAyQdC,GACA,IAAA2B,EAAAnG,KACMtE,EAAOsE,KAAKyO,UADlBS,EAGsCnP,EADFjB,GAFpCoQ,EAEQpR,OAFRoR,EAEgBzQ,MAFhByQ,EAEuBlR,OAFvBkR,EAE+BxQ,IAF/BwQ,EAEoCpQ,OAAOI,EAF3CgQ,EAE2ChQ,SACzCrB,EAHFqR,EAGErR,KAAMO,EAHR8Q,EAGQ9Q,OAAQsB,EAHhBwP,EAGgBxP,IAAKE,EAHrBsP,EAGqBtP,aACf0E,EAAWtE,KAAKsE,WAEhBK,EAASC,YAAa7E,EAAMlB,aAC5BsQ,EAAevK,YAAa,CAAC,SAE7Bd,EAAa9D,KAAK8D,aACF9D,KAAKkD,gBAEVsB,EAAUjD,OAAO,SAACK,EAAMC,GACvC,IAAMuN,EAAUvN,EAAKN,OAAO,SAAC8M,EAAGrM,GAAJ,OAAUA,EAAEjB,OAASsN,EAAIrM,EAAEjB,OAASsN,GAAG,GACnE,OAAOe,EAAUxN,EAAOwN,EAAUxN,GACjC,GACH4C,EAAU7I,QAAQ,SAACZ,EAAMc,GACvB,IAAMoS,EAAWlO,EAAMhF,KAAKc,GAAGmB,MACzB+H,EAAIoB,EAAK+H,WAAWrS,GACvB8E,UAAU,KACV5F,KAAKA,GAEFiK,EAAOD,EAAEE,QACZ3E,OAAO,KACPI,MAAMqE,GACNxE,KAAK,YAAa,SAACtE,GAMlB,oBALe6H,EACXjG,EAAKL,EAAES,MAAM,gBACb/B,EAAED,EAAE,GAAG8B,QAGX,KADeiQ,EAAgB/R,EAAE,GAAGoT,UACpC,MAED1O,UAAU,QACV5F,KAAK,SAACkB,GAAD,OAAOA,IAEf+I,EACGC,QACA3E,OAAO,QACPC,KAAK,SAAU,GACfA,KAAK,IAAK,SAACtE,GAAD,OAA+B+R,EAAgB7K,cAEzD5C,KAAK,QAAS,OACdA,KAAK,IAAK,SAACtE,GAAD,OAAO0B,EAAe1B,EAAE2J,cAClCrF,KAAK,QAAS,SAACtE,GAAD,OAAOqI,IACrB/D,KAAK,OAAQ,SAACtE,EAAGqJ,GAAJ,OAAWX,EAAOW,KAE/BD,GAAG,YAAa,SAACpJ,GAChB,IAAMqJ,EAAK5J,EAAK0J,UAAU,SAACxJ,GAAD,OAAOA,IAAMK,EAAE8B,QACzCR,EAAWgI,KAAK,kBAAM3F,EAAalE,EAAM4J,EAAIrJ,EAAEH,MAAOmS,KACtDvO,EAAI8F,GAAGC,GAAGnI,KAEX+H,GAAG,YAAa,kBAAM3F,EAAI8F,GAAGE,KAAKpI,KAClC+H,GAAG,WAAY,kBAAM3F,EAAI8F,GAAGG,IAAIrI,KAChCoD,MAAMsE,GACNb,aACAjF,SAASA,GACTJ,MAAMA,GACNyB,KAAK,IAAK,SAACtE,GAAD,OAA+BuB,EAAEvB,EAAEH,SAC7CyE,KAAK,SAAU,SAACtE,EAAGqJ,GAClB,GAAI6J,EACF,OAAOA,EAAa7J,KAGvB/E,KAAK,kBAAmB,cACxBA,KAAK,eAAgBnC,EAAOK,OAC5B8B,KAAK,iBAAkBnC,EAAOqB,SAG9Bc,KAAK,mBACJ,SAACtE,GACC,IAAM4J,EAAgBmI,EAAgB7K,YAAc3F,EAAEvB,EAAEH,OACxD,OAAUwI,EAAV,MAAwBuB,EAAxB,IAAyCvB,IAE5C/D,KAAK,SAAU,SAACtE,GAAD,OACd+R,EAAgB7K,YAAc3F,EAAEvB,EAAEH,SAGtCiJ,EAAEe,OAAOlF,YAIbT,SA5VgB,SA4VPJ,GACUA,EAATZ,KACRa,KAAKiG,MAAQ5I,EAAIiD,OAAO,KACrBC,KAAK,QAAS,cACjBP,KAAKkG,MAAQ7I,EAAIiD,OAAO,KACrBC,KAAK,QAAS,eAOnB+O,UAxWgB,WAwWJ,IAAAlI,EAAApH,KAAAuP,EAC+CxP,EAAjDhF,EADEwU,EACFxU,KAAM+C,EADJyR,EACIzR,OAAQW,EADZ8Q,EACY9Q,MAAOZ,EADnB0R,EACmB1R,KAAMsB,EADzBoQ,EACyBpQ,KAAMnB,EAD/BuR,EAC+BvR,OACnCQ,GAFI+Q,EACuC7Q,IACnC3D,EAAKwG,OAAO,SAACK,EAAMC,GAC/B,IAAM7F,EAAIoL,EAAK9F,YAAYO,EAAK9F,QAChC,OAAOC,EAAI4F,EAAOA,EAAO5F,GACxB,IACGwT,EAAY3R,EAAKL,EAAES,MAAM,gBAEzBwR,EACDzP,KAAK8D,aAAe0L,EADnBC,EAEDzP,KAAK8E,aAGN3F,EAAKjD,EAAEkD,UAETY,KAAKiG,MAAM1F,KAAK,YAAhB,aAA0CkP,EAA1C,KAAuDA,EAAvD,KAEAzP,KAAKiG,MAAMlC,KApejB,SAA0BvF,GACxB,YAD2C,IAAnBA,MAAgB,GACjC6E,YAAWnH,GACfsC,MAAMA,GAkeWkR,CAAiBnM,EAAIpE,EAAM,UAAWX,IACnD8E,UAAUxF,EAASkC,KAAKqC,cAA8B,EAAbrE,EAAOsB,KAChDsE,WAAW,iBAAM,MAEpBQ,YAAMpE,KAAKiG,MAAMtF,UAAU,cAAexB,EAAKjD,EAAE+B,OACjDmG,YAAMpE,KAAKiG,MAAMtF,UAAU,WAAY,CAAEvC,OAAQ,iBAG/Ce,EAAK3B,EAAE4B,UAETY,KAAKkG,MAAM3F,KAAK,YAAa,cAAgBP,KAAK8D,aAAe0L,GAAa,QAC3ErL,aACAJ,KA1eT,SAA0BvF,GACxB,YAD2C,IAAnBA,MAAgB,GACjCyF,YAAS+J,GACbxP,MAAMA,GAweGmR,CAAiBpM,EAAIpE,EAAM,UAAWX,IACzC8E,UAAU7E,EAAuB,EAAdT,EAAOqB,KAAYW,KAAK8D,cAC3CF,WAAW,iBAAM,MAGtBQ,YAAMpE,KAAKkG,MAAMvF,UAAU,cAAexB,EAAK3B,EAAES,OAGjD+B,KAAKkG,MAAMvF,UAAU,qBAAqB+C,OAAO,SAACzH,EAAGJ,GAAJ,OAAgB,IAANA,IACxD0E,KAAK,UAAW,QACnB6D,YAAMpE,KAAKkG,MAAMvF,UAAU,WAAY,CAAEvC,OAAQ,kBASrDoC,OAxZgB,SAwZTV,EAAiBW,GACtB,GAAKV,EAAMhF,KAAX,CAGAiF,KAAKC,WAAWQ,GAJ+B,IAAAmP,EAKrB7P,EAAlBhF,EALuC6U,EAKvC7U,KAAMqE,EALiCwQ,EAKjCxQ,QAEd4E,EAAWjJ,EAAKgH,IAAI,SAAC9F,GACnB,IAAM4T,EAAW,GAcjB,OAbA5T,EAAEF,OAAOJ,QAAQ,SAAC0K,GAChBA,EAAMtL,KAAKY,QAAQ,SAACG,EAAOD,GACpBgU,EAAShU,KACZgU,EAAShU,GAAK,IAEhBgU,EAAShU,GAAGyK,KAAK,CACfV,WAAYS,EAAMtI,MAClBsR,SAAUpT,EAAEe,MACZe,MAAO9B,EAAEP,KAAKG,GACdC,OAA8B,IAAvBsD,EAAQnD,EAAEP,KAAKG,MAA0C,IAAzBuD,EAAQiH,EAAMtI,OAAmBjC,EAAQ,QAI/E+T,IAGT7P,KAAK2C,YAAY5C,EAAMhF,MACvBiF,KAAKsP,YACLtP,KAAKuE,YAAYP,KAOnBwC,QA1bgB,SA0bR1G,GACNzC,EAAIsD,UAAU,WAAWC,YC5hBzBnE,cAiDJ,SAAAA,EAAYsD,GAAsB,IAAA0E,EAAA,OAChCA,EAAAgC,EAAA1C,KAAA/D,KAAMD,IAANC,MACK0G,MAAQqH,IACbtJ,EAAKxJ,MAAQ,CACX0L,YAAa,KAJiBlC,sCAW1BmC,aAAR,WAAuB,IAAAT,EAAAnG,KACf6G,EAAO7G,KAAK8G,aACZrI,EAASuB,KAAK+G,KAAO/G,KAAK+G,IAAIC,YAAehH,KAAK+G,IAAIC,YAAc,EAE1EhH,KAAKiH,SAAS,CACZN,YAAalI,GACZ,kBAAM0H,EAAKO,MAAM7G,OAAOgH,EAAMV,EAAKe,sBAMjCC,kBAAP,WAA2B,IAAAC,EAAApH,KACzBA,KAAK0G,MAAM7G,OAAOG,KAAK8G,aAAc9G,KAAKkH,iBACjB,SAArBlH,KAAKD,MAAMtB,QACb4I,OAAOC,iBAAiB,SAAU,SAACC,GAAD,OAAOH,EAAKR,iBAC9C5G,KAAK4G,mBAOFY,mBAAP,WACExH,KAAK0G,MAAMlG,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAOrCA,cAAP,WAAsC,IAC9BzI,EAAUuB,KAAKD,MAAftB,MAD8BwC,EAENjB,KAAKD,MAAd0H,GAFexG,EAE5ByG,SAF4BC,IAAA1G,EAAA,eAMpC,MAHc,SAAVxC,IACFA,EAAQuB,KAAK/E,MAAM0L,aAAe,KAEpCvL,OAAAC,OAAA,GACKoM,EADL,CAEEhJ,aAQGmJ,qBAAP,WAC2B,SAArB5H,KAAKD,MAAMtB,OACb4I,OAAOQ,oBAAoB,SAAU7H,KAAK4G,cAE5C5G,KAAK0G,MAAMF,QAAQxG,KAAK8G,iBAOlBA,WAAR,WACE,OAAOgB,cAAqB9H,KAAK+G,QAO5BgB,OAAP,WAA6B,IAAAC,EAAAhI,KAC3B,OAAQiI,EAAA,qBAAKlB,IAAK,SAACA,GAAD,OAASiB,EAAKjB,IAAMA,GAAKnI,UAAU,kCA/HjCsJ,aAAlBzL,EAKUmB,aAAuC,CACnDC,KAAM,GACNa,IAAK,CACHV,OAAQ,EACRS,MAAO,IAETU,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPlB,OAAQ,CACNmB,MAAO,SAACtD,EAAGJ,EAAG8I,GAAP,OAAkBwD,YAAIxD,EAAO9I,IAAIuM,OAAO,GAAGC,YAClD5J,MAAO,GAETA,MAAO,QAyFIhC,wCC5Kf8L,EAAAtM,EAAAuM,EAAA,sBAAAjC,IAAAgC,EAAAtM,EAAAuM,EAAA,sBAAA1D,IAAAyD,EAAAtM,EAAAuM,EAAA,sBAAA1E,IAAAyE,EAAAtM,EAAAuM,EAAA,sBAAAnG,IAAAkG,EAAAtM,EAAAuM,EAAA,sBAAA1F,IAAA,IAAAgN,EAAAvH,EAAA,KAAAwH,EAAAxH,EAAA,KAAAyH,EAAAzH,EAAA,KAiBahC,EAAW,SAACrK,EAAGsB,EAAGyI,EAAOC,EAAOnG,EAAOvB,GAAU,IACpDV,EAAsCiC,EAAtCjC,OAAQW,EAA8BsB,EAA9BtB,MAAOZ,EAAuBkC,EAAvBlC,KAAMsB,EAAiBY,EAAjBZ,KAAMnB,EAAW+B,EAAX/B,OAC7BwR,EAAY3R,EAAKL,EAAES,MAAM,gBAEzBwR,EACD3L,EAAWjG,GAAQ2R,EADlBC,EAED3K,EAAW/E,GAGZZ,EAAKjD,EAAEkD,UAET6G,EAAM1F,KAAK,YAAX,aAAqCkP,EAArC,KAAkDA,EAAlD,KAEAxJ,EAAMlC,KAlBoB,SAAC7H,EAAGsC,GAChC,YADsD,IAAtBA,MAAgB,GACzC6E,YAAWnH,GACfsC,MAAMA,GAgBIyR,CAAe/T,EAAGqH,EAAIpE,EAAM,UAAWX,IAC/C8E,UAAUxF,EAASuE,EAAYtC,EAAMlC,MAAsB,EAAbG,EAAOsB,KACrDsE,WAAW,iBAAM,MAEpBQ,YAAM6B,EAAMtF,UAAU,cAAexB,EAAKjD,EAAE+B,OAC5CmG,YAAM6B,EAAMtF,UAAU,WAAY,CAAEvC,OAAQ,iBAG1Ce,EAAK3B,EAAE4B,UAET8G,EAAM3F,KAAK,YAAa,cAAgBuD,EAAWjG,GAAQ2R,GAAa,QACrErL,aACAJ,KApCuB,SAACvG,EAAGgB,GAChC,YADsD,IAAtBA,MAAgB,GACzCyF,YAASzG,GACbgB,MAAMA,GAkCC0R,CAAe1S,EAAG+F,EAAIpE,EAAM,UAAWX,IAC1C8E,UAAU7E,EAAuB,EAAdT,EAAOqB,KAAYyE,EAAWjG,IACjD+F,WAAW,iBAAM,MAGtBQ,YAAM8B,EAAMvF,UAAU,cAAexB,EAAK3B,EAAES,OAG5CiI,EAAMvF,UAAU,qBAAqB+C,OAAO,SAACzH,EAAGJ,GAAJ,OAAgB,IAANA,IACnD0E,KAAK,UAAW,QACnB6D,YAAM8B,EAAMvF,UAAU,WAAY,CAAEvC,OAAQ,kBAInC0G,EAAa,SAAC/E,GAAkB,IACnCjC,EAAyBiC,EAAzBjC,OAAQE,EAAiB+B,EAAjB/B,OAAQH,EAASkC,EAATlC,KACxB,OAAOC,EAAuB,EAAbE,EAAOsB,IAAW+C,EAAYxE,IAGpCiG,EAAa,SAACjG,GACzB,MAAwB,KAAjBA,EAAKL,EAAEO,MACVF,EAAKL,EAAEiB,MACPZ,EAAKL,EAAEiB,MAAQ,IAGR4D,EAAc,SAACxE,GAC1B,MAAwB,KAAjBA,EAAK3B,EAAE6B,MACVF,EAAK3B,EAAE4B,OACPD,EAAK3B,EAAE4B,OAAS,GAAKyF,EAAI1F,EAAM,WAAY,IAGpCiF,EAAY,SAAC/C,GAAkB,IAClClC,EAAwBkC,EAAxBlC,KACR,OADgCkC,EAAlBtB,MACgB,EADEsB,EAAX/B,OACEqB,KAAYyE,EAAWjG,sCCvEhD0K,EAAAtM,EAAAuM,EAAA,sBAAAzN,IAAAwN,EAAAtM,EAAAuM,EAAA,sBAAA2H,IAAA,IAAAC,EAAA7H,EAAA,KAmBaxN,EAAuB,CAClCW,KAAM,CAAC,SAAU,SAAU,SAAU,SACrCK,OAAQ,CACN,CACEhB,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBgD,MAAO,aAET,CACEhD,KAAM,CAAC,GAAI,GAAI,GAAI,IACnBgD,MAAO,cAGXoB,KA7BkB,CAClBjD,EAAG,CACD+B,MAAO,CACLG,OAAU,UACVC,iBAAkB,IAEpBG,MAAO,GAEThB,EAAG,CACDM,OAAQ,GACRG,MAAO,CACLI,iBAAkB,IAEpBG,MAAO,KAmBE2R,EAAQ,CACnBzU,KAAM,CAAC,QAAS,QAAS,yBAA0B,QAAS,QAAS,QAAS,SAC9EK,OAAQ,CACN,CACEoT,aAAc,CAAC,OACfpU,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzBgD,MAAO,WAGXf,MAAO,UAsDYqT,YAAY,CAAC,yBAA0B,UAAW,yBAA0B,UAC/F,UAAW,0BACX,UAAW,UAAW,0BAA2B,UAAW,UAAW,UAAW,UAAW,UAC7F,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACxF,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,iNCrF5CC,EAAyB,WACpC,IAAIjT,EACAC,EACAC,EACErB,EAAIuB,cACJD,EAAIE,cAcV,IAAME,EAAe,CACnBC,KAAM,CACJ3B,EAAG,CACD4B,OAAQ,GACRG,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,SAGVM,MAAO,IAEThB,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,SAGVO,MAAO,KAGXC,IAAK,CACHZ,OAAQ,GACRE,OAAQ,IAEVY,UAAW,eACXC,gBACA9D,KAAM,GACN+D,MAAO,EACPI,SAAU,IACVC,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPlB,OAAQ,CACNmB,MAAO,UACPC,UAAW,GACXC,QAAS,OACThB,MAAO,GAETiB,IAAKC,IACLrC,aAAc,OACdsC,aAAc,SAAClE,EAAgBG,EAAWI,GAA5B,OACZP,EAAKG,GAAK,SAAWI,GACvBwC,MAAO,KAuUT,MApU8B,CAM5BoB,OAN4B,SAMrBC,EAAiBC,QAAY,IAAZA,MAAQ,IAC9BC,KAAKD,MAAQW,EAAM9C,EAAcmC,GACjCC,KAAKQ,OAAOV,EAAIE,KAAKD,QAQvBG,SAhB4B,SAgBnBJ,GACP,GAAIzC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANnB,IAAAI,EASkCjB,KAAKD,MAA1C/B,EATGiD,EASHjD,OAAQS,EATLwC,EASKxC,MAAOX,EATZmD,EASYnD,OAAQc,EATpBqC,EASoBrC,UAG/BvB,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,GACd8B,KAAK,SAAUzC,GACfyC,KAAK,UAJF,OAIoB9B,EAJpB,IAI6BX,GAChCwC,OAAO,KACPC,KAAK,YACJ,aAAevC,EAAOqB,KAAO,IAAMrB,EAAOsB,IAAM,KACpD,IAAM8B,EAAIC,YAAQrB,KAAKD,MAAMzC,aAAcA,GAC3CC,EAAa6D,EAAE7D,WACfD,EAAe8D,EAAE9D,cAQnBgE,YA9C4B,SA8ChBvF,GACV,OAAOA,EAAOwF,OAAO,SAAC3E,EAAWhB,GAC/B,OAAOA,EAAEb,KAAKgG,OAASnE,EAAIhB,EAAEb,KAAKgG,OAASnE,GAC1C,IAOL+F,YAxD4B,SAwDhB5H,GAAsB,IAAA2G,EACQ1B,KAAKD,MAArC/B,EADwB0D,EACxB1D,OAAQS,EADgBiD,EAChBjD,MAAOX,EADS4D,EACT5D,OAAQD,EADC6D,EACD7D,KACzByD,EAActB,KAAKsB,YAAYvG,EAAKgB,QAE1CsB,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIsD,UAAU,WAAWC,SAEzB,IACI2P,EACAhO,EACAC,EACAgO,EAJEC,EAAIzQ,KAAK8E,aAKTnD,EAAY5G,EAAKgB,OAAOwF,OAAO,SAAC3E,EAAahB,GACjD,SAAAkG,OAAWlF,EAAMhB,EAAEb,OAClB,IAEHyC,EAAEuB,OAAOhE,EAAKW,MACXsH,WAAW,CAAC,EAAGyN,IAElBlO,EAAQc,YAAWnH,GAAGsC,MAAMX,EAAK3B,EAAEsC,OACnCgE,EAAQyB,YAASzG,GAAGgB,MAAMX,EAAKL,EAAEgB,OAE7BiS,EAAInP,EAAc,IAEpBiB,EAAMkB,WAAWvH,EAAE6C,SAAS2E,OAAO,SAACzH,EAAGJ,GAAJ,QAAYA,EAAI,QAGrD0U,EAAUrO,YAAOP,EAAW,SAAC1F,GAAD,OAAOA,KAC3B,GAAK,EACbuU,EAAS,CAAC,EAAG/R,EAAsB,EAAbT,EAAOsB,IAAWzB,EAAKL,EAAEiB,OAC/CvC,EAAEoG,MAAMkO,GACLzR,OAAOwR,GAEVlT,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAC3BA,KAAK,YAAa,aAAe1C,EAAKL,EAAEiB,MAAQ,QAChDsF,KAAKvB,GAERnF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAC3BA,KAAK,YAAa,aAAe1C,EAAKL,EAAEiB,MAAQ,KAC9CX,EAASD,EAAK3B,EAAE4B,OAAwB,EAAdE,EAAOqB,MAAa,KAChD0E,KAAKxB,GAER6B,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAKL,EAAES,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAKL,EAAEe,KAAKN,OAEvDmG,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAK3B,EAAE+B,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAK3B,EAAEqC,KAAKN,QAOzDyS,UA7G4B,SA6GlBC,GAAsB,IAAAlM,EAAAzE,KACVA,KAAKsB,YAAYqP,EAAK5U,QAC1C4U,EAAK5U,OAAOJ,QAAQ,SAACiV,EAAwBzL,GAC3CV,EAAKoM,YAAYF,EAAKjV,KAAMkV,EAAKzL,EAAUwL,EAAK5U,OAAOgF,WAU3D+B,UA1H4B,WA0HR,IAAAF,EACc5C,KAAKD,MAA7BlC,EADU+E,EACV/E,KACR,OAFkB+E,EACJnE,MACgB,EAFZmE,EACG5E,OACEqB,KAAYxB,EAAKL,EAAEiB,OAS5CqG,WArI4B,WAqIP,IAAAJ,EACc1E,KAAKD,MAA9BjC,EADW4G,EACX5G,OAAQE,EADG0G,EACH1G,OAAQH,EADL6G,EACK7G,KACxB,OAAOC,EAAuB,EAAbE,EAAOsB,IAAWzB,EAAK3B,EAAE4B,QAO5CoF,cA9I4B,WAgJ1B,OAAmC,GADlBlD,KAAKD,MAAdhF,KACMgB,OAAOgF,OAAS,IAOhC+P,UAvJ4B,WAuJhB,IAAA1K,EACyCpG,KAAKD,MAA3BhF,GADnBqL,EACFvI,KADEuI,EACI3H,MADJ2H,EACWpI,OADXoI,EACmBrL,MAAM2D,EADzB0H,EACyB1H,IAC7B+R,GAFIrK,EAC8BhI,OAC9B4B,KAAK8E,cACTxD,EAActB,KAAKsB,YAAYvG,EAAKgB,QACpCgV,EAAWhW,EAAKgB,OAAOgF,OACzB+P,EAAaL,EAAInP,EAA6B,EAAb5C,EAAIV,OAAcgC,KAAKkD,gBAU5D,OAPI4N,EAAY,IACdpS,EAAIV,OAAS,EACb8S,EAAYnE,KAAK3N,IAAI,GAAIyR,GAAKnP,EAAc,GAAK5C,EAAIV,QACnDsD,IAIGwP,EAAYC,GAUrBF,YAhL4B,SAiL1BnV,EAAgBkV,EAChBzL,EAAkB4L,GAClB,IAGIC,EAHJ7K,EAAAnG,KAAAiR,EAEsCjR,KAAKD,MADZrB,GAD/BuS,EACQnT,OADRmT,EACgBxS,MADhBwS,EACuBjT,OADvBiT,EAC+BvS,KAAKI,EADpCmS,EACoCnS,MAAOI,EAD3C+R,EAC2C/R,SACzCrB,EAFFoT,EAEEpT,KAAMO,EAFR6S,EAEQ7S,OAAQsB,EAFhBuR,EAEgBvR,IAAKE,EAFrBqR,EAEqBrR,aAEfkR,EAAY9Q,KAAK8Q,YACjBnM,EAASC,YAAagM,EAAIjM,QAAU3E,KAAKD,MAAMlB,aAC/CsQ,EAAeyB,EAAIzB,aAAevK,YAAagM,EAAIzB,cAAgB,KAEnE7E,EAAW,QAAUnF,EAK3B9H,EAAIsD,UAAU2J,GAAU1J,UAGxBoQ,EAAU3T,EAAIsD,UAAU2J,GACrBvP,KAAK6V,EAAI7V,MACTkK,QACA3E,OAAO,QACPC,KAAK,QAAS,OAAS+J,GACvB/J,KAAK,IAAK,SAACtE,EAAGsQ,EAAO2E,GACpB,OAAOxS,EAAIV,QACN8S,EAA0B,EAAbpS,EAAIV,QAAgBuO,EAdlB,SAACA,GAAD,OAAwB,IAAbwE,EAC/B,GACExE,EAAQpH,IAAa2L,EAAY3K,EAAKjD,iBAapCiO,CAAgB5E,KAErBhM,KAAK,SAAU,SAACtE,GAAD,OAAO6U,IACtBvQ,KAAK,OAAQ,SAACtE,EAAGJ,GAAJ,OAAU8I,EAAO9I,KAC9BwJ,GAAG,YAAa,SAACpJ,EAAWJ,GAC3B0B,EAAWgI,KAAK,kBAAM3F,EAAalE,EAAMG,EAAGI,KAC5CyD,EAAI8F,GAAGC,GAAGnI,KAEX+H,GAAG,YAAa,kBAAM3F,EAAI8F,GAAGE,KAAKpI,KAClC+H,GAAG,WAAY,kBAAM3F,EAAI8F,GAAGG,IAAIrI,KAChCiD,KAAK,IAAK,SAACtE,GAAD,OAAuB4B,EAAKL,EAAEiB,MAAQZ,EAAKL,EAAES,MAAM,kBAC7DsC,KAAK,QAAS,IAETA,KAAK,SAAU,SAACtE,EAAGJ,GACzB,OAAIsT,EACKA,EAAatT,GAES,mBAAjBuC,EAAOmB,MACjBnB,EAAOmB,MAAMtD,EAAGJ,EAAG8I,GACnBvG,EAAOmB,QAEVgB,KAAK,kBAAmB,cACxBA,KAAK,eAAgBnC,EAAOK,OAC5B8B,KAAK,iBAAkBnC,EAAOqB,SAER,KAArBrB,EAAOoB,WACTwR,EAAQzQ,KAAK,mBAAoBnC,EAAOoB,WAI1CwR,EACG7M,aACAjF,SAASA,GACTJ,MAAMA,GAENyB,KAAK,mBACJ,SAACtE,GACC,IAAMmV,EAAelV,EAAED,GACvB,OAAUmV,EAAeN,EAAYM,EAArC,IAAqDN,IAExDvQ,KAAK,QACJ,SAACtE,GAAD,OAAuBC,EAAED,KAE7B+U,EAAQlL,OAAOlF,UAOjB0O,UA7P4B,SA6PlBvP,GAAwB,IAQ5BgF,EACAsM,EARItW,EAA4CgF,EAA5ChF,KAAM+C,EAAsCiC,EAAtCjC,OAAQW,EAA8BsB,EAA9BtB,MAAOZ,EAAuBkC,EAAvBlC,KAAMsB,EAAiBY,EAAjBZ,KAAMnB,EAAW+B,EAAX/B,OACnCQ,EAAQwB,KAAKsB,YAAYvG,EAAKgB,QAC9ByT,EAAY3R,EAAKL,EAAES,MAAM,gBACzBwR,EACD5R,EAAKL,EAAEiB,MAAQuB,KAAKkD,gBAAkB,EADrCuM,EAED,EAMDtQ,EAAKjD,EAAEkD,WAET2F,EAAI1H,EAAIiD,OAAO,KACZC,KAAK,QAAS,cACdA,KAAK,YAFJ,aAE8BkP,EAF9B,KAE2CA,EAF3C,MAIF1L,KAvWR,SAA0BvF,GACxB,YAD2C,IAAnBA,MAAgB,GACjCyF,YAASzG,GACbgB,MAAMA,GAqWEkR,CAAiBvQ,EAAKjD,EAAEsC,OAASA,GACrC8E,UAAU7E,EAAuB,EAAdT,EAAOqB,KAAYxB,EAAKL,EAAEiB,OAC7CmF,WAAW,iBAAM,MAEpBQ,YAAMW,EAAEpE,UAAU,cAAexB,EAAKjD,EAAE+B,OACxCmG,YAAMW,EAAEpE,UAAU,WAAY,CAAEvC,OAAQ,iBAItCe,EAAK3B,EAAE4B,UAETiS,EAAKhU,EAAIiD,OAAO,KACbC,KAAK,QAAS,cACdA,KAAK,YAAa,cAAgB1C,EAAKL,EAAEiB,MAAQ+Q,GAAa,MAC1D1R,EAASD,EAAK3B,EAAE4B,OAAuB,EAAbE,EAAOsB,KAAY,KACjDyE,KA5XT,SAA0BvF,GACxB,YAD2C,IAAnBA,MAAgB,GACjC6E,YAAWnH,GACfsC,MAAMA,GA0XGmR,CAAiBxQ,EAAK3B,EAAEgB,OAASA,GACpC8E,UAAUxF,EAAwB,EAAdE,EAAOqB,KAAYxB,EAAK3B,EAAE4B,QAC9C8F,WAAW,iBAAM,MAEtBQ,YAAMiN,EAAG1Q,UAAU,cAAexB,EAAK3B,EAAES,OAEzCmG,YAAMiN,EAAG1Q,UAAU,WAAY,CAAEvC,OAAQ,kBAS7CoC,OA7S4B,SA6SrBV,EAAiBC,GACjBA,EAAMhF,OAGXiF,KAAKD,MAAQW,EAAM9C,EAAcmC,GACjCC,KAAKE,SAASJ,GACTE,KAAKD,MAAMhF,KAAKW,OAIrBsE,KAAK2C,YAAY3C,KAAKD,MAAMhF,MAC5BiF,KAAKsP,UAAUtP,KAAKD,OACpBC,KAAK0Q,UAAU1Q,KAAKD,MAAMhF,SAO5ByL,QAhU4B,SAgUpB1G,GACNzC,EAAIsD,UAAU,WAAWC,YChbzBlE,cAmDJ,SAAAA,EAAYqD,GAAwB,IAAA0E,EAAA,OAClCA,EAAAgC,EAAA1C,KAAA/D,KAAMD,IAANC,MACKsR,UAAYhB,IACjB7L,EAAKxJ,MAAQ,CACX0L,YAAa,KAJmBlC,sCAW5BmC,aAAR,WAAuB,IAAAT,EAAAnG,KACf6G,EAAO7G,KAAK8G,aACZrI,EAASuB,KAAK+G,KAAO/G,KAAK+G,IAAIC,YAAehH,KAAK+G,IAAIC,YAAc,EAE1EhH,KAAKiH,SAAS,CACZN,YAAalI,GACZ,kBAAM0H,EAAKmL,UAAUzR,OAAOgH,EAAMV,EAAKe,sBAMrCC,kBAAP,WAA2B,IAAAC,EAAApH,KACzBA,KAAKsR,UAAUzR,OAAOG,KAAK8G,aAAc9G,KAAKkH,iBACrB,SAArBlH,KAAKD,MAAMtB,QACb4I,OAAOC,iBAAiB,SAAU,SAACC,GAAD,OAAOH,EAAKR,iBAC9C5G,KAAK4G,mBAOFY,mBAAP,WACExH,KAAKsR,UAAU9Q,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAOzCA,cAAP,WAAwC,IAChCzI,EAAUuB,KAAKD,MAAftB,MADgCwC,EAERjB,KAAKD,MAAd0H,GAFiBxG,EAE9ByG,SAF8BC,IAAA1G,EAAA,eAOtC,MAJc,SAAVxC,IACFA,EAAQuB,KAAK/E,MAAM0L,aAAe,KAGpCvL,OAAAC,OAAA,GACKoM,EADL,CAEEhJ,aAQG8S,0BAAP,SAAiCxR,GAC/BC,KAAKsR,UAAU9Q,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAOzCU,qBAAP,WAC2B,SAArB5H,KAAKD,MAAMtB,OACb4I,OAAOQ,oBAAoB,SAAU7H,KAAK4G,cAE5C5G,KAAKsR,UAAU9K,QAAQxG,KAAK8G,iBAOtBA,WAAR,WACE,OAAOgB,cAAqB9H,KAAK+G,QAO5BgB,OAAP,WAA6B,IAAAC,EAAAhI,KAC3B,OAAQiI,EAAA,qBAAKlB,IAAK,SAACA,GAAD,OAASiB,EAAKjB,IAAMA,GAAKnI,UAAU,kCA1IvBsJ,aAA5BxL,EAKUkB,aAAe,CAC3BC,KAAM,GACNa,IAAK,CACHV,OAAQ,EACRS,MAAO,IAETU,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPlB,OAAQ,CACNmB,MAAO,SAACtD,EAAGJ,EAAG8I,GAAP,OAAkBwD,YAAIxD,EAAO9I,IAAIuM,OAAO,IAC/C3J,MAAO,GAETmB,aAAc,SAAClE,EAAgBG,EAAGI,GAApB,OACZP,EAAKG,GAAK,SAAWI,EAAEqM,QAAQ,IACjC7J,MAAO,QAkGI/B,mFC9IF8U,EAAc,SAAC3T,GAC1B,IAAI3B,EACAsB,EACJ,OAAQK,EAAK3B,EAAEgF,OACb,IAAK,MACHhF,EAAIuV,cAAWC,OAAM,GACrB,MACF,IAAK,OACHxV,EAAIyV,cACJ,MACF,QACEzV,EAAIuB,cAIR,OAAQI,EAAKL,EAAE0D,OACb,IAAK,MACH1D,EAAIiU,cAAWC,OAAM,GACrB,MACF,IAAK,OACHxV,EAAIyV,cACJ,MACF,QACEnU,EAAIC,cAGR,MAAO,CAACvB,EAAGsB,ICEAoU,EAAe,WAC1B,IAAIvU,EACAC,EACAuU,EACAC,EACAvU,EAGFwU,EAAY,CACVC,UAAWC,IACX/T,MAAM,EACNgU,MAAM,EACN9T,OAAQ,UACR+T,gBAAiB,MACjBC,iBAAkB,GAGhBC,EAAwB,CAC5BnU,KAAM,yBACNoU,OAAQ,EACRJ,MAAM,EACN9T,OAAQ,WAGJR,EAAgC,CACpCC,KAAM,CACJ3B,EAAG,CACD4B,OAAQ,GACRoD,MAAO,SACPjD,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,UAIZV,EAAG,CACD0D,MAAO,SACPjD,MAAO,CACLC,KAAQ,OACRC,kBAAmB,aACnBC,OAAU,OACVC,iBAAkB,EAClBC,eAAgB,GAElBC,KAAM,CACJN,MAAO,CACLC,KAAM,SAGVM,MAAO,GACPC,MAAO,KAGXG,UAAW,gBACX4G,GAAI+M,IACJpT,KAAM,CACJjD,EAAG,CACD+B,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,GAEX5B,EAAG,CACDS,MAAO,CACLC,KAAQ,OACRE,OAAU,OACVC,iBAAkB,GAClBC,eAAgB,GAElBE,MAAO,EACPY,SAAS,IAGbtB,OAAQ,IACR0U,KAAMT,EACN/T,OAAQ,CACNqB,KAAM,EACNC,IAAK,GAEPmT,MAAOJ,EACP3S,IAAKC,IACLrC,aAAc,OACdsC,aAAc,SAAC+Q,EAAM9U,EAAGI,GACtB,cAAe0U,EAAK9U,GAAGK,GACrB,IAAK,SACH,OAAO4V,EAAYnB,EAAK9U,GAAGK,GAAK,KAAOyU,EAAK9U,GAAG2B,EACjD,QACE,OAAOgR,OAAOmC,EAAK9U,GAAGK,GAAGoM,QAAQ,GAAK,KAAOqI,EAAK9U,GAAG2B,IAG3DiB,MAAO,KAGHiU,EAAa,CACjBF,KAAMT,EACNU,MAAOJ,GAyUT,MAjUoB,CAIlBxS,OAJkB,SAIXC,EAAUC,QAAoB,IAApBA,MAAgB,IAC/BC,KAAKD,MAAQW,EAAM9C,EAAcmC,GACjCC,KAAKE,SAASJ,GACdE,KAAKI,aAH8B,IAAAuS,EAIhBnB,EAAYxR,KAAKD,MAAMlC,MAAzCmC,KAAK9D,EAJ6ByW,EAAA,GAI1B3S,KAAKxC,EAJqBmV,EAAA,GAKnC3S,KAAKG,WACLH,KAAKK,UAAYhD,EACdiD,OAAO,KACPC,KAAK,QAAS,uBAEjBP,KAAK4S,cAAgB5S,KAAKK,UACvBC,OAAO,KACPC,KAAK,QAAS,kBACjBP,KAAK6S,aAAa7S,KAAKD,MAAMhF,MAC7BiF,KAAKQ,OAAOV,EAAIE,KAAKD,QAOvBG,SAzBkB,SAyBTJ,GACP,GAAIzC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANnB,IAAAI,EASkCjB,KAAKD,MAA1C/B,EATGiD,EASHjD,OAAQS,EATLwC,EASKxC,MAAOX,EATZmD,EASYnD,OAAQc,EATpBqC,EASoBrC,UACzBsC,EACD,EAAKlD,EAAOqB,KAAOZ,EADlByC,EAED,EAAKlD,EAAOsB,IAAMxB,EAIvBT,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,GACd8B,KAAK,SAAUzC,GACfwC,OAAO,KACPC,KAAK,YALF,aAK4BvC,EAAOqB,KALnC,IAK2CrB,EAAOsB,IALlD,WAKgE4B,EALhE,IAK2EA,EAL3E,KAON,IAAME,EAAIC,YAAQrB,KAAKD,MAAMzC,aAAcA,GAC3CC,EAAa6D,EAAE7D,WACfD,EAAe8D,EAAE9D,cAOnBwV,kBAzDkB,SAyDA/X,GAA2B,IAAA0J,EAAAzE,KAAA0B,EACrB1B,KAAKD,MAAnBlC,EADmC6D,EACnC7D,KAAM6B,EAD6BgC,EAC7BhC,IACRoE,EAAaiP,YAAclV,GAE3BmV,EAAiBhT,KAAKK,UAAUM,UAAU,KAAK5F,KAAKA,GAQpDkY,EAASD,EAAe/N,QAC3B3E,OAAO,KACPC,KAAK,QAAS,SAACtE,EAAGJ,GAAJ,MAAkB,kBAAoBA,IACpD6E,MAAMsS,GACNrS,UAAU,UACV5F,KAAK,SAACkB,GACL,OAAOA,EAAElB,KAAKgH,IAAI,SAACmR,GAAD,OAAA9X,OAAAC,OAAA,GACb6X,EADa,CAEhBT,MAAOxW,EAAEwW,YAKfQ,EAAO1S,KAAK,QAAS,UAKrB0S,EAAOhO,QAAQ3E,OAAO,UACnBC,KAAK,QAAS,SACd8E,GAAG,YAxBc,SAACpJ,EAAsBJ,GACzC0B,EAAWgI,KAAK,kBAAMd,EAAK1E,MAAMH,aAAa,CAAC3D,GAAI,KACnDyD,EAAI8F,GAAGC,GAAGnI,KAuBT+H,GAAG,YAAa,kBAAM3F,EAAI8F,GAAGE,KAAKpI,KAClC+H,GAAG,WAAY,kBAAM3F,EAAI8F,GAAGG,IAAIrI,KAChCoD,MAAMuS,GACN1S,KAAK,QAAS,SACdA,KAAK,KAAM,SAACtE,GAAD,OAAOwI,EAAKjH,EAAEvB,EAAEuB,KAC3B+C,KAAK,IAAK,SAACtE,EAAGJ,GAAJ,OAAkB,IAC5B0E,KAAK,OAAQ,SAACtE,GAAD,OAAOA,EAAEwW,MAAMvU,OAC5BqC,KAAK,SAAU,SAACtE,GAAD,OAAOA,EAAEwW,MAAMrU,SAC9BmC,KAAK,KAAM,SAACtE,GACX,OAAOwI,EAAKvI,EAAED,EAAEC,GAAK4H,IAEtBK,aACAjF,SAAS,KACTqB,KAAK,IAAK,SAACtE,GAAD,OAAOA,EAAEwW,MAAMP,KAAOjW,EAAEwW,MAAMH,OAAS,IACjDxT,MAAM,KAGTkU,EAAelN,OAAOlF,SACtBqS,EAAOnN,OAAOlF,UAGhBR,WA/GkB,WAgHhBJ,KAAKuC,MAAQlF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAC3CP,KAAKwC,MAAQnF,EAAIiD,OAAO,KAAKC,KAAK,QAAS,UAE3CP,KAAKyC,WAAapF,EAAIiD,OAAO,KAC7BN,KAAK0C,WAAarF,EAAIiD,OAAO,MAM/BqC,YA1HkB,SA0HN5H,GAA6D,IAInE0G,EACA8O,EALmE3N,EAE9C5C,KAAKD,MAAtBlC,EAF+D+E,EAE/D/E,KAAMC,EAFyD8E,EAEzD9E,OACR+E,EAAIC,YAAU9C,KAAKD,OAGnBoT,EAAY,GACZC,EAAY,GACZ5Q,EAAQyB,YAASjE,KAAKxC,GACxBK,EAAKL,EAAEiG,WACTjB,EAAMiB,WAAW5F,EAAKL,EAAEiG,YAExBjB,EAAMhE,MAAMX,EAAKL,EAAEgB,OAEjBX,EAAKL,EAAE6V,cACT7Q,EAAMoB,WAAW0P,YAAOzV,EAAKL,EAAE6V,eAGjC,IAAM9Q,EAAQc,YAAWrD,KAAK9D,GAC1B2B,EAAK3B,EAAEuH,YACTlB,EAAMkB,WAAW5F,EAAK3B,EAAEuH,YAEL,SAAjB5F,EAAK3B,EAAEgF,OAAoBrD,EAAK3B,EAAEyH,YACpCpB,EAAMqB,WAAWC,YAAWhG,EAAK3B,EAAEyH,aAErC,IAAMtB,EAAckR,YAAe1V,GAC7BiG,EAAaiP,YAAclV,GAEjC9C,EAAKY,QAAQ,SAACH,GACZA,EAAMT,KAAKY,QAAQ,SAACM,GAClB,IAAIuX,EAAUvX,EAAEuB,EACZiW,EAAUxX,EAAEC,EACK,QAAjB2B,EAAKL,EAAE0D,OAA2B,IAARjF,EAAEuB,IAC9BgW,EA/QmB,MAiRA,QAAjB3V,EAAK3B,EAAEgF,OAA2B,IAARjF,EAAEC,IAC9BuX,EAlRmB,MAoRrBN,EAAG7M,KAAMkN,GACTJ,EAAG9M,KAAMmN,OAGbhS,EAAUS,YAAOiR,GACjB5C,EAAUrO,YAAOkR,GAEI,QAAjBvV,EAAKL,EAAE0D,OA3Rc,OA2RKO,EAAQ,KACpCA,EAAQ,GAAK,GAEM,QAAjB5D,EAAK3B,EAAEgF,OA9Rc,OA8RKqP,EAAQ,KACpCA,EAAQ,GAAK,GAEfvQ,KAAK9D,EACF6C,OAAOwR,GACPvN,WAAW,CAAC,EAAGH,IAElB7C,KAAKxC,EAAEuB,OAAO0C,GACXa,MAAM,CAACxE,EAASuE,EAAa,IAEhCrC,KAAKwC,MACFjC,KAAK,YADR,aACkCuD,EADlC,QAEGK,aACAJ,KAAKvB,GAERxC,KAAKuC,MACFhC,KAAK,YADR,aACkCuD,EADlC,KACiDhG,EAASuE,GAD1D,KAEG0B,KAAKxB,GAER6B,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAKL,EAAES,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAKL,EAAEe,KAAKN,OAEvDmG,YAAM/G,EAAIsD,UAAU,uCAAwC9C,EAAK3B,EAAE+B,OACnEmG,YAAM/G,EAAIsD,UAAU,sBAAuB9C,EAAK3B,EAAEqC,KAAKN,QAGzD4U,aApMkB,SAoML9X,GAA2B,IAAAoL,EAAAnG,KACtCjF,EAAKY,QAAQ,SAACM,EAAGJ,GACfsK,EAAKyM,cAActS,OAAO,QACvBC,KAAK,QADR,QACyB1E,KAI3Bd,EACGY,QAAQ,SAACM,EAAGJ,GACXsK,EAAKyM,cAActS,OAAO,QACvBC,KAAK,QADR,QACyB1E,MAS/B6X,WAvNkB,SAuNP3Y,GAA2B,IAAAqM,EAAApH,KAC5BnC,EAASmC,KAAKD,MAAdlC,KACFiG,EAAaiP,YAAclV,GAGjC9C,EAAKY,QAAQ,SAACM,EAAGJ,GACfuL,EAAKwL,cAAczR,OAAnB,SAAmCtF,GAChC0E,KAAK,OAAQ,QACbA,KAAK,oBAAqBtE,EAAEuW,KAAKJ,kBACjC7R,KAAK,mBAAoBtE,EAAEuW,KAAKJ,kBAChC7R,KAAK,SAAUtE,EAAEuW,KAAKpU,QACtB+F,aACAjF,SAAS,KACTqB,KAAK,IAzOA,SAACyR,EAAWlO,EAAY5H,EAAGsB,GAA3B,OAAiCgV,cAC5CmB,MAAM3B,GACN9V,EAAE,SAACD,GAAD,OAAYC,EAAED,EAAEC,GAAK4H,IACvBtG,EAAE,SAACvB,GAAD,OAAYuB,EAAEvB,EAAEuB,KAsOFmW,CAAM1X,EAAEuW,KAAKR,UAAWlO,EAAYsD,EAAKlL,EAAGkL,EAAK5J,EAAjDmW,CAAoD1X,EAAElB,OAChE+D,MAAM,OAOb8U,UA5OkB,SA4OR7Y,GAA2B,IAAAiN,EAAAhI,KAAA0E,EACV1E,KAAKD,MAAtBlC,EAD2B6G,EAC3B7G,KAAMC,EADqB4G,EACrB5G,OACRgG,EAAaiP,YAAclV,GAC3BwE,EAAckR,YAAe1V,GAQnC9C,EACGY,QAAQ,SAACM,EAAGJ,GARE,IAACmW,EASdhK,EAAK4K,cAAczR,OAAnB,SAAmCtF,GAChC0E,KAAK,OAAQtE,EAAEuW,KAAKtU,KAAKA,MACzBD,MAAM,UAAWhC,EAAEuW,KAAKN,MAAQjW,EAAEuW,KAAKtU,KAAKgU,KAAO,EAAI,GACvD/N,aACAjF,SAAS,KACTJ,MAAM,IACNyB,KAAK,KAfMyR,EAeQ/V,EAAEuW,KAAKR,UAfD6B,cAC7BF,MAAM3B,GACN9V,EAAE,SAACD,GAAD,OAAY+L,EAAK9L,EAAED,EAAEC,GAAK4H,IAC5BgQ,GAAG,SAAC7X,GAAD,OAAO6B,EAASuE,IACnB0R,GAAG,SAAC9X,GAAD,OAAY+L,EAAKxK,EAAEvB,EAAEuB,MAWiBvB,EAAElB,UAShDuG,YAxQkB,SAwQNvG,GACV,OAAOA,EAAKwG,OAAO,SAAC3E,EAAWhB,GAC7B,OAAOA,EAAEb,KAAKgG,OAASnE,EAAIhB,EAAEb,KAAKgG,OAASnE,GAC1C,IAGLuD,SA9QkB,WA+QhBH,KAAKiG,MAAQ5I,EAAIiD,OAAO,KACrBC,KAAK,QAAS,cACjBP,KAAKkG,MAAQ7I,EAAIiD,OAAO,KACrBC,KAAK,QAAS,eAMnBC,OAxRkB,SAwRXV,EAAaC,GAClB,GAAKA,EAAMhF,KAAX,CAGAiZ,QAAQC,IAAI,iBAAkBlU,GAC9BC,KAAKD,MAAQW,EAAM9C,EAAcmC,GACjCiU,QAAQC,IAAI,SAAUjU,KAAKD,MAAM0S,OANR,IAAAyB,EAON1C,EAAYxR,KAAKD,MAAMlC,MAAzCmC,KAAK9D,EAPmBgY,EAAA,GAOhBlU,KAAKxC,EAPW0W,EAAA,GAQzB,IAAInZ,EAAOgF,EAAMhF,KAEjB8W,EAAasC,YAAUpU,EAAMlC,KAAK3B,EAAEyH,YACpCmO,EAAcjO,YAAW9D,EAAMlC,KAAK3B,EAAEyH,YACtC5I,EAAOA,EAAKgH,IAAI,SAACvG,GAYf,MAX2B,SAAvBuE,EAAMlC,KAAK3B,EAAEgF,QACf1F,EAAMT,KAAOS,EAAMT,KAAKgH,IAAI,SAAC9F,GAO3B,OANUb,OAAAC,OAAA,GACLY,EADK,CAERC,EAAkB,iBAARD,EAAEC,EACRD,EAAEC,EACF2V,EAAW5V,EAAEC,EAAEmM,iBAKlBjN,OAAOC,OAAO,GAAIqX,EAAYlX,KAEvCwE,KAAK2C,YAAY5H,GACjBiF,KAAK0T,WAAW3Y,GAChBiF,KAAK4T,UAAU7Y,GACfwL,YAASvG,KAAK9D,EAAG8D,KAAKxC,EAAGwC,KAAKiG,MAAOjG,KAAKkG,MAAOlG,KAAKD,MAAOC,KAAKsB,YAAYvG,IAC9EiF,KAAK8S,kBAAkB/X,KAOzByL,QA7TkB,SA6TV1G,GACNzC,EAAIsD,UAAU,WAAWC,eCzZPsH,oBCtDXkM,EAAS,WACpB,IAAI/W,EAEEO,EAA0B,CAC9BgB,UAAW,SACX7D,KAAM,GACNsZ,QAAS,CACPC,SAAU,GACVnZ,KAAM,qBAER2C,OAAQ,IACRW,MAAO,KAuGT,MApGc,CAMZoB,OANY,SAMLC,EAAiBC,QAAgC,IAAhCA,MAA4B,IAClDC,KAAKC,WAAWF,GAChBC,KAAKE,SAASJ,GACdE,KAAKK,UAAYhD,EACdiD,OAAO,KACPC,KAAK,QAAS,uBAEjBP,KAAKQ,OAAOV,EAAIC,IAGlBE,WAhBY,SAgBDQ,GACTT,KAAKD,MAAQW,EAAiB9C,EAAc6C,GAC5CT,KAAKD,MAAMhF,KAAO0F,EAAS1F,MAQ7BmF,SA1BY,SA0BHJ,GACP,GAAIzC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANnB,IAAAI,EAS0BjB,KAAKD,MAAlCtB,EATGwC,EASHxC,MAAOX,EATJmD,EASInD,OAAQc,EATZqC,EASYrC,UAGvBvB,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,GACd8B,KAAK,SAAUzC,GACfyC,KAAK,UAJF,OAIoB9B,EAJpB,IAI6BX,GAChCwC,OAAO,MAMZiE,YAjDY,SAkDVxJ,EACAsZ,GACA,IAAA3S,EAE0B1B,KAAKD,MAAvBtB,EAFRiD,EAEQjD,MAAOX,EAFf4D,EAEe5D,OAETyW,EAAaC,cAChBtT,MAAOzC,EAAQ,EAAIkO,KAAK8H,GAFd,GAGVC,UAAU,CAAEjW,EAAQ,EAAKX,EAAS,IAE/B6W,EAAeC,cAClBL,WAAWA,GAOJvU,KAAKK,UACZM,UAAU,QACV5F,KAAKsZ,EAAQC,UAGdrP,QACC3E,OAAO,QACPC,KAAK,IAAKoU,IAQfnU,OAnFY,SAmFLV,EAAiBC,GACtB,GAAKA,EAAMhF,KAAX,CAGAiF,KAAKC,WAAWF,GAJwB,IAAA6C,EAKd5C,KAAKD,MAAvBhF,EALgC6H,EAKhC7H,KAAMsZ,EAL0BzR,EAK1ByR,QACdrU,KAAKuE,YAAYxJ,EAAMsZ,KAOzB7N,QAhGY,SAgGJ1G,GACNzC,EAAIsD,UAAU,WAAWC,YCrGzBiU,cAkBJ,SAAAA,EAAY9U,GAAkB,IAAA0E,EAAA,OAC5BA,EAAAgC,EAAA1C,KAAA/D,KAAMD,IAANC,MACK0G,MAAQ0N,IACb3P,EAAKxJ,MAAQ,CACX0L,YAAa,KAJalC,sCAWtBmC,aAAR,WAAuB,IAAAT,EAAAnG,KACf6G,EAAO7G,KAAK8G,aACZrI,EAASuB,KAAK+G,KAAO/G,KAAK+G,IAAIC,YAAehH,KAAK+G,IAAIC,YAAc,EAE1EhH,KAAKiH,SAAS,CACZN,YAAalI,GACZ,kBAAM0H,EAAKO,MAAM7G,OAAOgH,EAAMV,EAAKe,sBAMjCC,kBAAP,WAA2B,IAAAC,EAAApH,KACzBA,KAAK0G,MAAM7G,OAAOG,KAAK8G,aAAc9G,KAAKkH,iBACjB,SAArBlH,KAAKD,MAAMtB,QACb4I,OAAOC,iBAAiB,SAAU,SAACC,GAAD,OAAOH,EAAKR,iBAC9C5G,KAAK4G,mBAOFY,mBAAP,WACExH,KAAK0G,MAAMlG,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAOrCA,cAAP,WAAkC,IAC1BzI,EAAUuB,KAAKD,MAAftB,MAD0BwC,EAEFjB,KAAKD,MAAd0H,GAFWxG,EAExByG,SAFwBC,IAAA1G,EAAA,eAOhC,MAJc,SAAVxC,IACFA,EAAQuB,KAAK/E,MAAM0L,aAAe,KAGpCvL,OAAAC,OAAA,GACKoM,EADL,CAEEhJ,aAQGmJ,qBAAP,WAC2B,SAArB5H,KAAKD,MAAMtB,OACb4I,OAAOQ,oBAAoB,SAAU7H,KAAK4G,cAE5C5G,KAAK0G,MAAMF,QAAQxG,KAAK8G,iBAOlBA,WAAR,WACE,OAAOgB,cAAqB9H,KAAK+G,QAO5BgB,OAAP,WAA6B,IAAAC,EAAAhI,KAC3B,OAAQiI,EAAA,qBAAKlB,IAAK,SAACA,GAAD,OAASiB,EAAKjB,IAAMA,GAAKnI,UAAU,4BAjGvCsJ,aAAZ2M,EAKUjX,aAAmC,CAC/CyW,QAAS,CACPC,SAAU,GACVnZ,KAAM,qBAER2C,OAAQ,IACRW,MAAO,QA0FIoW,0CClGFC,EAAc,WAEzB,IAAIzX,EACAC,EACAC,EAEEK,EAA+B,CACnCmX,gBAAiB,OACjBnW,UAAW,cACXC,gBACA9D,KAAM,CACJW,KAAM,GACNK,OAAQ,IAEViZ,WAAY,EACZlX,OAAQ,IACRmX,OAAQ,CACNC,SAAS,EACTC,UAAW,SAAClZ,EAAGqJ,GAAJ,OAAWrJ,EAAEH,QAE1BkC,OAAQ,CACNqB,KAAM,GACNC,IAAK,IAEPI,IAAKC,IACLrC,aAAc,OACdsC,aAAc,SAAClE,EAAgBG,EAAWI,EAAW2J,GACnD,OAAOA,EAAa,KAAOlK,EAAKG,GAAK,SAAWI,GAElDmD,QAAS,GACTX,MAAO,KA6PT,MA1PmB,CAEjBoB,OAFiB,SAEVC,EAAiBC,GAAqC,IAAA0E,EAAAzE,UAAA,IAArCD,MAAiC,IACvDC,KAAKD,MAAQW,EAAM9C,EAADxC,OAAAC,OAAA,GAAoB0E,IACtCC,KAAKoV,aAAerV,EAAMhF,KAAKgB,OAAOgG,IAAI,SAAC6O,EAAwBzL,GACjE,OAAOyL,EAAI7V,KACRgH,IAAI,SAACsE,EAAOxK,GAAR,MAAe,CAClBwK,QACAT,WAAYgL,EAAI7S,MAChBA,MAAOgC,EAAMhF,KAAKW,KAAKG,QAG7BmE,KAAKE,SAASJ,GACdE,KAAKkO,WAAa,GAClBlO,KAAKoV,aAAazZ,QAAQ,SAAC0Z,EAASxZ,GAClC4I,EAAK6Q,YAAY7Q,EAAK1E,MAAMhF,KAAMc,KAGpCmE,KAAKQ,OAAOV,EAAIC,IAGlBG,SArBiB,SAqBRJ,GACP,GAAIzC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANnB,IAAAI,EASkCjB,KAAKD,MAA1C/B,EATGiD,EASHjD,OAAQS,EATLwC,EASKxC,MAAOX,EATZmD,EASYnD,OAAQc,EATpBqC,EASoBrC,UAG/BvB,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,GACd8B,KAAK,SAAUzC,GACfyC,KAAK,UAJF,OAIoB9B,EAJpB,IAI6BX,GAChCwC,OAAO,KACPC,KAAK,YACJ,aAAevC,EAAOqB,KAAO,IAAMrB,EAAOsB,IAAM,KAEpD,IAAM8B,EAAIC,YAAQrB,KAAKD,MAAMzC,aAAcA,GAC3CC,EAAa6D,EAAE7D,WACfD,EAAe8D,EAAE9D,cAGnBkD,OA/CiB,SA+CVV,EAAiBC,GACjBA,EAAMhF,OAGXiF,KAAKD,MAAQW,EAAM9C,EAAcmC,GAC7BA,EAAMlB,cACRmB,KAAKD,MAAMlB,YAAckB,EAAMlB,aAG5BmB,KAAKD,MAAMhF,KAAKW,MAIrBsE,KAAKuV,eAGPC,YA/DiB,SA+DLrQ,QAAc,IAAdA,MAAW,GAAG,IAAAzD,EACkB1B,KAAKD,MADvB0V,EAAA/T,EAChBsT,kBADgB,IAAAS,EACH,EADGA,EACAhX,EADAiD,EACAjD,MAAOX,EADP4D,EACO5D,OAEzBwU,EAAS3F,KAAK1N,IAAIR,EAAOX,GAAU,EACzC,OAAsB,IAAfkX,EACH1C,EAAS,GACTA,EAAS,GAAMnN,GAAY6P,EAAa,KAG9CU,YAxEiB,SAwELvQ,QAAc,IAAdA,MAAW,GAAG,IAAAvC,EACkB5C,KAAKD,MADvB4V,EAAA/S,EAChBoS,kBADgB,IAAAW,EACH,EADGA,EACAlX,EADAmE,EACAnE,MAAOX,EADP8E,EACO9E,OACzBwU,EAAS3F,KAAK1N,IAAIR,EAAOX,GAAU,EACzC,OAAsB,IAAfkX,EACH,EACA1C,EAAS,GAAK0C,EAAc7P,GAAY6P,EAAa,KAG3DO,WAhFiB,WAgFJ,IAAApP,EAAAnG,KAAA0E,EACe1E,KAAKD,MAAvBhF,EADG2J,EACH3J,KAAMqE,EADHsF,EACGtF,QACdY,KAAKgE,SAAWjJ,EAAKgB,OAAOgG,IAAI,SAAC6O,GAC/B,OAAOA,EAAI7V,KACRgH,IAAI,SAACsE,EAAOxK,GAAR,MAAe,CAClBwK,OAAiC,IAA1BjH,EAAQrE,EAAKW,KAAKG,IAAgBwK,EAAQ,EACjDT,WAAYgL,EAAI7S,MAChBA,MAAOhD,EAAKW,KAAKG,QAIvBmE,KAAKgE,SAASrI,QAAQ,SAAC0Z,EAASxZ,GAC9B,IAAM+Z,EAAQrS,EAAIxI,EAAKgB,OAAOF,GAAI,SAAUsK,EAAKpG,MAAMlB,aACvDsH,EAAK0P,UAAUR,EAASxZ,EAAGd,EAAKW,KAAMka,KAExC5V,KAAKoV,aAAepV,KAAKgE,UAG3BsR,YAlGiB,SAkGLva,EAAMc,GAAG,IAAAuK,EACwBpG,KAAKD,MAAxCgV,EADW3O,EACX2O,gBAAiBtW,EADN2H,EACM3H,MAAOX,EADbsI,EACatI,OAC1BgY,EAAM,EAAInJ,KAAK8H,GACfe,EAAcxV,KAAKwV,YAAY3Z,GAC/B6Z,EAAc1V,KAAK0V,YAAY7Z,GAC/Bka,EAAQC,cACXN,YAAYA,GACZF,YAAYA,GACZS,WAAW,GACXC,SAASJ,GAINK,EAHY9Y,EACfiD,OAAO,KACPC,KAAK,QAAS,UACYD,OAAO,QACjCC,KAAK,QAAS,kBACdtC,MAAM,OAAQ8W,GACjBoB,EAAWlR,QACR1E,KAAK,YAAa,aAAe9B,EAAQ,EAAI,IAAMX,EAAS,EAAI,KAChEyC,KAAK,IAAKwV,GAEbI,EAAWzV,MAAMyV,GAEZnW,KAAKkO,WAAWrS,KACnBmE,KAAKkO,WAAWrS,GAAKwB,EAClBiD,OAAO,KACPC,KAAK,QAAS,mBAIrBsV,UA/HiB,SA+HP9a,EAAMc,EAAWH,EAAgBka,GAAiB,IAAA3E,EACLjR,KAAKD,MAAlDkV,EADkDhE,EAClDgE,OAAQxW,EAD0CwS,EAC1CxS,MAAOX,EADmCmT,EACnCnT,OAAQ4B,EAD2BuR,EAC3BvR,IAAKE,EADsBqR,EACtBrR,aAE9B4V,EAAcxV,KAAKwV,YAAY3Z,GAC/B6Z,EAAc1V,KAAK0V,YAAY7Z,GAG/Bua,EAAUC,cACb3J,KAAK,MACL5Q,MAAM,SAACG,GACN,OAAOA,EAAEoK,QAIPiQ,EAAOF,EAAQpW,KAAKoV,aAAavZ,IAEjC8I,EAASC,YAAagR,GAEtBW,EAAUP,cACbR,YAAYA,GACZE,YAAYA,GAETc,EAAOxW,KAAKkO,WAAWrS,GAAG8E,UAAU,QACvC5F,KAAKqb,EAAQrb,IAENyb,EAAKvR,QAAQ3E,OAAO,KAC3BC,KAAK,QAAS,OAEfD,OAAO,QACNC,KAAK,YAAa,aAAe9B,EAAQ,EAAI,IAAMX,EAAS,EAAI,KAChEyC,KAAK,SAAU,QACfA,KAAK,OAAQ,SAACtE,EAAGwa,GAAJ,OAAU9R,EAAO8R,KAE9BC,KAAK,SAAUza,EAAGwa,GAAKzW,KAAK2W,SAAWL,EAAKG,KAC5ClW,KAAK,IAAKgW,GACVlR,GAAG,YAAa,SAACpJ,EAA8BqJ,GAC9C/H,EAAWgI,KAAK,kBAAM3F,EAAalE,EAAM4J,EAAIrJ,EAAElB,KAAKsL,MAAOpK,EAAElB,KAAK6K,cAClElG,EAAI8F,GAAGC,GAAGnI,KAEX+H,GAAG,YAAa,kBAAM3F,EAAI8F,GAAGE,KAAKpI,KAClC+H,GAAG,WAAY,kBAAM3F,EAAI8F,GAAGG,IAAIrI,KAChCW,MAAM,UAAW,GACjBkG,aACAjF,SAAS,KACTjB,MAAM,UAAW,GAGpBuY,EACG9V,MAAM8V,GAENnR,GAAG,YAAa,SAACpJ,EAA8BqJ,GAC9C/H,EAAWgI,KAAK,kBAAM3F,EAAalE,EAAM4J,EAAIrJ,EAAElB,KAAKsL,MAAOpK,EAAElB,KAAK6K,cAClElG,EAAI8F,GAAGC,GAAGnI,KAEX+H,GAAG,YAAa,kBAAM3F,EAAI8F,GAAGE,KAAKpI,KAClC+H,GAAG,WAAY,kBAAM3F,EAAI8F,GAAGG,IAAIrI,KAChC6G,aACArF,MAAM,KACNI,SAAS,KACTqB,KAAK,OAAQ,SAACtE,EAAGwa,GAAJ,OAAU9R,EAAO8R,KAC9BG,UAAU,IAoEnB,SAAkBL,GAChB,OAAO,SAAUta,GACf,IAAMJ,EAAIgb,YAAY7W,KAAK2W,SAAU1a,GAErC,OADA+D,KAAK2W,SAAW9a,EAAE,GACX,SAAUib,GACf,OAAOP,EAAQ1a,EAAEib,MAzECC,CAASR,IAE3B,IAAMS,EAAQhX,KAAKkO,WAAWrS,GAAG8E,UAAU,cACxC5F,KAAKqb,EAAQrb,IACDic,EAAM/R,QAAQ3E,OAAO,QACjCC,KAAK,QAAS,SACdmW,KAAK,WAEJ1W,KAAKiX,QAAUnZ,EACfkC,KAAKkX,OAASzY,IAEf8B,KAAK,YAAa,SAAUtE,GAC3B,IAAMkb,EAAWZ,EAAQY,SAASlb,GAGlC,MAAO,cAFGkb,EAAS,GAAMnX,KAAKkX,OAAS,GAEb,KADhBC,EAAS,GAAMnX,KAAKiX,QAAU,GACJ,MAErCP,KAAK,SAAUza,EAAGwa,GAEjBzW,KAAK2W,SAAW1a,IAEjBsC,KAAK,SAACtC,EAAGqJ,GACR,OAAgB,IAAZrJ,EAAEH,MACG,GAEFmZ,EAAOE,UAAUlZ,EAAGqJ,KAG/B0R,EACGtW,MAAMsW,GACN7S,aACAjF,SAAS,KACTjB,MAAM,UAAW,GACjBkG,aACA5D,KAAK,YAAa,SAAUtE,GAC3B,IAAMkb,EAAWZ,EAAQY,SAASlb,GAGlC,MAAO,cAFGkb,EAAS,GAAMnX,KAAKkX,OAAS,GAEb,KADhBC,EAAS,GAAMnX,KAAKiX,QAAU,GACJ,MAErC9S,aACAjF,SAAS,KACTjB,MAAM,UAAW,SAAChC,EAAGqJ,EAAItJ,GAExB,OAA0B,IAAnBiZ,EAAOC,SAAsC,IAAjBjZ,EAAElB,KAAKsL,OAAwC,IAAzBrK,EAAEsJ,GAAIqR,SAAS7a,MAAc,EAAI,IAG9Fkb,EAAMlR,OAAOlF,SAEb4V,EAAK1Q,OAAO3B,aACTjF,SAAS,KACTjB,MAAM,UAAW,GAAG2C,UAOzB4F,QArPiB,SAqPT1G,GACNzC,EAAIsD,UAAU,WAAWC,gBClQzBwW,cAmBJ,SAAAA,EAAYrX,GAAuB,IAAA0E,EAAA,OACjCA,EAAAgC,EAAA1C,KAAA/D,KAAMD,IAANC,MACK0G,MAAQoO,IAEbrQ,EAAKxJ,MAAQ,CACX0L,YAAa,KALkBlC,sCAY3BmC,aAAR,WAAuB,IAAAT,EAAAnG,KAEfvB,GADOuB,KAAK8G,aACH9G,KAAK+G,KAAO/G,KAAK+G,IAAIC,YAAehH,KAAK+G,IAAIC,YAAc,GAE1EhH,KAAKiH,SAAS,CACZN,YAAalI,GACZ,kBAAM0H,EAAKO,MAAM7G,OAAOsG,EAAKW,aAAcX,EAAKe,sBAM9CC,kBAAP,WAA2B,IAAAC,EAAApH,KACzBA,KAAK0G,MAAM7G,OAAOG,KAAK8G,aAAc9G,KAAKkH,iBACjB,SAArBlH,KAAKD,MAAMtB,QACb4I,OAAOC,iBAAiB,SAAU,SAACC,GAAD,OAAOH,EAAKR,iBAC9C5G,KAAK4G,mBAOFY,mBAAP,WACExH,KAAK0G,MAAMlG,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAOrCA,cAAP,WAAuC,IAC/BzI,EAAUuB,KAAKD,MAAftB,MAD+BwC,EAEPjB,KAAKD,MAAd0H,GAFgBxG,EAE7ByG,SAF6BC,IAAA1G,EAAA,eAMrC,MAHc,SAAVxC,IACFA,EAAQuB,KAAK/E,MAAM0L,aAAe,KAEpCvL,OAAAC,OAAA,GACKoM,EADL,CAEEhJ,aAQGmJ,qBAAP,WAC2B,SAArB5H,KAAKD,MAAMtB,OACb4I,OAAOQ,oBAAoB,SAAU7H,KAAK4G,cAE5C5G,KAAK0G,MAAMF,QAAQxG,KAAK8G,iBAOlBA,WAAR,WACE,OAAOgB,cAAqB9H,KAAK+G,QAO5BgB,OAAP,WAA6B,IAAAC,EAAAhI,KAC3B,OAAQiI,EAAA,qBAAKlB,IAAK,SAACA,GAAD,OAASiB,EAAKjB,IAAMA,GAAKnI,UAAU,iCAlGlCsJ,aAAjBkP,EAKUxZ,aAAwC,CACpDmX,gBAAiB,OACjBC,WAAY,EACZlX,OAAQ,IACRE,OAAQ,CACNqB,KAAM,EACNC,IAAK,wBA2FI8X,IChIFC,EAAiB,WAC5B,IAAIha,EAIAkF,EACAhD,EACAiD,EALE8U,EAAS7Z,cACT8Z,EAAS9Z,cACT+Z,EAAgB,GAKhB5Z,EAAe,CACnB6Z,QAAS,GACT7Y,UAAW,kBACXC,gBACA9D,KAAM,GACN+D,MAAO,EACPI,SAAU,IACVpB,OAAQ,IACR4Z,YAAa,IACblK,QAAS,GACT8E,OAAQ,EACR7T,MAAO,QAiPT,MA9OsB,CAOpBoB,OAPoB,SAObC,EAAaC,QAAyC,IAAzCA,MAA2BnC,GAC7CoC,KAAKD,MAAQW,EAAM9C,EAAcmC,GACjCC,KAAKQ,OAAOV,EAAIC,IASlBG,SAlBoB,SAkBXJ,EAAa/E,GACpB,GAAIsC,EAAK,CACPA,EAAIsD,UAAU,WAAWC,SACzBvD,EAAIuD,SACJ,IAAMC,EAAaf,EAAGgB,qBAAqB,OACvCD,EAAWE,OAAS,GACtBjB,EAAGkB,YAAYH,EAAW,IANa,IAAAI,EAUhBjB,KAAKD,MADxBtB,EATmCwC,EASnCxC,MAAOG,EAT4BqC,EAS5BrC,UAAWd,EATiBmD,EASjBnD,OACxB4Z,EAVyCzW,EAUzCyW,YAAalK,EAV4BvM,EAU5BuM,QAGfnQ,EAAM8D,YAAOrB,GAAIQ,OAAO,OACrBC,KAAK,QAAS3B,GACd2B,KAAK,QAAS9B,EAAQ+O,EAAUkK,GAChCnX,KAAK,SAAUzC,EAAS0P,GACxBlN,OAAO,KACPC,KAAK,YAAa,aAAeiN,EAAU,IAAMA,EAAU,EAAI,KAElEjO,EAAQqF,YAAa5E,KAAKD,MAAMlB,cAOlC8D,YA7CoB,SA6CR5H,GAAM,IAAA2G,EACmB1B,KAAKD,MAAhCjC,EADQ4D,EACR5D,OAAQ0P,EADA9L,EACA8L,QACVmK,EAFUjW,EACSjD,MACH1D,EAAKgG,OACrB6W,EAAQ9Z,EAAS/C,EAAKgG,OAC5BwW,EAAOjV,MAAM,CAACkL,EAAU,EAAGmK,EAAQnK,EAAU,IAC7C8J,EAAOhV,MAAM,CAACxE,EAAS0P,EAAU,EAAGA,EAAU,IAE9CnQ,EAAIsD,UAAU,WACX5F,KAAKA,GACLkK,QAAQ3E,OAAO,KACfC,KAAK,QAAS,UACdA,KAAK,YAAa,SAACtE,EAAGJ,GAAJ,MACjB,cAAgBd,EAAKgG,OAASlF,EAAI,GAAK8b,EAAQ,QAChDjB,KAAK,SAAUza,GACdsb,EAAOxY,OAAOyY,EAAcvb,IAC5BkF,YAAOnB,MAAM+D,KAAKxB,KAGtBlF,EAAIsD,UAAU,WACX5F,KAAKA,GACLkK,QAAQ3E,OAAO,KACfC,KAAK,QAAS,UACdA,KAAK,YAAa,SAACtE,EAAQJ,GAAT,MAAuB,eAAiBA,EAAI+b,EAAQ,MACtElB,KAAK,SAAUza,GACdqb,EAAOvY,OAAOyY,EAAcvb,IAC5BkF,YAAOnB,MAAM+D,KAAKvB,MAOxBqV,YA7EoB,WA6EN,IAAAjV,EAC+B5C,KAAKD,MAAxC0X,EADI7U,EACJ6U,QAASjK,EADL5K,EACK4K,QAAS/O,EADdmE,EACcnE,MAAOqZ,EADrBlV,EACqBkV,MACjC,QAAgBtU,IAAZiU,EAAJ,CAGA,IAAMM,EAAS1a,EAAIiD,OAAO,KACvBC,KAAK,YAAa,cAAgB9B,EAAQ+O,EAAU,GACnD,MAAQA,EAAU,IAAM,KAE5BuK,EAAOzX,OAAO,KAAKA,OAAO,QACvBC,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,KAAM,SACXhC,KAAK,SAACtC,GAAD,OAAO6b,IACfC,EAAOpX,UAAU,eACd5F,KAAK0c,GACLxS,QAAQ3E,OAAO,KACfoW,KAAK,SAAU1a,EAAGH,GACjB,IAAMmc,EAAO7W,YAAOnB,MACpBgY,EAAK1X,OAAO,QACTC,KAAK,QAAS,cACdA,KAAK,IAAK,GACVA,KAAK,IAAK,GAAU,GAAJ1E,GAChB0E,KAAK,OAAQhB,EAAM1D,IACnB0E,KAAK,SAAU,IACfA,KAAK,QAAS,IAEjByX,EAAK1X,OAAO,QACTC,KAAK,IAAK,IACVA,KAAK,IAAK,GAAU,GAAJ1E,GAChB0E,KAAK,KAAM,SACXhC,KAAK,SAACtC,GAAD,OAAOD,MAGnB+b,EAAOjS,OAAOlF,WAQhBqX,YAvHoB,SAuHRC,EAAQzZ,EAAeX,GAAgB,IAAA4G,EAEX1E,KAAKD,MADnChF,EADyC2J,EACzC3J,KAAM+D,EADmC4F,EACnC5F,MAAOI,EAD4BwF,EAC5BxF,SACnBuY,EAF+C/S,EAE/C+S,QAASK,EAFsCpT,EAEtCoT,MAAOtK,EAF+B9I,EAE/B8I,QAAS8E,EAFsB5N,EAEtB4N,OACrBtQ,EAAIkW,EAAOnX,OACJ1D,EAAIsD,UAAU,SACxB5F,KA2DH,SAAe6B,EAAGhB,GAChB,IAGIC,EACA4a,EAJEza,EAAI,GACJmc,EAAKvb,EAAEmE,OACPsD,EAAIzI,EAAEmF,OAGZ,IAAKlF,GAAK,IAAKA,EAAIsc,GACjB,IAAK1B,GAAK,IAAKA,EAAIpS,GACjBrI,EAAEsK,KAAK,CAAEpK,EAAGU,EAAEf,GAAIA,IAAG2B,EAAG5B,EAAE6a,GAAIA,MAGlC,OAAOza,EAtEDoc,CAAMF,EAAQA,IACnBjT,QAAQ3E,OAAO,KACfC,KAAK,QAAS,QACdA,KAAK,YAAa,SAACtE,GAAD,MAAO,cAAgB+F,EAAI/F,EAAEJ,EAAI,GAAK4C,EACvD,IAAMxC,EAAEwa,EAAIhY,EAAQ,MACrBiY,KAaH,SAAcrI,GACZ,IAAMgK,EAAWlX,YAAOnB,MAExBuX,EAAOxY,OAAOyY,EAAchJ,OAAOH,EAAEnS,KACrCob,EAAOvY,OAAOyY,EAAchJ,OAAOH,EAAE7Q,KAErC6a,EAAS/X,OAAO,QACbC,KAAK,QAAS,SACdA,KAAK,IAAKiN,EAAU,GACpBjN,KAAK,IAAKiN,EAAU,GACpBjN,KAAK,QAAS9B,EAAQ+O,GACtBjN,KAAK,SAAUzC,EAAS0P,GAElB6K,EAAS1X,UAAU,UACzB5F,KAAKA,EAAKud,QACVrT,QAAQ3E,OAAO,UACfC,KAAK,IAAK,SAACtE,GAAD,OAAOqW,IACjB/R,KAAK,KAAM,SAACtE,GAAD,OAAOsb,EAAOtb,EAAEuS,OAAOH,EAAEnS,OACpCqE,KAAK,KAAM,SAACtE,GAAD,OAAOqb,EAAOrb,EAAEuS,OAAOH,EAAE7Q,OACpCS,MAAM,OAAQ,SAAChC,GACd,GAAIA,EAAE6b,GAAQ,CACZ,IAAMjc,EAAI4b,EAAQrS,UAAU,SAACpJ,GAAD,OAAOA,IAAMC,EAAE6b,KAC3C,OAAOvY,EAAM1D,GAEf,MAAO,YAIRsI,aACAjF,SAASA,GACTJ,MAAMA,GACNyB,KAAK,IAAK,SAACtE,GAAD,OAAOqW,MAzCjB5O,OAAO,SAACzH,GAAD,OAAOA,EAAEJ,IAAMI,EAAEwa,IAAGnW,OAAO,QACpCC,KAAK,IAAKiN,GACVjN,KAAK,IAAKiN,GACVjN,KAAK,KAAM,SACXhC,KAAK,SAACtC,GAAD,OAAOA,EAAEC,KAmEnBsE,OA3MoB,SA2MbV,EAAaC,GAElB,GADAC,KAAKD,MAAL3E,OAAAC,OAAA,GAAkB2E,KAAKD,MAAUA,GAC5BA,EAAMhF,KAAX,CAF4C,IAAAqL,EAKApG,KAAKD,MAAzChF,EALoCqL,EAKpCrL,KAAMwd,EAL8BnS,EAK9BmS,WAAYza,EALkBsI,EAKlBtI,OAAQW,EALU2H,EAKV3H,MAClCuB,KAAKE,SAASJ,EAAIC,EAAMhF,MACxBiF,KAAK6X,cACL,IAAMK,EAASnd,EAAKiP,KAAKtG,OAAO,SAACuG,GAAD,OAAkC,IAA3BsO,EAAW9L,QAAQxC,KACpD0N,EAAQlZ,EAAQyZ,EAAOnX,OACvB6W,EAAQ9Z,EAASoa,EAAOnX,OACxBiB,EAAIkW,EAAOnX,OAEjBmX,EAAOvc,QAAQ,SAAC6c,GACdhB,EAAcgB,GAAStW,YAAOnH,EAAKud,OAAQ,SAACrc,GAAD,OAAOA,EAAEuc,OAEtDjW,EAAQc,YAAWkU,GAChB/Y,MAAM,GACN8E,SAASqU,EAAQ3V,GACpBQ,EAAQyB,YAASqT,GACd9Y,MAAM,GACN8E,UAAUsU,EAAQ5V,GAErBhC,KAAK2C,YAAYuV,GACjBlY,KAAKiY,YAAYC,EAAQP,EAAOC,KAOlCpR,QA1OoB,SA0OZ1G,GACNzC,EAAIsD,UAAU,WAAWC,YCpPzB6X,cAUJ,SAAAA,EAAY1Y,GAA0B,IAAA0E,EAAA,OACpCA,EAAAiU,EAAA3U,KAAA/D,KAAMD,IAANC,MACK0G,MAAQ2Q,IACb5S,EAAKxJ,MAAQ,CACXwc,QAAS,GACT1c,KAAM,GACNwd,WAAY,GACZza,OAAQ2G,EAAK1E,MAAMjC,OACnB6I,YAAa,IACbmR,MAAO,GACPrZ,MAAOgG,EAAK1E,MAAMtB,OAVgBgG,sCAc9BmC,aAAR,WAAuB,IAAAT,EAAAnG,KAAAiB,EACYjB,KAAKD,MAA9B2X,EADazW,EACbyW,YAAalK,EADAvM,EACAuM,QACfmL,EAAahM,KAAK3N,IAAI,IAAKgB,KAAK+G,IAAIC,YAAcwG,EAAUkK,GAC5DkB,EAAcjM,KAAK3N,IAAI,IAAKqI,OAAOwR,YAAcrL,EACrDxN,KAAK+G,IAAI+R,wBAAwBxZ,KAC7Bb,EAAQkO,KAAK1N,IAAI2Z,EAAaD,GAEpC3Y,KAAKiH,SAAS,CACZN,YAAalI,GACZ,kBAAM0H,EAAKO,MAAM7G,OAAOsG,EAAKW,aAAcX,EAAKe,sBAG9CC,kBAAP,WAA2B,IAAAC,EAAApH,KACzBA,KAAK0G,MAAM7G,OAAOG,KAAK8G,aAAc9G,KAAKkH,iBADjB,IAEjBzI,EAAUuB,KAAKD,MAAftB,MACa,iBAAVA,GAAgC,SAAVA,IAC/B4I,OAAOC,iBAAiB,SAAU,SAACC,GAAD,OAAOH,EAAKR,iBAC9C5G,KAAK4G,mBAIFY,mBAAP,WACExH,KAAK0G,MAAMlG,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAGpCA,cAAR,WAAqC,IAC7BzI,EAAUuB,KAAKD,MAAftB,MAD6BiD,EAEkB1B,KAAKD,MAAlDhF,EAF2B2G,EAE3B3G,KAAM0c,EAFqB/V,EAErB+V,QAASK,EAFYpW,EAEZoW,MAAOS,EAFK7W,EAEL6W,WAAYza,EAFP4D,EAEO5D,OAK1C,MAJqB,iBAAVW,GAAgC,SAAVA,IAC/BA,EAAQuB,KAAK/E,MAAM0L,aAAe,KAG7B,CACL8Q,UACA1c,OACAwd,aACAza,SACA6I,YAAa3G,KAAK/E,MAAM0L,YACxBmR,QACArZ,YAIG8S,0BAAP,SAAiCxR,GAC/BC,KAAK0G,MAAMlG,OAAOR,KAAK8G,aAAc9G,KAAKkH,oBAGrCU,qBAAP,WAA8B,IACpBnJ,EAAUuB,KAAKD,MAAftB,MACa,iBAAVA,GAAgC,SAAVA,GAC/B4I,OAAOQ,oBAAoB,SAAU7H,KAAK4G,cAE5C5G,KAAK0G,MAAMF,QAAQxG,KAAK8G,iBAGlBA,WAAR,WACE,OAAOgB,cAAqB9H,KAAK+G,QAG5BgB,OAAP,WAAgB,IAAAC,EAAAhI,KACd,OAAOiI,EAAA,qBAAKlB,IAAK,SAACA,GAAD,OAASiB,EAAKjB,IAAMA,GAAKnI,UAAU,oCApF9Bma,aAApBN,EAKU7a,aAAe,CAC3BE,OAAQ,IACRW,MAAO,QCxCX8J,EAAAtM,EAAAuM,EAAA,sBAAAwQ,IAAAzQ,EAAAtM,EAAAuM,EAAA,sBAAAyQ","file":"component---src-pages-histogram-tsx-9ffb1a526a4bcdbd08d0.js","sourcesContent":["import React, {\n  useReducer,\n  useState,\n} from 'react';\n\n// import ReactDataSheet from 'react-datasheet';\n// import ReactJson from 'react-json-view';\nimport {\n  Card,\n  CardContent,\n  Grid,\n  MenuItem,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\nimport { HorizontalHistogram } from '../../../src';\nimport Histogram, { IHistogramData } from '../../../src/Histogram';\n// import Legend from '../../../src/Legend';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n// import { TabContainer } from '../components/TabContainer';\nimport {\n  axis,\n  data,\n  grid,\n  theme,\n} from '../data';\n\n// const tipContentFns = [\n//   (bins, i, d) =>\n//     bins[i] + '<br />HI THere ' + d.toFixed(2),\n//   (bins, i, d) =>\n//     bins[i] + '<br />Bookay ' + d.toFixed(2),\n// ];\n\n// const dataLegendData = {\n//   bins: data.counts.map((c) => c.label),\n//   counts: [{\n//     data: data.counts.map((c) => c.data.reduce((p, n) => p + n, 0)),\n//     label: '',\n//   }],\n// };\n\ninterface IInitialState {\n  chartType: 'HorizontalHistogram' | 'Histogram';\n  data: IHistogramData;\n}\nconst initialSate: IInitialState = {\n  chartType: 'Histogram',\n  data,\n};\n\ntype Actions = { type: 'setChartType'; chartType: string }\n  | { type: 'setData', data: IHistogramData };\n\nfunction reducer(state: IInitialState, action: Actions) {\n  switch (action.type) {\n    case 'setChartType':\n      return { ...state, chartType: action.chartType };\n    case 'setData':\n      return { ...state, data: action.data };\n    default:\n      throw new Error();\n  }\n}\n\nexport const dataToSpreadSheet = (datum: IHistogramData): any => {\n  const speadSheetData: any = [];\n\n  datum.bins.forEach((b, i) => {\n    if (!speadSheetData[i]) {\n      speadSheetData[i] = [];\n    }\n    speadSheetData[i][0] = { value: b };\n  });\n  datum.counts.forEach((c, i) => {\n    c.data.forEach((d, x) => {\n      if (!speadSheetData[x]) {\n        speadSheetData[x] = [];\n      }\n      speadSheetData[x][i + 1] = { value: d };\n    });\n  });\n  return speadSheetData;\n};\n\nconst HistogramExample = () => {\n  const [tab, setTab] = useState(0);\n  const [state, dispatch] = useReducer(reducer, initialSate);\n  const [visible, setVisible] = useState({});\n\n  const speadSheetData = dataToSpreadSheet(state.data);\n\n  const Chart = state.chartType === 'Histogram' ? Histogram : HorizontalHistogram;\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <Typography variant=\"h2\">Histogram</Typography>\n      <div>\n        {/* <Grid container spacing={24}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Chart data={state.data}\n                  axis={axis}\n                  grid={grid}\n                  width={'100%'}\n                  height={300}\n                  visible={visible}\n                  colorScheme={theme}\n                  tipContentFn={tipContentFns[0]} />\n                <Legend\n                  theme={theme}\n                  data={dataLegendData}\n                  onSelect={(key) => {\n                    setVisible({ ...visible, [key]: visible.hasOwnProperty(key) ? !visible[key] : false });\n                  }}\n                  visible={visible}\n                />\n              </CardContent>\n            </Card>\n            <br />\n            <Card>\n              <CardContent>\n                <ReactJson src={state} />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Tabs value={tab} onChange={(e, v) => setTab(v)}>\n                  <Tab label=\"Data\" />\n                  <Tab label=\"Styling\" />\n                </Tabs>\n                {\n                  tab === 0 && <TabContainer>\n                    <ReactDataSheet<any, any> data={speadSheetData}\n                      valueRenderer={(cell) => cell.value}\n                      sheetRenderer={(props) => (\n                        <table className={props.className + ' my-awesome-extra-class'}>\n                          <thead>\n                            <tr>\n                              <th className=\"action-cell\">Bin</th>\n                              {\n                                state.data.counts.map((count) => (<th key={count.label} className=\"action-cell\">\n                                  {count.label}\n                                </th>))\n                              }\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {props.children}\n                          </tbody>\n                        </table>\n                      )}\n                      onCellsChanged={(changes) => {\n                        changes.forEach(({ cell, row, col, value }) => {\n                          if (col === 0) {\n                            state.data.bins[row] = value;\n                          } else {\n                            state.data.counts[col - 1].data[row] = Number(value);\n                          }\n                        });\n                        dispatch({ type: 'setData', data: state.data });\n                      }} />\n                  </TabContainer>\n                }\n                {\n                  tab === 1 && <TabContainer>\n                    <Grid container spacing={24}>\n                      <Grid item xs={6}>\n                        <TextField\n                          select\n                          label=\"Chart direction\"\n                          value={state.chartType}\n                          onChange={(e) => {\n                            dispatch({ type: 'setChartType', chartType: e.target.value });\n                          }}\n                        >\n                          <MenuItem value=\"Histogram\">\n                            Histogram\n                            </MenuItem>\n                          <MenuItem value=\"HorizontalHistogram\">\n                            HorizontalHistogram\n                            </MenuItem>\n\n                        </TextField>\n                      </Grid>\n                    </Grid>\n                  </TabContainer>\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>*/}\n      </div>\n    </Layout>\n  );\n};\n\nexport default HistogramExample;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  // @TODO make this a prop\n  const stacked = false;\n\n  const defaultProps: IHistogramProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: HTMLElement, props: Partial<IHistogramProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IHistogramProps>) {\n      this.props = merge<IHistogramProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n      if (newProps.colorScheme) {\n        this.props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height } = this.props;\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [height - (margin.top * 2) - xAxisHeight(this.props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { axis, margin, height } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(this.props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      if (stacked) {\n        innerScaleBand\n          .domain(['main'])\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      } else {\n        innerScaleBand\n          .domain(dataLabels)\n          .rangeRound([0, x.bandwidth()])\n          .paddingInner(this.barMargin());\n      }\n      const xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(this.props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, this.dataSets);\n\n      const yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (axis.y.scale === 'TIME' && axis.y.dateFormat) {\n        yAxis.tickFormat(timeFormat(axis.y.dateFormat));\n      }\n      this.yAxis\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(this.props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(this.props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip } = this.props;\n      const barWidth = this.barWidth();\n\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(this.props.colorScheme);\n      const gHeight = gridHeight(this.props);\n\n      const g = this.container\n        .selectAll('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append('g')\n        .merge(g)\n        .attr('transform', (d) => {\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + x(d[0].label);\n          return `translate(${xdelta}, 0)`;\n        })\n        .selectAll('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => this.props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('height', 0)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          const setIndex = bins.findIndex((b) => b === d.label);\n          const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? y(10)\n          //   : 0;\n          const offset = 0;\n          return gHeight - offset;\n        })\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d) => {\n          return innerScaleBand(d.groupLabel);\n        })\n        .attr('width', (d) => barWidth)\n        .attr('fill', (d, i) => colors(i))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', (d: IGroupDataItem, stackIndex: number): number => {\n          // const setIndex = bins.findIndex((b) => b === d.label);\n          // const thisSetData = groupData[setIndex];\n          // @TODO stack charts\n          // const offset = stackIndex > 0\n          //   ? 5\n          //   : 0;\n          const offset = 0;\n          return y(d.value + offset);\n        })\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem): string => {\n            const currentHeight = gHeight - (y(d.value));\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = this.xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (width / 2) + ' ,' +\n          ((height - xAxisHeight(this.props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = this.yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      const { data, visible } = this.props;\n      this.dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!this.dataSets[i]) {\n            this.dataSets[i] = [];\n          }\n          this.dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales(this.props.data);\n      drawGrid(x, y, this.gridX, this.gridY, this.props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, this.dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\n\nexport interface IChartAdaptor {\n  create: (el: Element | Text, props: { [key: string]: any }) => void;\n  update: (el: Element | Text, props: { [key: string]: any }) => void;\n  destroy: (el: Element | Text) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin?: number;\n  margin?: number;\n  width?: number;\n}\n\nexport interface IGrid {\n  x?: {\n    height?: number;\n    ticks?: number;\n    visible?: boolean;\n    style?: ISVGLineStyle;\n  };\n  y?: {\n    style?: ISVGLineStyle;\n    ticks?: number;\n    visible?: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray?: string;\n  linecap?: string;\n  width: number;\n}\n\nexport interface IAxes {\n  y?: IAxis;\n  x?: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n  grid?: IGrid;\n}\n\nexport interface IDomain {\n  max: number;\n  min: number;\n}\n\nexport interface IMargin {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n}\nexport interface IHistogramProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData;\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke'?: string;\n  'fill'?: string;\n  'opacity'?: number;\n  'stroke-width'?: number;\n  'stroke-opacity'?: number;\n  'shape-rendering'?: string;\n  'visible'?: boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\n\nexport interface IAxis {\n  dateFormat?: string;\n  numberFormat?: string;\n  ticks?: number;\n  tickValues?: number[];\n  height?: number;\n  label?: string;\n  margin?: number;\n  scale?: Scale;\n  style?: ISVGLineStyle;\n  text?: {\n    style: ISVGTextStyle;\n  };\n  width?: number;\n  tickSize?: number;\n  visible?: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IHistogramProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IHistogramProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import * as Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"/histogram\">Histogram</Link></Button>\n      <Button><Link to=\"/line\">Line Chart</Link></Button>\n      <Button><Link to=\"/pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"/joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import { extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { scaleBand, scaleLinear, ScaleLinear, scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport { IChartAdaptor, IHistogramData, IHistogramDataSet } from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  let props: IJoyPlotProps;\n  let dataSets: IGroupData[];\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const defaultProps: IJoyPlotProps = {\n    axis: {\n      x: {\n        height: 20,\n        label: '',\n        margin: 10,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        label: '',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, newProps: Partial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid(props);\n      this.makeScales();\n      this.containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IJoyPlotProps>) {\n      props = merge<IJoyPlotProps>(defaultProps, newProps);\n      props.data = newProps.data;\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : thisExtent[1];\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : thisExtent[0];\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { bar, domain, margin, width, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      this.xAxis\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => d.title);\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      this.yAxis\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      const { ...xLabelStyle } = axis.x.text.style;\n      const { ...yLabelStyle } = axis.y.text.style;\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     * @return {number} bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n      const groupedMargin = this.groupedMargin();\n\n      const maxItems = groupData.reduce((prev, next) => {\n        const thisMax = next.reduce((p, n) => n.length > p ? n.length : p, 0);\n        return thisMax > prev ? thisMax : prev;\n      }, 0);\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = this.containers[i]\n          .selectAll('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + x(d[0].label);\n\n            const ydelta = yOuterScaleBand(d[0].joyLabel);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => innerScaleBand(d.groupLabel))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(ix))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(ix);\n            }\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n        );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid(props: IJoyPlotProps) {\n      const { grid } = props;\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin, bar } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        this.gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        this.gridX.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(this.gridX.selectAll('.tick line'), grid.x.style);\n        attrs(this.gridX.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        this.gridY.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n        );\n\n        attrs(this.gridY.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        this.gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(this.gridY.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, newProps: IJoyPlotProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\n\nexport interface IJoyPlotProps {\n  axis?: IAxes;\n  bar?: IHistogramBar;\n  className?: string;\n  data: IHistogramData[];\n  delay?: number;\n  duration?: number;\n  colorScheme?: string[];\n  domain?: IDomain;\n  grid?: IGrid;\n  height: number;\n  margin?: IMargin;\n  stroke?: IStroke;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * Histogram component\n */\nclass Histogram extends React.Component<IJoyPlotProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IJoyPlotProps> = {\n    axis: {},\n    bar: {\n      margin: 0,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1).toString(),\n      width: 1,\n    },\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IJoyPlotProps) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IJoyPlotProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","import { axisBottom, axisLeft } from 'd3-axis';\nimport * as get from 'lodash.get';\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n    gridX.call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n      .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n      .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n    );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import {\n  IAxes,\n  IHistogramData,\n} from '../../src';\nimport filterRange from '../../src/colors/filterRange';\n\nexport const grid = {\n  x: {\n    style: {\n      'stroke': '#eeAA00',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    height: 20,\n    style: {\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n  grid,\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const axis: IAxes = {\n  x: {\n    height: 20,\n    label: 'X Axis',\n    margin: 20,\n    text: {\n      style: {\n        'dy': '.35em',\n        'text-anchor': 'start',\n        'transform': 'rotate(90)',\n        'x': 0,\n        'y': 0,\n      },\n    },\n    tickSize: 0,\n  },\n  y: {\n    label: 'Y Axis!',\n    style: {\n      fill: 'none',\n      stroke: '#eeAA00',\n    },\n    text: {\n      style: {\n        fill: '#eeAA00',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    width: 50,\n  },\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const defaultProps = {\n    axis: {\n      x: {\n        height: 25,\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        width: 20,\n      },\n    },\n    bar: {\n      height: 50,\n      margin: 10,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props = {}) {\n      this.props = merge(defaultProps, props);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     * @param {Object} counts Histogram data set values\n     * @return {Number} count\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = this.props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, width - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     * @return {number} width\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = this.props;\n      return width - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     * @return {number} width\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = this.props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = this.props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = this.props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = this.props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || this.props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(i))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, colors)\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      if (stroke.dasharray !== '') {\n        barItem.attr('stroke-dasharray', stroke.dasharray);\n      }\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     * @param {Object} props Props\n     */\n    _drawGrid(props: IHistogramProps) {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IHistogramProps) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this._drawScales(this.props.data);\n      this._drawGrid(this.props);\n      this._drawBars(this.props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import { rgb } from 'd3-color';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends React.Component<IHistogramProps, IChartState> {\n\n  private histogram: IChartAdaptor;\n  private ref;\n\n  public static defaultProps = {\n    axis: {},\n    bar: {\n      margin: 2,\n      width: 10,\n    },\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    stroke: {\n      color: (d, i, colors) => rgb(colors(i)).darker(1),\n      width: 1,\n    },\n    tipContentFn: (bins: string[], i, d) =>\n      bins[i] + '<br />' + d.toFixed(2),\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IHistogramProps) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.histogram.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IHistogramProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   * @param {Object} props Props\n   */\n  public componentWillReceiveProps(props: IHistogramProps) {\n    this.histogram.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number> | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { easeCubic } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport { buildScales } from './utils/scales';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor => {\n  let svg;\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const\n    lineProps = {\n      curveType: curveCatmullRom,\n      fill: false,\n      show: true,\n      stroke: '#005870',\n      strokeDashArray: '5 5',\n      strokeDashOffset: 0,\n    };\n\n  const pointProps: ISVGPoint = {\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const defaultProps: ILineChartProps = {\n    axis: {\n      x: {\n        height: 20,\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n      },\n      y: {\n        scale: 'LINEAR',\n        style: {\n          'fill': 'none',\n          'shape-rendering': 'crispEdges',\n          'stroke': '#666',\n          'stroke-opacity': 1,\n          'stroke-width': 1,\n        },\n        text: {\n          style: {\n            fill: '#666',\n          },\n        },\n        ticks: 10,\n        width: 25,\n      },\n    },\n    className: 'line-chart-d3',\n    fx: easeCubic,\n    grid: {\n      x: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n      y: {\n        style: {\n          'fill': 'none',\n          'stroke': '#bbb',\n          'stroke-opacity': 0.7,\n          'stroke-width': 1,\n        },\n        ticks: 5,\n        visible: true,\n      },\n    },\n    height: 250,\n    line: lineProps,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n    point: pointProps,\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (curveType, yAxisWidth, x, y) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Node, props: Object = {}) {\n      this.props = merge(defaultProps, props);\n      this._makeSvg(el);\n      this.makeScales();\n      [this.x, this.y] = buildScales(this.props.axis);\n      this.makeGrid();\n      this.container = svg\n        .append('g')\n        .attr('class', 'linechart-container');\n\n      this.lineContainer = this.container\n        .append('g')\n        .attr('class', 'line-container');\n      this._createLines(this.props.data);\n      this.update(el, this.props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n      const scale = {\n        x: 1 - (margin.left / width),\n        y: 1 - (margin.top / height),\n      };\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartDataSet[]) {\n      const { axis, tip } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = this.container.selectAll('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as this.props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet, i: number) => {\n        tipContent.html(() => this.props.tipContentFn([d], 0));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append('circle')\n        .attr('class', 'enter')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => this.y(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return this.x(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      this.xAxis = svg.append('g').attr('class', 'x-axis');\n      this.yAxis = svg.append('g').attr('class', 'y-axis');\n\n      this.xAxisLabel = svg.append('g');\n      this.yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: Array<ILineChartDataSet<IChartPoint<number, number>>>) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = this.props;\n      const w = gridWidth(this.props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft(this.y);\n      if (axis.y.tickValues) {\n        yAxis.tickValues(axis.y.tickValues);\n      } else {\n        yAxis.ticks(axis.y.ticks);\n      }\n      if (axis.y.numberFormat) {\n        yAxis.tickFormat(format(axis.y.numberFormat));\n      }\n\n      const xAxis = axisBottom(this.x); // .ticks(axis.x.ticks);\n      if (axis.x.tickValues) {\n        xAxis.tickValues(axis.x.tickValues);\n      }\n      if (axis.x.scale === 'TIME' && axis.x.dateFormat) {\n        xAxis.tickFormat(timeFormat(axis.x.dateFormat));\n      }\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        datum.data.forEach((d: IChartPoint<number, number>) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      this.x\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      this.y.domain(yDomain)\n        .range([height - xAxisHeight, 0]);\n\n      this.yAxis\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      this.xAxis\n        .attr('transform', `translate(${yAxisWidth},${(height - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style);\n    },\n\n    _createLines(data: ILineChartDataSet[]) {\n      data.forEach((d, i) => {\n        this.lineContainer.append('path')\n          .attr('class', `line-${i}`);\n      });\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.append('path')\n            .attr('class', `fill-${i}`);\n\n        });\n\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: ILineChartDataSet[]) {\n      const { axis } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // change the line\n      data.forEach((d, i) => {\n        this.lineContainer.select(`.line-${i}`)\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, this.x, this.y)(d.data as any))\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: ILineChartDataSet[]) {\n      const { axis, height } = this.props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => this.x(d.x) + yAxisWidth)\n        .y0((d) => height - xAxisHeight)\n        .y1((d: any) => this.y(d.y));\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          this.lineContainer.select(`.fill-${i}`)\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data as any))\n\n            ;\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: IHistogramDataSet[]): number {\n      return data.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      this.gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      this.gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, props) {\n      if (!props.data) {\n        return;\n      }\n      console.log('receive update', props);\n      this.props = merge(defaultProps, props);\n      console.log('update', this.props.point);\n      [this.x, this.y] = buildScales(this.props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum: ILineChartDataSet<IChartPoint<number, number>>) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data);\n      this.drawAreas(data);\n      drawGrid(this.x, this.y, this.gridX, this.gridY, this.props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IGrid,\n  IHistogramData,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineChartDataSet<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  label: string;\n  point?: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line?: {\n    show: boolean;\n    fill?: {\n      show: boolean;\n      fill: string;\n    };\n    curveType?: any;\n    stroke?: string;\n    strokeDashOffset?: number;\n    strokeDashArray?: string;\n  };\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps {\n  axis?: IAxes;\n  className?: string;\n  data?: ILineChartDataSet[];\n  fx?: (n: number) => number;\n  grid?: IGrid;\n  height?: number | string;\n  line?: any;\n  margin?: IMargin;\n  point?: ISVGPoint;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<{ x: string | number, y: string | number }>;\n  width?: number | string;\n}\n\nclass LineChart extends React.Component<ILineChartProps, IState> {\n\n  private chart;\n  private ref;\n\n  constructor(props: ILineChartProps) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): ILineChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  public getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import {\n  geoMercator,\n  geoPath,\n} from 'd3-geo';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\nimport { FeatureCollection } from 'geojson';\n\nimport { IChartAdaptor } from './Histogram';\nimport { IMapProps } from './Map';\n\nexport const mapD3 = ((): IChartAdaptor => {\n  let svg;\n\n  const defaultProps: IMapProps = {\n    className: 'map-d3',\n    data: [],\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: 200,\n  };\n\n  const MapD3 = {\n    /**\n     * Initialization\n     * @param {Node} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: HTMLElement, props: Partial<IMapProps> = {}) {\n      this.mergeProps(props);\n      this._makeSvg(el);\n      this.container = svg\n        .append('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: Partial<IMapProps>) {\n      this.props = merge<IMapProps>(defaultProps, newProps);\n      this.props.data = newProps.data;\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Dom} el Dom container node\n     */\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g');\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      data: any,\n      geojson: FeatureCollection<any, any>,\n    ) {\n\n      const { width, height } = this.props;\n      const zoom = 3;\n      const projection = geoMercator()\n        .scale((width / 2 / Math.PI) * zoom)\n        .translate([(width / 2), (height / 2)]);\n\n      const geoGenerator = geoPath()\n        .projection(projection);\n\n      // const g = this.container\n      // .selectAll('g')\n      // .data(groupData);\n\n      // Join the FeatureCollection's features array to path elements\n      const u = this.container\n        .selectAll('path')\n        .data(geojson.features);\n\n      // Create path elements and update the d attribute using the geo generator\n      u.enter()\n        .append('path')\n        .attr('d', geoGenerator);\n    },\n\n    /**\n     * Update chart\n     * @param {HTMLElement} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: HTMLElement, props: IMapProps) {\n      if (!props.data) {\n        return;\n      }\n      this.mergeProps(props);\n      const { data, geojson } = this.props;\n      this.updateChart(data, geojson);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return MapD3;\n});\n","import { FeatureCollection } from 'geojson';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { mapD3 } from './MapD3';\n\nexport interface IMapProps {\n  className?: string;\n  data: any;\n  geojson: FeatureCollection<any, any>;\n  height: number;\n  width: number | string;\n}\n\n/**\n * Map component\n */\nclass Map extends React.Component<IMapProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IMapProps> = {\n    geojson: {\n      features: [],\n      type: 'FeatureCollection',\n    },\n    height: 200,\n    width: '100%',\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IMapProps) {\n    super(props);\n    this.chart = mapD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(elem, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IMapProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"map-chart-container\"></div>);\n  }\n}\n\nexport default Map;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport {\n  arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport * as merge from 'deepmerge';\nimport * as get from 'lodash.get';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\n\nexport const pieChartD3 = ((): IChartAdaptor => {\n\n  let svg;\n  let tipContainer;\n  let tipContent;\n\n  const defaultProps: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      left: 10,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const PieChartD3 = {\n\n    create(el: HTMLElement, props: Partial<IPieChartProps> = {}) {\n      this.props = merge(defaultProps, { ...props });\n      this.previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      this.containers = [];\n      this.previousData.forEach((dataSet, i) => {\n        this.drawChartBg(this.props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(this.props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: HTMLElement, props: Partial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      this.props = merge(defaultProps, props);\n      if (props.colorScheme) {\n        this.props.colorScheme = props.colorScheme;\n      }\n      // this._makeSvg(el);\n      if (!this.props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = this.props;\n      const radius = Math.min(width, height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = this.props;\n      this.dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      this.dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', this.props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      this.previousData = this.dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = this.props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!this.containers[i]) {\n        this.containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = this.props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => {\n          return d.count;\n        });\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(this.previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = this.containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each(function (d, j) { this._current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = this.containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      const gLabel = path2.enter().append('text')\n        .attr('class', 'label')\n        .each(function () {\n          // Store initial offset incase we change chart heights.\n          this._height = height;\n          this._width = width;\n        })\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each(function (d, j) {\n          // Store current value to work out fx transition opacities\n          this._current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', function (d) {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (this._width / 2);\n          const y = centroid[1] + (this._height / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d, ix, c) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.count === 0 || c[ix]._current.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: HTMLElement) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(thisArc) {\n  return function (d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\n\ninterface ILabels {\n  display: boolean;\n  displayFn?: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor?: string;\n  className?: string;\n  colorScheme?: string[];\n  donutWidth?: number;\n  height: number;\n  labels?: ILabels;\n  margin?: IMargin;\n  tip?: any;\n  tipContainer?: string;\n  tipContentFn?: TipContentFn<string>;\n  visible?: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends React.Component<IPieChartProps, IChartState> {\n\n  private chart: IChartAdaptor;\n  private ref;\n\n  public static defaultProps: Partial<IPieChartProps> = {\n    backgroundColor: '#ddd',\n    donutWidth: 0,\n    height: 200,\n    margin: {\n      left: 5,\n      top: 5,\n    },\n  };\n\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props: IPieChartProps) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const elem = this.getDOMNode();\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   * @return {Object} ChartState\n   */\n  public getChartState(): IPieChartProps {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  /**\n   * Get the chart's dom node\n   * @return {Element} dom noe\n   */\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  /**\n   * Render\n   * @return {Dom} node\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport { select } from 'd3-selection';\nimport * as merge from 'deepmerge';\n\nimport colorScheme from './colors';\nimport { IChartPoint } from './LineChart';\nimport {\n  IScatterPlotProps,\n  ScatterPlotData,\n} from './ScatterPlot';\n\nexport const scatterPlotD3 = (() => {\n  let svg;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const defaultProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: [],\n    delay: 0,\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     * @param {Element} el Target DOM node\n     * @param {Object} props Chart properties\n     */\n    create(el: Element, props: IScatterPlotProps = defaultProps) {\n      this.props = merge(defaultProps, props);\n      this.update(el, props);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     * @param {Element} el Dom container node\n     * @param {Array} data Chart data\n     */\n    _makeSvg(el: Element, data: ScatterPlotData) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height,\n        legendWidth, padding } = this.props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(this.props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     * @param {Object} data Chart data\n     */\n    _drawScales(data) {\n      const { height, padding, width } = this.props;\n      const xSize = width / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (d) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = this.props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (width + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     * @param {Object} traits Chart data\n     * @param {Number} size Chart size\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = this.props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       * @param {Object} p Point\n       */\n      function plot(p: IChartPoint) {\n        const plotCell = select(this);\n        let circle;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       * @param {Object} a point\n       * @param {Object} b point\n       * @return {Array} data\n       */\n      function cross(a, b) {\n        const c = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     * @param {Node} el Chart element\n     * @param {Object} props Chart props\n     */\n    update(el: Element, props: IScatterPlotProps) {\n      this.props = { ...this.props, ...props };\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = this.props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = width / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     * @param {Element} el To remove\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import * as React from 'react';\nimport { Component } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { scatterPlotD3 } from './ScatterPlotD3';\n\ninterface IChartState {\n  choices: string[];\n  data: any[];\n  height: number;\n  distModels: string[];\n  split: string;\n  parentWidth: number;\n  width: number | string;\n}\n\nexport type ScatterPlotData = any[];\n\nexport interface IScatterPlotProps {\n  choices?: any[];\n  className?: string;\n  chartSize?: number;\n  data: ScatterPlotData;\n  delay?: number;\n  distModels?: string[];\n  duration?: number;\n  height: number;\n  legendWidth?: number;\n  colorScheme?: string[];\n  padding?: number;\n  radius?: number;\n  split?: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<IScatterPlotProps, IChartState> {\n\n  private chart;\n  private ref;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      choices: [],\n      data: [],\n      distModels: [],\n      height: this.props.height,\n      parentWidth: 400,\n      split: '',\n      width: this.props.width,\n    };\n  }\n\n  private handleResize() {\n    const { legendWidth, padding } = this.props;\n    const chartWidth = Math.max(200, this.ref.offsetWidth - padding - legendWidth);\n    const chartHeight = Math.max(200, window.innerHeight - padding -\n      this.ref.getBoundingClientRect().top);\n    const width = Math.min(chartHeight, chartWidth);\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(this.getDOMNode(), this.getChartState()));\n  }\n\n  public componentDidMount() {\n    this.chart.create(this.getDOMNode(), this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  private getChartState(): IChartState {\n    let { width } = this.props;\n    const { data, choices, split, distModels, height } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      choices,\n      data,\n      distModels,\n      height,\n      parentWidth: this.state.parentWidth,\n      split,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: IScatterPlotProps) {\n    this.chart.update(this.getDOMNode(), this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(this.getDOMNode());\n  }\n\n  private getDOMNode() {\n    return ReactDOM.findDOMNode(this.ref);\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import filterRange from './colors/filterRange';\nimport Histogram, {\n  IAxes, IHistogramBar, IHistogramData, IHistogramDataSet,\n  IHistogramProps, IStroke,\n} from './Histogram';\n\nimport HorizontalHistogram from './HorizontalHistogram';\nimport JoyPlot from './JoyPlot';\nimport Legend from './Legend';\nimport LineChart, { IChartPoint, ILineChartDataSet, ILineChartProps } from './LineChart';\nimport Map from './Map';\nimport PieChart from './PieChart';\nimport ScatterPlot from './ScatterPlot';\n\nexport {\n  filterRange,\n  JoyPlot,\n  Histogram,\n  HorizontalHistogram,\n  Legend,\n  LineChart,\n  Map,\n  PieChart,\n  ScatterPlot,\n  ILineChartDataSet,\n  IChartPoint,\n  ILineChartProps,\n  IAxes,\n  IHistogramBar,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n  IStroke,\n};\n"],"sourceRoot":""}