{"version":3,"sources":["webpack:///../src/UpsetChart.tsx","webpack:///./src/pages/upset.tsx"],"names":["ActiveCircles","data","left","width","top","radius","height","colors","active","inactive","setBandScale","bins","Array","from","reduce","prev","next","union","Set","keys","yPoints","map","bin","Number","bandwidth","labels","d","join","bandScale","scaleBand","domain","rangeRound","paddingInner","defaultPadding","paddingOuter","align","transform","x","includes","bounds","index","length","key","x1","y1","x2","y2","stroke","i","cy","cx","r","fill","DistributionBars","LabelComponent","colorScheme","axisSpace","useMemo","values","label","value","useHistogramDomain","groupLayout","EGroupedBarLayout","GROUPED","direction","EChartDirection","VERTICAL","showLabels","padding","scale","undefined","SetSizeBars","axisWidth","textFill","empty","forEach","findIndex","reverse","HORIZONTAL","inverse","fontSize","textAnchor","y","set","iterables","iterable","item","add","UpsetChart","setSize","dimensions","chartWidth","schemeSet3","distribution","title","description","h","Base","style","border","UpsetExample","Typography","variant","Grid","container","spacing","xs","Card","CardContent"],"mappings":"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","file":"component---src-pages-upset-tsx-68994f59cd7618175fca.js","sourcesContent":["import {\n  ScaleBand,\n  scaleBand,\n} from 'd3-scale';\nimport { schemeSet3 } from 'd3-scale-chromatic';\nimport React, {\n  FC,\n  useMemo,\n} from 'react';\n\nimport {\n  Bars,\n  XAxis,\n  YAxis,\n} from './';\nimport {\n  defaultPadding,\n  EChartDirection,\n} from './BarChart';\nimport { IProps as IBarProps } from './components/Bars/Bars';\nimport Base from './components/Base';\nimport { TLabelComponent } from './components/Label';\nimport {\n  EGroupedBarLayout,\n  IBarChartDataSet,\n} from './Histogram';\nimport {\n  paddingInner,\n  paddingOuter,\n} from './utils/bars';\nimport { useHistogramDomain } from './utils/useDomain';\n\nexport type TUpsetData = { keys: string[], value: number }[];\n\ntype TBarProps = Pick<IBarProps, 'width' | 'height' | 'top' | 'left' | 'colorScheme' | 'LabelComponent'> & {\n  data: TUpsetData,\n  axisSpace: number;\n  axisWidth?: number;\n  textFill?: string;\n};\n\ninterface IProps {\n  colorScheme?: string[];\n  data: TUpsetData;\n  height: number;\n  hoverColorScheme?: string[];\n  showLabels?: boolean[];\n  visible?: Record<string, boolean>;\n  width: number;\n  xAxisHeight?: number;\n  yAxisWidth?: number;\n  textFill?: string;\n  distribution?: {\n    colorScheme: string[];\n    fill: {\n      active: string;\n      inactive: string;\n    };\n    label?: string;\n  };\n  setSize?: {\n    dimensions: {\n      chartWidth: number;\n      axisWidth: number;\n      height: number;\n    },\n    label?: string;\n    colorScheme: string[];\n    LabelComponent?: TLabelComponent;\n  }\n  axisSpace?: number;\n  radius?: number;\n  /** @description accessible title */\n  title: string;\n  /** @description accessible description */\n  description: string;\n}\n\nconst UpsetChart: FC<IProps> = ({\n  data,\n  width,\n  height,\n  setSize = {\n    dimensions: { chartWidth: 100, axisWidth: 100, height: 200 },\n    colorScheme: [schemeSet3[0]],\n  },\n  axisSpace = 30,\n  textFill = '#a9a9a9',\n  radius = 7,\n  distribution = {\n    colorScheme: [schemeSet3[1]],\n    fill: {\n      active: schemeSet3[1],\n      inactive: '#eee',\n    },\n    label: 'Intersection size',\n  },\n  title,\n  description,\n}) => {\n\n  const left = (setSize.dimensions.chartWidth + setSize.dimensions.axisWidth);\n  const h = height - setSize.dimensions.height;\n\n  const bins = useMemo(() => (Array.from(data.reduce((prev, next) => union<string>(new Set<string>(next.keys), prev), new Set<string>()))), [data]);\n\n  const setBandScale = scaleBand().domain(bins as string[])\n    .rangeRound([0, setSize.dimensions.height - axisSpace - axisSpace])\n    .paddingInner(paddingInner(defaultPadding))\n    .paddingOuter(paddingOuter(defaultPadding))\n    .align(0.5);\n\n  return <Base\n    width={width}\n    title={title}\n    description={description}\n    height={height}>\n\n    <text\n      textAnchor={'middle'}\n      fill={textFill}\n      fontSize=\"12px\"\n      style={{ border: '1px solid red' }}\n      transform={`translate(${left - 20}, ${h - (h / 2)}) rotate(270)`}>\n      {distribution.label ?? 'Intersection size'}\n    </text>\n    <SetSizeBars\n      width={setSize.dimensions.chartWidth}\n      axisWidth={setSize.dimensions.axisWidth}\n      height={setSize.dimensions.height - axisSpace}\n      top={height - setSize.dimensions.height + axisSpace}\n      colorScheme={setSize.colorScheme}\n      data={data}\n      axisSpace={axisSpace}\n      textFill={textFill}\n      setBandScale={setBandScale}\n      bins={bins}\n      label={setSize.label ?? 'Set size'}\n    />\n\n    <DistributionBars\n      width={width - left}\n      height={height - setSize.dimensions.height}\n      colorScheme={distribution.colorScheme}\n      left={left}\n      data={data}\n      axisSpace={axisSpace}\n      textFill={textFill}\n    />\n\n    <ActiveCircles\n      data={data}\n      left={left + axisSpace}\n      radius={radius}\n      colors={distribution.fill}\n      width={width - left - axisSpace}\n      height={setSize.dimensions.height - axisSpace}\n      top={height - setSize.dimensions.height + axisSpace}\n      setBandScale={setBandScale}\n    />\n  </Base>\n}\n\ninterface IActiveCirclesProps {\n  data: TUpsetData;\n  left: number;\n  width: number;\n  height: number;\n  top: number;\n  radius: number;\n  colors?: {\n    active: string;\n    inactive: string;\n  },\n  setBandScale: ScaleBand<string>\n}\n\n/**\n * Renders a grid of circles. Highlighted if the column's data contains that key\n */\nconst ActiveCircles: FC<IActiveCirclesProps> = ({\n  data,\n  left,\n  width,\n  top,\n  height,\n  radius,\n  colors = {\n    active: '#000',\n    inactive: '#eee',\n  },\n  setBandScale,\n}) => {\n  const bins = Array.from(data.reduce((prev, next) => union<string>(new Set<string>(next.keys), prev), new Set<string>()));\n  const yPoints = bins.map((bin) => Number(setBandScale(bin)) + (setBandScale.bandwidth() / 2));\n  const labels = data.map((d) => d.keys.join(' & '))\n  const bandScale = scaleBand().domain(labels as string[])\n    .rangeRound([0, width])\n    .paddingInner(paddingInner(defaultPadding))\n    .paddingOuter(paddingOuter(defaultPadding))\n    .align(0.5);\n\n  return (\n    <g transform={`translate(${left},${top})`}>\n      {\n        data.map((d) => {\n          const x = Number(bandScale(d.keys.join(' & '))) + (bandScale.bandwidth() / 2);\n          const active = bins.map((bin) => d.keys.includes(bin));\n          const bounds = active.reduce((prev, next, index) => {\n            if (!next) {\n              return prev;\n            }\n            if (prev.length === 0) {\n              prev[0] = yPoints[index];\n            } else {\n              prev[1] = yPoints[index];\n            }\n            return prev;\n          }, [] as number[]);\n          return (\n            <g\n              key={d.keys.join('.')}\n              transform={`translate(${x}, 0)`}>\n              <line x1=\"0\" y1={bounds[0]} x2=\"0\" y2={bounds[1] ?? bounds[0]} stroke={colors.active} />\n              {\n                bins.map((bin, i) => {\n                  return (\n                    <circle key={bin} cy={yPoints[i]}\n                      cx={(0 * i)} r={radius} fill={active[i] ? colors.active : colors.inactive} />\n                  )\n                })\n              }\n            </g>\n          )\n        })\n      }\n    </g>\n  );\n};\n\nconst DistributionBars: FC<TBarProps> = ({\n  LabelComponent,\n  colorScheme,\n  width,\n  height,\n  left,\n  top,\n  data,\n  axisSpace,\n}) => {\n  const bins = useMemo(() => data.map((d) => d.keys.join(' & ')), [data]);\n  const values: IBarChartDataSet[] = useMemo(() => ([{\n    label: 'segments',\n    data: data.map((d) => d.value),\n  }]), [data]);\n\n  const domain = useHistogramDomain({\n    groupLayout: EGroupedBarLayout.GROUPED,\n    bins,\n    values,\n  });\n  return (\n    <>\n      <Bars\n        bins={bins}\n        colorScheme={colorScheme}\n        direction={EChartDirection.VERTICAL}\n        domain={domain}\n        showLabels={[true]}\n        groupLayout={EGroupedBarLayout.GROUPED}\n        height={height}\n        LabelComponent={LabelComponent}\n        left={(left ?? 0) + axisSpace}\n        top={top}\n        padding={defaultPadding}\n        values={values}\n        width={width - axisSpace}\n      />\n      <YAxis\n        width={20}\n        height={height}\n        label=\"intersection size\"\n        top={top}\n        left={left}\n        scale={'linear'}\n        values={undefined}\n        domain={domain}\n      />\n    </>\n  )\n}\n\n/**\n * Shows a bar chat of the accumulated total number of records in each data point.\n */\nconst SetSizeBars: FC<TBarProps & { setBandScale: ScaleBand<string>, bins: string[], label: string }> = ({\n  width,\n  height,\n  colorScheme,\n  LabelComponent,\n  data,\n  top,\n  axisSpace,\n  axisWidth,\n  textFill = '#a9a9a9',\n  setBandScale,\n  bins,\n  label,\n}) => {\n  const values = useMemo(() => {\n    const empty = new Array(bins.length).fill(0);\n    const counts = data.reduce((prev, next) => {\n      next.keys.forEach((key) => {\n        const index = bins.findIndex((bin) => bin === key);\n        prev[index] = prev[index] + next.value;\n      })\n      return prev;\n    }, empty);\n    const values: IBarChartDataSet[] = [{\n      label: 'tets',\n      data: counts,\n    }];\n    return values;\n  }, [data, bins]);\n\n  const domain = useHistogramDomain({\n    groupLayout: EGroupedBarLayout.GROUPED,\n    bins: bins.reverse(),\n    values,\n  });\n  return (\n    <g transform={`translate(${0},${top})`}>\n      <Bars\n        bins={bins}\n        colorScheme={colorScheme}\n        direction={EChartDirection.HORIZONTAL}\n        domain={domain}\n        groupLayout={EGroupedBarLayout.GROUPED}\n        height={height - axisSpace}\n        LabelComponent={LabelComponent}\n        inverse={true}\n        showLabels={[true]}\n        padding={defaultPadding}\n        values={values}\n        width={width}\n      />\n      {\n        bins.map((bin) => <text\n          key={bin}\n          x={(axisWidth ?? 0) + width}\n          fontSize=\"12px\"\n          textAnchor=\"end\"\n          fill={textFill}\n          y={Number(setBandScale(bin)) + (setBandScale.bandwidth() / 2)}\n        >\n          {bin}\n        </text>)\n      }\n      <XAxis\n        width={width}\n        height={20}\n        label=\"Set size\"\n        top={height - axisSpace}\n        scale=\"linear\"\n        values={undefined}\n        inverse={true}\n        domain={domain}\n      />\n      <text\n        x={width / 2}\n        textAnchor=\"middle\"\n        fontSize=\"12px\"\n        fill={textFill}\n        y={height}>{label}\n      </text>\n    </g>\n  )\n}\n\n\nfunction union<T>(...iterables: any): Set<T> {\n  const set = new Set<T>();\n  for (const iterable of iterables) {\n    for (const item of iterable) {\n      set.add(item);\n    }\n  }\n  return set;\n}\n\nexport default UpsetChart;\n","// Be sure to include styles at some point, probably during your bootstrapping\nimport 'react-datasheet/lib/react-datasheet.css';\n\nimport React, { FC } from 'react';\n\nimport {\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\n\nimport UpsetChart, { TUpsetData } from '../../../src/UpsetChart';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst data: TUpsetData = [\n  { keys: ['Another label'], value: 10 },\n  { keys: ['Another label', 'B'], value: 14 },\n  { keys: ['Another label', 'B', 'C'], value: 1 },\n  { keys: ['B'], value: 10 },\n  { keys: ['Another label', 'C'], value: 14 },\n  { keys: ['C'], value: 12 },\n];\n\nconst UpsetExample: FC = () => {\n  return (\n    <Layout>\n      <SEO title=\"Line Chart\" description=\"\" />\n      <Typography variant=\"h2\">Upset</Typography>\n      <div>\n        <Grid container spacing={10}>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <UpsetChart\n                  title=\"example upset chart\"\n                  description=\"more info for accessibility\"\n                  width={600}\n                  height={400}\n                  distribution={{\n                    colorScheme: ['rgb(154, 187, 218)'],\n                    fill: {\n                      active: 'rgb(154, 187, 218)',\n                      inactive: '#ddd',\n                    },\n                  }}\n                  setSize={{\n                    dimensions: { chartWidth: 100, axisWidth: 120, height: 150 },\n                    colorScheme: ['rgb(154, 218, 172)'],\n                  }}\n                  data={data} />\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nexport default UpsetExample;\n"],"sourceRoot":""}