{"version":3,"sources":["webpack:///../node_modules/d3-request/src/request.js","webpack:///../node_modules/d3-request/src/type.js","webpack:///../node_modules/d3-request/src/json.js","webpack:///../node_modules/d3-request/src/html.js","webpack:///../node_modules/d3-dsv/src/dsv.js","webpack:///../node_modules/d3-request/src/text.js","webpack:///../node_modules/d3-request/src/xml.js","webpack:///../node_modules/d3-dsv/src/csv.js","webpack:///../node_modules/d3-dsv/src/tsv.js","webpack:///../node_modules/d3-request/src/dsv.js","webpack:///../node_modules/d3-request/src/csv.js","webpack:///../node_modules/d3-request/src/tsv.js","webpack:///./src/pages/map.tsx","webpack:///../src/utils/defaults.ts","webpack:///../src/Histogram.tsx","webpack:///../src/colors/index.js","webpack:///../src/d3/attrs.ts","webpack:///../src/tip.ts","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///../src/colors/filterRange.ts","webpack:///./src/components/seo.tsx","webpack:///../src/Legend.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///../src/JoyplotD3.ts","webpack:///../src/JoyPlot.tsx","webpack:///../src/PieChartD3.ts","webpack:///../src/PieChart.tsx","webpack:///../src/HistogramD3.ts","webpack:///../src/grid.ts","webpack:///./src/data.ts","webpack:///../src/utils/scales.ts","webpack:///../src/lineChartD3.ts","webpack:///../src/LineChart.tsx","webpack:///../src/ScatterPlotD3.ts","webpack:///../src/ScatterPlot.tsx","webpack:///../src/HorizontalHistogramD3.ts","webpack:///../src/HorizontalHistogram.tsx","webpack:///../src/index.ts"],"names":["src_request","url","callback","request","mimeType","response","responseType","event","Object","d3_dispatch","headers","d3_collection","xhr","XMLHttpRequest","user","password","timeout","respond","o","result","status","type","responseText","hasResponse","call","e","XDomainRequest","test","onload","onerror","ontimeout","onreadystatechange","readyState","onprogress","header","name","value","toLowerCase","arguments","length","get","remove","set","data","send","post","method","open","has","setRequestHeader","each","overrideMimeType","error","fixCallback","on","abort","apply","Error","defaultMimeType","r","json","document","createRange","createContextualFragment","JSON","parse","EOL","xml","responseXML","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","map","i","stringify","join","dsv","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","rows","N","I","n","eof","eol","token","c","j","slice","replace","row","push","formatRow","formatValue","convert","object","customConverter","format","columnSet","create","forEach","column","inferColumns","concat","formatRows","csv","csvParse","tsv","tsvParse","src_dsv","_","responseOf","MapExample","_useState","useState","loading","setLoading","_useState2","geojson","setGeoJson","useEffect","collection","react_default","a","createElement","layout","seo","title","description","src","height","width","lineStyle","fill","opacity","shape-rendering","stroke","stroke-opacity","stroke-width","visible","axis","curveCatmullRom","x","dateFormat","label","margin","numberFormat","scale","style","assign","dy","transform","y","tickSize","ticks","grid","Histogram","props","_this","_Component","this","ref","chart","histogramD3","state","parentWidth","handleResize","_this2","el","getDOMNode","offsetWidth","setState","getChartState","componentDidMount","_this3","window","addEventListener","componentDidUpdate","update","_this$props","rest","children","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","componentWillUnmount","removeEventListener","destroy","node","ReactDOM","findDOMNode","HTMLElement","render","_this4","react__WEBPACK_IMPORTED_MODULE_3___default","className","Component","__webpack_exports__","selection","keys","k","attr","__webpack_require__","d","makeTip","d3_selection__WEBPACK_IMPORTED_MODULE_0__","fx","in","container","pageX","pageY","transition","duration","move","out","selector","tipContainer","select","append","tipContent","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","Consumer","staticQueryData","query","propTypes","PropTypes","string","isRequired","func","m","module","exports","require","default","colors","filter","Color","hsl","array","luminosity","v","index","self","indexOf","sort","Math","random","SEO","_ref","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","defaultProps","arrayOf","legendIconStyle","cursor","display","listStyle","Legend","_ref$theme","theme","colorScheme","onSelect","scheme","scaleOrdinal","labels","bins","active","hasOwnProperty","key","backgroundColor","border","onClick","Header","siteTitle","index_es","position","variant","color","gatsby_browser_entry","to","Layout","Fragment","flexGrow","padding","paddingTop","Date","getFullYear","href","_755544856","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","shape","joyPlotD3","svg","dataSets","containers","xAxisContainer","yAxisContainer","gridXContainer","gridYContainer","yOuterScaleBand","scaleBand","scaleLinear","innerScaleBand","defaultAxis","bar","groupMargin","counts","delay","domain","max","min","defaultGrid","bottom","left","right","top","dasharray","linecap","tip","tips","tipContentFn","joyTitle","newProps","mergeProps","_makeSvg","makeGrid","makeScales","merge","selectAll","childNodes","getElementsByTagName","removeChild","valuesCount","reduce","b","appendDomainRange","yDomain","allCounts","prev","next","thisCounts","p","item","thisExtent","extent","Number","yRange","bandwidth","range","yAxisWidth","xAxisHeight","gridHeight","getBins","Array","from","Set","_drawScales","xAxis","w","gridWidth","dataLabels","rangeRound","paddingInner","groupedMargin","barMargin","axisBottom","undefined","tickValues","yLabels","String","yOuterBounds","yAxis","axisLeft","yTickSize","attrs","barWidth","updateChart","groupData","borderColors","g","bars","enter","ix","findIndex","html","currentHeight","exit","_drawGrid","axisWidth","offset","make_x_gridlines","tickFormat","make_y_gridlines","lineData","count","groupLabel","joyLabel","JoyPlot","objectWithoutPropertiesLoose_default","pieChartD3","previousData","storedWidth","storedHeight","donutWidth","displayFn","setIndex","dataSet","drawChartBg","drawCharts","outerRadius","_props$donutWidth","radius","innerRadius","_props$donutWidth2","drawChart","tau","PI","bgArc","arc","startAngle","endAngle","background","thisPie","pie","arcs","thisArc","path","attrTween","interpolate","_current","arcTween","path2","centroid","PieChart","shouldFormatTick","formatTick","timeFormat","gridX","gridY","xAxisLabel","yAxisLabel","stacked","sizeSVG","barY","stackIndex","thisGroupData","find","gData","dx","oSet","gHeight","xd","xText","yText","drawGrid","makeXGridlines","makeYGridlines","data2","filterRange","buildScales","scaleLog","clamp","scaleTime","lineChartD3","xParseTime","xFormatTime","lineContainer","xScale","yScale","lineProps","curveType","show","strokeDashArray","strokeDashOffset","pointProps","info","toFixed","datumProps","line","point","_buildScales","_createLines","_drawDataPointSet","getYAxisWidth","pointContainer","points","xDomain","ys","xs","getXAxisHeight","datum","parsedY","parsedX","_drawLines","oldData","newD","empty","curve","drawAreas","area","y0","y1","_buildScales2","timeParse","toString","LineChart","_React$Component","scatterPlotD3","domainByTrait","choices","values","distModels","legendWidth","split","xSize","ySize","_drawLegend","legend","cell","_drawPoints","traits","nx","cross","plotCell","trait","ScatterPlot","componentWillReceiveProps","horizontalHistogramD3","xRange","h","_drawBars","drawDataSet","barHeight","setCount","barItem","all","multiLineOffset","currentWidth","gy","HorizontalHistogram","histogram","src_LineChart","src_HorizontalHistogram"],"mappings":"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","file":"component---src-pages-map-tsx-7d98bd5d2f31f655bdac.js","sourcesContent":["import {map} from \"d3-collection\";\nimport {dispatch} from \"d3-dispatch\";\n\nexport default function(url, callback) {\n  var request,\n      event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      mimeType,\n      headers = map(),\n      xhr = new XMLHttpRequest,\n      user = null,\n      password = null,\n      response,\n      responseType,\n      timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\"\n      && !(\"withCredentials\" in xhr)\n      && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n  \"onload\" in xhr\n      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n  function respond(o) {\n    var status = xhr.status, result;\n    if (!status && hasResponse(xhr)\n        || status >= 200 && status < 300\n        || status === 304) {\n      if (response) {\n        try {\n          result = response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function(e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);\n      else headers.set(name, value + \"\");\n      return request;\n    },\n\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return request;\n    },\n\n    timeout: function(value) {\n      if (!arguments.length) return timeout;\n      timeout = +value;\n      return request;\n    },\n\n    user: function(value) {\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n    },\n\n    password: function(value) {\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n    },\n\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function(value) {\n      response = value;\n      return request;\n    },\n\n    // Alias for send(\"GET\", …).\n    get: function(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n\n    // Alias for send(\"POST\", …).\n    post: function(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n\n    // If callback is non-null, it will be used for error and load events.\n    send: function(method, data, callback) {\n      xhr.open(method, url, true, user, password);\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n      if (responseType != null) xhr.responseType = responseType;\n      if (timeout > 0) xhr.timeout = timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n\n    abort: function() {\n      xhr.abort();\n      return request;\n    },\n\n    on: function() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n}\n\nfunction fixCallback(callback) {\n  return function(error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\"\n      ? xhr.response // null on error\n      : xhr.responseText; // \"\" on error\n}\n","import request from \"./request\";\n\nexport default function(defaultMimeType, response) {\n  return function(url, callback) {\n    var r = request(url).mimeType(defaultMimeType).response(response);\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return r.get(callback);\n    }\n    return r;\n  };\n}\n","import type from \"./type\";\n\nexport default type(\"application/json\", function(xhr) {\n  return JSON.parse(xhr.responseText);\n});\n","import type from \"./type\";\n\nexport default type(\"text/html\", function(xhr) {\n  return document.createRange().createContextualFragment(xhr.responseText);\n});\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import type from \"./type\";\n\nexport default type(\"text/plain\", function(xhr) {\n  return xhr.responseText;\n});\n","import type from \"./type\";\n\nexport default type(\"application/xml\", function(xhr) {\n  var xml = xhr.responseXML;\n  if (!xml) throw new Error(\"parse error\");\n  return xml;\n});\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","import request from \"./request\";\n\nexport default function(defaultMimeType, parse) {\n  return function(url, row, callback) {\n    if (arguments.length < 3) callback = row, row = null;\n    var r = request(url).mimeType(defaultMimeType);\n    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n    r.row(row);\n    return callback ? r.get(callback) : r;\n  };\n}\n\nfunction responseOf(parse, row) {\n  return function(request) {\n    return parse(request.responseText, row);\n  };\n}\n","import {csvParse} from \"d3-dsv\";\nimport dsv from \"./dsv\";\n\nexport default dsv(\"text/csv\", csvParse);\n","import {tsvParse} from \"d3-dsv\";\nimport dsv from \"./dsv\";\n\nexport default dsv(\"text/tab-separated-values\", tsvParse);\n","import { json } from 'd3-request';\nimport { FeatureCollection } from 'geojson';\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\n\nimport { Map } from '../../../src';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { data } from '../data';\n\nconst MapExample = () => {\n  const [loading, setLoading] = useState(true);\n\n  const [geojson, setGeoJson] = useState<FeatureCollection<any, any>>(null);\n  useEffect(() => {\n    const url = 'https://opendata.arcgis.com/datasets/8d3a9e6e7bd445e2bdcc26cdf007eac7_3.geojson';\n    json(url, (error, collection) => {\n      if (error) { throw error; }\n      setGeoJson(collection);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return <div>loading</div>;\n  }\n  return (\n    <Layout>\n      <SEO title=\"Histogram\" description=\"\" />\n      <h1>Map</h1>\n      <div>\n        <Map\n          data={data}\n          geojson={geojson}\n          height={400}\n          width={400} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default MapExample;\n\n","import { curveCatmullRom } from 'd3-shape';\n\nimport {\n  IAxes,\n  IStroke,\n} from '../';\nimport {\n  IGrid,\n  ISVGLineStyle,\n} from '../Histogram';\nimport { ILineProps } from '../LineChart';\n\nexport const lineStyle: ISVGLineStyle = {\n  'fill': '#000',\n  'opacity': 1,\n  'shape-rendering': 'auto',\n  'stroke': '#000',\n  'stroke-opacity': 1,\n  'stroke-width': 1,\n  'visible': true,\n};\n\nexport const stroke: IStroke = {\n  color: '#000',\n  dasharray: '0',\n  linecap: 'butt',\n  width: 1,\n};\n\nexport const line: ILineProps = {\n  curveType: curveCatmullRom,\n  fill: {\n    fill: '#000',\n    show: true,\n  },\n  show: true,\n  stroke: '#000',\n  strokeDashArray: '0',\n  strokeDashOffset: 0,\n};\n\nexport const axis: IAxes = {\n  x: {\n    dateFormat: '',\n    height: 20,\n    label: '',\n    margin: 20,\n    numberFormat: '',\n    scale: 'LINEAR',\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#666',\n    },\n    text: {\n      style: {\n        dy: '.35em',\n        transform: 'rotate(0)',\n        x: 0,\n        y: 10,\n      },\n    },\n    tickSize: 0,\n    ticks: 3,\n    visible: true,\n    width: 50,\n  },\n  y: {\n    dateFormat: '',\n    height: 20,\n    label: '',\n    margin: 20,\n    numberFormat: '',\n    scale: 'LINEAR',\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#666',\n    },\n    text: {\n      style: {\n        fill: '#666',\n      },\n    },\n    tickSize: 20,\n    ticks: 3,\n    visible: true,\n    width: 50,\n  },\n};\n\nexport const grid: IGrid = {\n  x: {\n    height: 1,\n    style: {\n      ...lineStyle,\n      'fill': 'none',\n      'stroke': '#bbb',\n      'stroke-opacity': 0.7,\n      'stroke-width': 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      'fill': 'none',\n      'stroke': '#bbb',\n      'stroke-opacity': 0.7,\n      'stroke-width': 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { histogramD3 } from './HistogramD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface IChartAdaptor<P> {\n  create: (el: Element, props: DeepPartial<P>) => void;\n  update: (el: Element, props: DeepPartial<P>) => void;\n  destroy: (el: Element) => void;\n}\n\nexport interface IHistogramBar {\n  groupMargin: number;\n  margin: number;\n  width: number;\n}\n\nexport interface IGrid {\n  x: {\n    height: number;\n    ticks: number;\n    visible: boolean;\n    style: ISVGLineStyle;\n  };\n  y: {\n    style: ISVGLineStyle;\n    ticks: number;\n    visible: boolean;\n  };\n}\n\nexport interface IStroke {\n  color: ((d, i: number, colors: (i: number) => string) => string) | string;\n  dasharray: string;\n  linecap: 'butt' | 'round' | 'square';\n  width: number;\n}\n\nexport interface IAxes {\n  y: IAxis;\n  x: IAxis;\n}\nexport interface IHistogramDataSet {\n  borderColors?: string[];\n  colors?: string[];\n  label: string;\n  data: number[];\n}\n\nexport interface IHistogramData {\n  bins: string[];\n  counts: IHistogramDataSet[];\n  colorScheme?: string[];\n  title?: string;\n}\n\nexport interface IDomain {\n  max: number | null;\n  min: number | null;\n}\n\nexport interface IMargin {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\nexport interface IHistogramProps {\n  axis: IAxes;\n  bar: IHistogramBar;\n  className: string;\n  data: IHistogramData;\n  delay: number;\n  duration: number;\n  colorScheme: string[];\n  domain: IDomain;\n  grid: IGrid;\n  height: number;\n  margin: IMargin;\n  stacked: boolean;\n  stroke: IStroke;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\ntype Scale = 'LINEAR' | 'TIME' | 'LOG';\n\nexport interface ISVGLineStyle {\n  'stroke': string;\n  'fill': string;\n  'opacity': number;\n  'stroke-width': number;\n  'stroke-opacity': number;\n  'shape-rendering': string;\n  'visible': boolean;\n}\n\ninterface ISVGTextStyle {\n  fill?: string;\n  'font-size'?: string;\n  dy?: string | number;\n  'stroke-opacity'?: number;\n  'text-anchor'?: string;\n  transform?: string;\n  x?: string | number;\n  y?: string | number;\n}\n\nexport interface IChartState {\n  parentWidth?: number;\n}\nexport interface IAxis {\n  dateFormat: string;\n  numberFormat: string;\n  ticks: number;\n  height: number;\n  label: string;\n  margin: number;\n  scale: Scale;\n  style: ISVGLineStyle;\n  text: {\n    style: ISVGTextStyle;\n  };\n  width: number;\n  tickSize: number;\n  visible: boolean;\n}\n\nexport type TipContentFn<T> = (bins: T[], i: number, d: number, groupTitle?: string) => string;\n\n/**\n * Histogram component\n */\nclass Histogram extends Component<DeepPartial<IHistogramProps>, IChartState> {\n\n  private chart: IChartAdaptor<IHistogramProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IHistogramProps>) {\n    super(props);\n    this.chart = histogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IHistogramProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default Histogram;\n","export default ['#4bbcad',\n  '#d54539',\n  '#5ab94d',\n  '#8a5cd3',\n  '#a4b243',\n  '#ba5ccd',\n  '#54995c',\n  '#cf47a1',\n  '#d29f3e',\n  '#5c6fda',\n  '#c36528',\n  '#5fa6dc',\n  '#d74770',\n  '#7d7430',\n  '#8a529e',\n  '#df9273',\n  '#5f74b8',\n  '#ac5450',\n  '#d192d7',\n  '#b26088'];\n","import { ISVGLineStyle } from '../Histogram';\n\n/**\n * Apply style object to a d3 selection\n * @param {Object} selection D3 selection\n * @param {Object} style Css styling\n * @return {Object} selection\n */\nexport default (selection, style: ISVGLineStyle) => {\n  Object.keys(style).forEach((k: string) => {\n    selection.attr(k, style[k]);\n  });\n  return selection;\n};\n","import { event } from 'd3-selection';\nimport { select } from 'd3-selection';\n\nexport default {\n  fx: {\n    in: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n      container.transition()\n        .duration(200)\n        .style('opacity', 0.9);\n    },\n    move: (container) => {\n      container.style('left', (event.pageX) + 'px')\n        .style('top', (event.pageY - 55) + 'px');\n    },\n    out: (container) => {\n      container.transition()\n        .duration(100)\n        .style('opacity', 0);\n    },\n  },\n};\n\nexport const makeTip = (selector, tipContainer): { tipContainer: any, tipContent: any } => {\n  if (tipContainer) {\n    // Chart could be rebuilt - remove old tip\n    tipContainer.remove();\n  }\n  tipContainer = select(selector).append('div')\n    .attr('class', 'tooltip top')\n    .style('opacity', 0);\n\n  tipContainer.append('div')\n    .attr('class', 'tooltip-arrow');\n  return {\n    tipContainer,\n    tipContent: tipContainer.append('div')\n      .attr('class', 'tooltip-inner'),\n  };\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Color from 'color';\n\nexport default (colors) => {\n  return colors.filter((value) => {\n    try {\n      const c = Color(value);\n      const hsl = c.hsl().array();\n      if (hsl.length > 3) {\n        // remove alpha colours\n        return false;\n      }\n      const luminosity = c.luminosity();\n      return ((luminosity < 0.8 && luminosity > 0.1) && (hsl[2] < 200 && hsl[2] > 20)) // not too light\n        ; // not too dark\n    } catch (e) {\n      return false;\n    }\n  })\n    .filter((v, index, self) => self.indexOf(v) === index)\n    .sort(() => Math.random() - 0.5);\n};\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport {\n  graphql,\n  useStaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n              content: keywords.join(`, `),\n              name: `keywords`,\n            }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  keywords: [],\n  lang: `en`,\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import { scaleOrdinal } from 'd3-scale';\nimport React, { FC } from 'react';\n\nimport colorScheme from './colors';\nimport { IHistogramDataSet } from './Histogram';\n\ninterface IProps {\n  className?: string;\n  theme?: string[];\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  onSelect: (label: string) => void;\n  visible: { [key: string]: boolean };\n}\n\nconst legendIconStyle = {\n  cursor: 'pointer',\n  display: 'inline-block',\n  height: '1rem',\n  margin: '0.25rem 0.5rem',\n  width: '1rem',\n};\n\nconst listStyle = {\n  listStyle: 'none',\n};\n\nconst Legend: FC<IProps> = ({ className, theme = colorScheme, data, onSelect, visible }) => {\n  const scheme: any = scaleOrdinal(theme);\n  const labels = data.bins;\n  return (\n    <div className={className}>\n      <ul style={listStyle}>\n        {\n          labels.map((label) => {\n            const active = (visible.hasOwnProperty(label) && visible[label]) || !visible.hasOwnProperty(label);\n            return (\n              <li key={label}>\n                <div style={{\n                  ...legendIconStyle,\n                  backgroundColor: active ? scheme(label) : '#FFF',\n                  border: '2px solid ' + scheme(label),\n                }}\n                  onClick={() => onSelect(label)}>\n                </div> {label}\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Legend;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst Header = ({ siteTitle }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" >\n        <Link to=\"/\">{siteTitle}</Link>\n      </Typography>\n\n      <Button><Link to=\"histogram\">Histogram</Link></Button>\n      <Button><Link to=\"line\">Line Chart</Link></Button>\n      <Button><Link to=\"pie\">Pie Chart</Link></Button>\n      <Button><Link to=\"joyplot\">Joy Plot</Link></Button>\n      {/* <Button><Link to=\"/map\">Map</Link></Button> */}\n    </Toolbar>\n  </AppBar>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import './layout.css';\n\n/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\nimport {\n  graphql,\n  StaticQuery,\n} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(data) => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            flexGrow: 2,\n            margin: `0 auto`,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n            width: '100%',\n          }}\n        >\n          <main>{children}</main>\n\n        </div>\n        <footer>\n          © {new Date().getFullYear()}, Built by\n            {` `}\n          <a href=\"https://www.infosum.com\">InfoSum</a>\n        </footer>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport get from 'lodash.get';\nimport merge from 'lodash.merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n} from './Histogram';\nimport { IJoyPlotProps } from './JoyPlot';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n} from './utils/defaults';\nimport { DeepPartial } from './utils/types';\n\ninterface IGroupDataItem {\n  label: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const joyPlotD3 = ((): IChartAdaptor<IJoyPlotProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  let dataSets: IGroupData[];\n  let containers: Array<Selection<SVGGElement, any, any, any>>;\n  let xAxisContainer: Selection<SVGGElement, any, any, any>;\n  let yAxisContainer: Selection<SVGGElement, any, any, any>;\n  let gridXContainer: Selection<SVGGElement, any, any, any>;\n  let gridYContainer: Selection<SVGGElement, any, any, any>;\n  const yOuterScaleBand = scaleBand();\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisLeft(yOuterScaleBand)\n      .ticks(ticks);\n  }\n\n  const props: IJoyPlotProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: [{\n      bins: [],\n      counts: [],\n    }],\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: defaultGrid,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins, i, d, joyTitle): string =>\n      joyTitle + ': ' +\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const JoyPlotD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IJoyPlotProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      containers = props.data.map((d, i) => svg\n        .append('g')\n        .attr('class', `histogram-container-${i}`),\n      );\n\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: DeepPartial<IJoyPlotProps>) {\n      merge(props, newProps);\n      if (newProps.data) {\n        props.data = newProps.data as IJoyPlotProps['data'];\n      }\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData[]): void {\n      const yDomain: number[] = [];\n      const { domain } = props;\n\n      const allCounts: number[] = data.reduce((prev, next) => {\n        const thisCounts: number[] = next.reduce((p, n) => {\n          return [...p, ...n.map((item) => item.value)];\n        }, [] as number[]);\n        return [...prev, ...thisCounts];\n      }, [0]);\n\n      const thisExtent = extent(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : Number(thisExtent[1]);\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : Number(thisExtent[0]);\n      const yRange = [yOuterScaleBand.bandwidth(), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    yAxisWidth() {\n      const { axis } = props;\n      return axis.y.label === ''\n        ? axis.y.width\n        : axis.y.width + 30;\n    },\n\n    xAxisHeight() {\n      const { axis } = props;\n      return axis.x.label === ''\n        ? axis.x.height\n        : axis.x.height + 30;\n    },\n\n    makeScales() {\n      const { axis, margin, height, width } = props;\n      xAxisContainer = svg.append('g').attr('class', 'x-axis');\n      yAxisContainer = svg.append('g').attr('class', 'y-axis');\n\n      if (axis.x.label !== '') {\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('transform',\n            'translate(' + (Number(width) / 2) + ' ,' +\n            ((height - this.xAxisHeight() - (margin.left * 2)) + 10 + axis.x.margin) + ')')\n          .style('text-anchor', 'middle')\n          .text(axis.x.label);\n      }\n\n      if (axis.y.label !== '') {\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('transform', 'translate(0, -' + this.gridHeight() + ')rotate(-90)')\n          .attr('y', 0 - margin.left)\n          .attr('x', 0 - (height / 2 - (margin.top * 2)))\n          .attr('dy', '1em')\n          .style('text-anchor', 'middle')\n          .text(axis.y.label);\n      }\n    },\n\n    getBins() {\n      return props.data.reduce((prev, next) => {\n        return Array.from(new Set(prev.concat(next.bins)));\n      }, [] as string[]);\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData[]) {\n      const { margin, height, axis } = props;\n      const valuesCount = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? c : prev;\n      }, 0);\n      const w = this.gridWidth();\n\n      let xAxis;\n      const dataLabels = data[0].counts.map((c) => c.label);\n\n      const bins = this.getBins();\n      x\n        .domain(bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n\n      xAxis = axisBottom(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n\n      xAxisContainer\n        .attr('transform', 'translate(' + (this.yAxisWidth() + axis.y.style['stroke-width']) + ',' +\n          (height - this.xAxisHeight() - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      const yLabels = data.map((d) => String(d.title));\n      const yOuterBounds: [number, number] = [height - (margin.top * 2) - this.xAxisHeight(), 0];\n      yOuterScaleBand.domain(yLabels)\n        .rangeRound(yOuterBounds);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft(yOuterScaleBand).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n\n      yAxisContainer\n        .attr('transform', 'translate(' + this.yAxisWidth() + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     */\n    gridWidth(): number {\n      const { width, margin } = props;\n      return Number(width) - (margin.left * 2) - this.yAxisWidth();\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     */\n    gridHeight(): number {\n      const { height, margin } = props;\n      return height - (margin.top * 2) - this.xAxisHeight();\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    /**\n     * Calculate the bar width\n     */\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      groupData: IGroupData[],\n    ) {\n      const bins = this.getBins();\n      const { delay, duration, axis, stroke, tip, tipContentFn } = props;\n      const barWidth = this.barWidth();\n\n      const colors = scaleOrdinal(props.colorScheme);\n      const borderColors = scaleOrdinal(['#FFF']);\n\n      const yAxisWidth = this.yAxisWidth();\n\n      groupData.forEach((data, i) => {\n        const joyTitle = props.data[i].title;\n        const g = containers[i]\n          .selectAll<SVGGElement, {}>('g')\n          .data(data);\n\n        const bars = g.enter()\n          .append<SVGGElement>('g')\n          .merge(g)\n          .attr('transform', (d) => {\n            const xdelta = yAxisWidth\n              + axis.y.style['stroke-width']\n              + (x(d[0].label) || 0);\n\n            const ydelta = yOuterScaleBand(d[0].label);\n            return `translate(${xdelta}, ${ydelta})`;\n          })\n          .selectAll<SVGRectElement, {}>('rect')\n          .data((d) => d);\n\n        bars\n          .enter()\n          .append<SVGRectElement>('rect')\n          .attr('height', 0)\n          .attr('y', (d: IGroupDataItem): number => yOuterScaleBand.bandwidth())\n\n          .attr('class', 'bar')\n          .attr('x', (d) => String(innerScaleBand(d.label)))\n          .attr('width', (d) => barWidth)\n          .attr('fill', (d, ix) => colors(String(ix)))\n\n          .on('mouseover', (d: IGroupDataItem) => {\n            const ix = bins.findIndex((b) => b === d.label);\n            tipContent.html(() => tipContentFn(bins, ix, d.value, joyTitle));\n            tip.fx.in(tipContainer);\n          })\n          .on('mousemove', () => tip.fx.move(tipContainer))\n          .on('mouseout', () => tip.fx.out(tipContainer))\n          .merge(bars)\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('y', (d: IGroupDataItem): number => y(d.value))\n          .attr('stroke', (d, ix) => {\n            if (borderColors) {\n              return borderColors(String(ix));\n            }\n            return '';\n          })\n          .attr('shape-rendering', 'crispEdges')\n          .attr('stroke-width', stroke.width)\n          .attr('stroke-linecap', stroke.linecap)\n\n          // Hide bar's bottom border\n          .attr('stroke-dasharray',\n            (d: IGroupDataItem): string => {\n              const currentHeight = yOuterScaleBand.bandwidth() - y(d.value);\n              return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n            })\n          .attr('height', (d: IGroupDataItem): number =>\n            yOuterScaleBand.bandwidth() - y(d.value),\n          );\n\n        g.exit().remove();\n      });\n    },\n\n    makeGrid() {\n      gridXContainer = svg.append('g')\n        .attr('class', 'grid gridX');\n      gridYContainer = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = data.reduce((prev, next) => {\n        const c = this.valuesCount(next.counts);\n        return c > prev ? prev : c;\n      }, 0);\n      const axisWidth = axis.y.style['stroke-width'];\n\n      const offset = {\n        x: this.yAxisWidth() + axisWidth,\n        y: this.gridHeight(),\n      };\n\n      if (grid.x.visible) {\n        // Add the X gridlines\n        gridXContainer.attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        gridXContainer.call(make_x_gridlines(get(grid, 'x.ticks', ticks))\n          .tickSize(-height + this.xAxisHeight() + (margin.top * 2))\n          .tickFormat(() => ''));\n\n        attrs(gridXContainer.selectAll('.tick line'), grid.x.style);\n        attrs(gridXContainer.selectAll('.domain'), { ...axis.y.style, stroke: 'transparent' });\n      }\n\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gridYContainer.attr('transform', 'translate(' + (this.yAxisWidth() + axisWidth) + ', 0)')\n          .transition()\n          .call(make_y_gridlines(get(grid, 'y.ticks', ticks))\n            .tickSize(-width + (margin.left * 2) + this.yAxisWidth())\n            .tickFormat(() => ''),\n          );\n\n        attrs(gridYContainer.selectAll('.tick line'), grid.y.style);\n\n        // Hide the first horizontal grid line to show axis\n        gridYContainer.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n          .attr('display', 'none');\n        attrs(gridYContainer.selectAll('.domain'), { ...axis.x.style, stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IJoyPlotProps>) {\n      this.mergeProps(newProps);\n      const { data, visible } = props;\n\n      dataSets = data.map((d) => {\n        const lineData = [] as IGroupData;\n        d.counts.forEach((count) => {\n          count.data.forEach((value, i) => {\n            if (!lineData[i]) {\n              lineData[i] = [];\n            }\n            lineData[i].push({\n              groupLabel: count.label,\n              joyLabel: d.title,\n              label: d.bins[i],\n              value: visible[d.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n            } as IGroupDataItem);\n          });\n        });\n        return lineData;\n      });\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this.updateChart(dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return JoyPlotD3;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IChartState,\n  IDomain,\n  IGrid,\n  IHistogramBar,\n  IHistogramData,\n  IMargin,\n  IStroke,\n  TipContentFn,\n} from './Histogram';\nimport { joyPlotD3 } from './JoyplotD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface IJoyPlotProps {\n  axis: IAxes;\n  bar: IHistogramBar;\n  className: string;\n  data: IHistogramData[];\n  delay: number;\n  duration: number;\n  colorScheme: string[];\n  domain: IDomain;\n  grid: IGrid;\n  height: number;\n  margin: IMargin;\n  stroke: IStroke;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * JoyPlot component\n */\nclass JoyPlot extends Component<DeepPartial<IJoyPlotProps>, IChartState> {\n\n  private chart: IChartAdaptor<IJoyPlotProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IJoyPlotProps>) {\n    super(props);\n    this.chart = joyPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IJoyPlotProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.chart.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default JoyPlot;\n","import 'd3-transition';\n\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport {\n  arc,\n  Arc,\n  pie,\n  PieArcDatum,\n} from 'd3-shape';\nimport get from 'lodash.get';\nimport merge from 'lodash.merge';\n\nimport colorScheme from './colors';\nimport {\n  IChartAdaptor,\n  IHistogramDataSet,\n} from './Histogram';\nimport {\n  IPieChartProps,\n  IPieDataItem,\n} from './PieChart';\nimport tips, { makeTip } from './tip';\nimport { DeepPartial } from './utils/types';\n\ninterface IPieDataset {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport const pieChartD3 = ((): IChartAdaptor<IPieChartProps> => {\n\n  let tipContainer;\n  let tipContent;\n\n  const props: IPieChartProps = {\n    backgroundColor: '#ddd',\n    className: 'piechart-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    donutWidth: 0,\n    height: 200,\n    labels: {\n      display: true,\n      displayFn: (d, ix) => d.value,\n    },\n    margin: {\n      bottom: 0,\n      left: 10,\n      right: 0,\n      top: 10,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number, groupLabel): string => {\n      return groupLabel + ': ' + bins[i] + '<br />' + d;\n    },\n    visible: {},\n    width: 200,\n  };\n\n  let containers: any[];\n  let svg: Selection<any, any, any, any>;\n  let dataSets: IPieDataset[][];\n  let previousData: any;\n  let current: any;\n  let storedWidth: number;\n  let storedHeight: number;\n\n  const PieChartD3 = {\n\n    create(el: Element, newProps: DeepPartial<IPieChartProps> = {}) {\n      merge(props, newProps);\n      previousData = props.data.counts.map((set: IHistogramDataSet, setIndex: number) => {\n        return set.data\n          .map((count, i) => ({\n            count,\n            groupLabel: set.label,\n            label: props.data.bins[i],\n          }));\n      });\n      this._makeSvg(el);\n      containers = [];\n      previousData.forEach((dataSet, i) => {\n        this.drawChartBg(props.data, i);\n      });\n\n      this.update(el, props);\n    },\n\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    update(el: Element, newProps: DeepPartial<IPieChartProps>) {\n      if (!props.data) {\n        return;\n      }\n      merge(props, newProps);\n      if (props.colorScheme) {\n        props.colorScheme = props.colorScheme;\n      }\n      if (!props.data.bins) {\n        return;\n      }\n\n      this.drawCharts();\n    },\n\n    outerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = props;\n\n      const radius = Math.min(Number(width), height) / 2;\n      return donutWidth === 0\n        ? radius - 10\n        : radius - 10 - (setIndex * (donutWidth + 10));\n    },\n\n    innerRadius(setIndex = 0) {\n      const { donutWidth = 0, width, height } = props;\n      const radius = Math.min(Number(width), height) / 2;\n      return donutWidth === 0\n        ? 0\n        : radius - 10 - donutWidth - (setIndex * (donutWidth + 10));\n    },\n\n    drawCharts() {\n      const { data, visible } = props;\n      dataSets = data.counts.map((set: IHistogramDataSet) => {\n        return set.data\n          .map((count, i) => ({\n            count: visible[data.bins[i]] !== false ? count : 0,\n            groupLabel: set.label,\n            label: data.bins[i],\n          }));\n      });\n\n      dataSets.forEach((dataSet, i) => {\n        const theme = get(data.counts[i], 'colors', props.colorScheme);\n        this.drawChart(dataSet, i, data.bins, theme);\n      });\n      previousData = dataSets;\n    },\n\n    drawChartBg(data, i) {\n      const { backgroundColor, width, height } = props;\n      const tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n      const bgArc = arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(0)\n        .endAngle(tau);\n      const container = svg\n        .append('g')\n        .attr('class', 'pie-bg');\n      const background = container.append('path')\n        .attr('class', 'pie-background')\n        .style('fill', backgroundColor);\n      background.enter()\n        .attr('transform', 'translate(' + Number(width) / 2 + ',' + height / 2 + ')')\n        .attr('d', bgArc);\n\n      background.merge(background);\n\n      if (!containers[i]) {\n        containers[i] = svg\n          .append('g')\n          .attr('class', 'pie-container');\n      }\n    },\n\n    drawChart(data, i: number, bins: string[], theme: string[]) {\n      const { labels, width, height, tip, tipContentFn } = props;\n      // Stack multiple charts in concentric circles\n      const outerRadius = this.outerRadius(i);\n      const innerRadius = this.innerRadius(i);\n\n      // Function to calculate pie chart paths from data\n      const thisPie = pie()\n        .sort(null)\n        .value((d: any) => d.count);\n\n      // Formated pie chart arcs based on previous current data\n      const arcs = thisPie(previousData[i]);\n\n      const colors = scaleOrdinal(theme);\n\n      const thisArc = arc()\n        .outerRadius(outerRadius)\n        .innerRadius(innerRadius);\n\n      const path = containers[i].selectAll('path')\n        .data(thisPie(data));\n\n      const g = path.enter().append('g')\n        .attr('class', 'arc');\n\n      g.append('path')\n        .attr('transform', 'translate(' + Number(width) / 2 + ',' + height / 2 + ')')\n        .attr('stroke', '#FFF')\n        .attr('fill', (d, j) => colors(j))\n\n        .each((d, j) => { current = arcs[j]; }) // store the initial angles\n        .attr('d', thisArc)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .style('opacity', 0)\n        .transition()\n        .duration(500)\n        .style('opacity', 1);\n\n      // Fade in when adding (merge)\n      path\n        .merge(path)\n        .on('mouseover', (d: PieArcDatum<IPieDataItem>, ix: number) => {\n          tipContent.html(() => tipContentFn(bins, ix, d.data.count, d.data.groupLabel));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .transition()\n        .delay(400)\n        .duration(500)\n        .attr('fill', (d, j) => colors(j))\n        .attrTween('d', arcTween(thisArc));\n\n      const path2 = containers[i].selectAll('text.label')\n        .data(thisPie(data));\n      path2.enter().append('text')\n        .attr('class', 'label')\n        .each(() => {\n          // Store initial offset incase we change chart heights.\n          storedHeight = height;\n          storedWidth = Number(width);\n        })\n        .attr('transform', (d) => {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (storedWidth / 2);\n          const y = centroid[1] + (storedHeight / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .each((d: any) => {\n          // Store current value to work out fx transition opacities\n          current = d;\n        })\n        .text((d, ix) => {\n          if (d.value === 0) {\n            return '';\n          }\n          return labels.displayFn(d, ix);\n        });\n\n      path2\n        .merge(path2)\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .transition()\n        .attr('transform', (d) => {\n          const centroid = thisArc.centroid(d);\n          const x = centroid[0] + (storedWidth / 2);\n          const y = centroid[1] + (storedHeight / 2);\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .transition()\n        .duration(500)\n        .style('opacity', (d) => {\n          // Only show if the new value is not 0 and labels are set to be displayed\n          return labels.display === false || d.data.value === 0 ? 0 : 1;\n        });\n\n      path2.exit().remove();\n\n      path.exit().transition()\n        .duration(500)\n        .style('opacity', 0).remove();\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n\n  return PieChartD3;\n});\n\n// Returns a tween for a transition’s \"d\" attribute, transitioning any selected\n// arcs from their current angle to the specified new angle.\nfunction arcTween(this: any, thisArc: Arc<any, any>) {\n  return function (this: any, d) {\n    const i = interpolate(this._current, d);\n    this._current = i(0);\n    return function (this: any, t) {\n      return thisArc(i(t));\n    };\n  };\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramDataSet,\n  IMargin,\n  TipContentFn,\n} from './Histogram';\nimport { pieChartD3 } from './PieChartD3';\nimport { DeepPartial } from './utils/types';\n\ninterface ILabels {\n  display: boolean;\n  displayFn: (d: any, ix: number) => string | number;\n}\n\nexport interface IPieDataItem {\n  count: number;\n  groupLabel: string;\n  label: string;\n}\n\nexport interface IPieChartProps {\n  data: {\n    bins: string[],\n    counts: IHistogramDataSet[];\n  };\n  backgroundColor: string;\n  className: string;\n  colorScheme: string[];\n  donutWidth: number;\n  height: number;\n  labels: ILabels;\n  margin: IMargin;\n  tip: any;\n  tipContainer: string;\n  tipContentFn: TipContentFn<string>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\n/**\n * PieChart component\n */\nclass PieChart extends Component<DeepPartial<IPieChartProps>, IChartState> {\n\n  private chart: IChartAdaptor<IPieChartProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IPieChartProps>) {\n    super(props);\n    this.chart = pieChartD3();\n\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (el) {\n      const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n      this.setState({\n        parentWidth: width,\n      }, () => this.chart.create(el, this.getChartState()));\n    }\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (el) {\n      this.chart.create(el, this.getChartState());\n      if (this.props.width === '100%') {\n        window.addEventListener('resize', (e) => this.handleResize());\n        this.handleResize();\n      }\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (el) {\n      this.chart.update(el, this.getChartState());\n    }\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IPieChartProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    const el = this.getDOMNode();\n    if (el) {\n      this.chart.destroy(el);\n    }\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"piechart-chart-container\"></div>);\n  }\n}\n\nexport default PieChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport { format } from 'd3-format';\nimport {\n  scaleBand,\n  scaleLinear,\n  ScaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport get from 'lodash.get';\nimport merge from 'lodash.merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridHeight,\n  gridWidth,\n  xAxisHeight,\n  yAxisWidth,\n} from './grid';\nimport {\n  IAxis,\n  IChartAdaptor,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid,\n} from './utils/defaults';\nimport { DeepPartial } from './utils/types';\n\nexport const shouldFormatTick = (axis: IAxis): boolean => {\n  return (axis.scale === 'TIME' && axis.hasOwnProperty('dateFormat'))\n    || axis.hasOwnProperty('numberFormat');\n}\nexport const formatTick = (axis: IAxis) => (v: string | number) => {\n  if (axis.scale === 'TIME') {\n    return timeFormat(axis.dateFormat)(new Date(v));\n  }\n  return format(axis.numberFormat)(Number(v))\n};\n\ninterface IGroupDataItem {\n  label: string;\n  groupLabel?: string;\n  value: number;\n}\n\ntype IGroupData = IGroupDataItem[][];\n\nexport const histogramD3 = ((): IChartAdaptor<IHistogramProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  const y = scaleLinear();\n  const x = scaleBand();\n  const innerScaleBand = scaleBand();\n  let container: Selection<SVGElement, any, any, any>;\n  let dataSets: any[];\n  let gridX: any;\n  let gridY: any;\n  let yAxisContainer: Selection<any, any, any, any>;\n  let xAxisContainer: Selection<any, any, any, any>;\n  let xAxisLabel: any;\n  let yAxisLabel: any;\n\n  const props: IHistogramProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0.1,\n      margin: 0,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    stacked: false,\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IHistogramProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeGrid();\n      this.makeScales();\n      container = svg\n        .append<SVGElement>('g')\n        .attr('class', 'histogram-container');\n\n      this.update(el, newProps);\n    },\n\n    mergeProps(newProps: DeepPartial<IHistogramProps>) {\n      merge(props, newProps);\n      if (newProps.data) {\n        props.data = newProps.data as IHistogramProps['data'];\n      }\n      if (newProps.colorScheme) {\n        props.colorScheme = newProps.colorScheme;\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      // Reference to svg element containing chart\n      svg = select(el).append('svg');\n      this.sizeSVG();\n\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    sizeSVG() {\n      const { margin, width, height, className } = props;\n      const scale = {\n        x: 1 - (margin.left / Number(width)),\n        y: 1 - (margin.top / height),\n      };\n      svg.attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n    },\n\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Update a linear scale with range and domain values taken either from the compiled\n     * group data. If the chart is stacked then sum all bin values first.\n     */\n    appendDomainRange(scale: ScaleLinear<number, number>, data: IGroupData): void {\n      const yDomain: number[] = [];\n      const { domain, margin, height, stacked } = props;\n\n      const allCounts: number[] = data.reduce((prev: number[], next): number[] => {\n        return stacked\n          ? [...prev, next.reduce((p: number, n): number => p + n.value, 0)]\n          : [...prev, ...next.map((n) => n.value)];\n      }, [0]);\n      const thisExtent = extent<any>(allCounts, (d) => d);\n      yDomain[1] = domain && domain.hasOwnProperty('max') && domain.max !== null\n        ? domain.max\n        : Number(thisExtent[1]);\n      yDomain[0] = domain && domain.hasOwnProperty('min') && domain.min !== null\n        ? domain.min\n        : Number(thisExtent[0]);\n      const yRange = [height - (margin.top * 2) - xAxisHeight(props.axis), 0];\n      scale.range(yRange)\n        .domain(yDomain);\n    },\n\n    makeScales() {\n      xAxisContainer = svg.append('g').attr('class', 'x-axis');\n      yAxisContainer = svg.append('g').attr('class', 'y-axis');\n\n      xAxisLabel = svg.append('g');\n      yAxisLabel = svg.append('g');\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales() {\n      const { axis, data, margin, height, stacked } = props;\n      const valuesCount = this.valuesCount(data.counts);\n      const w = gridWidth(props);\n\n      const dataLabels = data.counts.map((c) => c.label);\n\n      x\n        .domain(data.bins)\n        .rangeRound([0, w])\n        .paddingInner(this.groupedMargin());\n\n      innerScaleBand\n        .domain(stacked ? ['main'] : dataLabels)\n        .rangeRound([0, x.bandwidth()])\n        .paddingInner(this.barMargin());\n      const xAxis = axisBottom<string>(x);\n\n      const tickSize = get(axis, 'x.tickSize', undefined);\n      if (tickSize !== undefined) {\n        xAxis.tickSize(tickSize);\n      } else {\n        if (w / valuesCount < 10) {\n          // Show one in 10 x axis labels\n          xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n        }\n      }\n      if (shouldFormatTick(axis.x)) {\n        xAxis.tickFormat(formatTick(axis.x));\n      }\n\n      xAxisContainer\n        .attr('transform', 'translate(' + (yAxisWidth(axis) + axis.y.style['stroke-width']) + ',' +\n          (height - xAxisHeight(props.axis) - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      this.appendDomainRange(y, dataSets);\n\n      const yAxis = axisLeft<number>(y).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (shouldFormatTick(axis.y)) {\n        yAxis.tickFormat(formatTick(axis.y));\n      }\n      yAxisContainer\n        .attr('transform', 'translate(' + yAxisWidth(axis) + ', 0)')\n        .transition()\n        .call(yAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     */\n    groupedMargin(): number {\n      const m = get(props.bar, 'groupMargin', 0.1);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barMargin(): number {\n      const m = get(props.bar, 'margin', 0);\n      return m >= 0 && m <= 1\n        ? m\n        : 0.1;\n    },\n\n    barWidth() {\n      return innerScaleBand.bandwidth();\n    },\n\n    /**\n     * Draw a single data set into the chart\n     */\n    updateChart(\n      bins: string[],\n      groupData: IGroupData,\n    ) {\n      const { axis, height, width, margin, delay, duration, tip, stacked } = props;\n      const barWidth = this.barWidth();\n\n      const barY = (d: IGroupDataItem, stackIndex: number): number => {\n        const thisGroupData = groupData.find((gData) => {\n          return gData.find((dx) => dx.label === d.label) !== undefined;\n        });\n        const oSet = thisGroupData ?\n          thisGroupData\n            .filter((_, i) => i < stackIndex)\n            .reduce((prev, next) => prev + next.value, 0)\n          : 0;\n        const offset = stacked && stackIndex > 0\n          ? oSet\n          : 0;\n        return y(d.value + offset);\n      }\n      // const borderColors = set.borderColors ? d3.scaleOrdinal(set.borderColors) : null;\n      const colors = scaleOrdinal(props.colorScheme);\n      const gHeight = gridHeight(props);\n\n      const g = container\n        .selectAll<SVGElement, {}>('g')\n        .data(groupData);\n\n      const bars = g.enter()\n        .append<SVGElement>('g')\n        .merge(g)\n        .attr('transform', (d: any[]) => {\n          let xd = x(d[0].label);\n          if (xd === undefined) {\n            xd = 0;\n          }\n          const xdelta = yAxisWidth(axis)\n            + axis.y.style['stroke-width']\n            + xd;\n          return `translate(${xdelta}, 0)`;\n        })\n        .selectAll<SVGElement, {}>('rect')\n        .data((d) => d);\n\n      // Don't ask why but we must reference tipContentFn as props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: IGroupDataItem, i: number) => {\n        const ix = bins.findIndex((b) => b === d.label);\n        tipContent.html(() => props.tipContentFn(bins, ix, d.value));\n        tip.fx.in(tipContainer);\n      };\n\n      bars\n        .enter()\n        .append<SVGElement>('rect')\n        .attr('height', 0)\n        .attr('y', barY)\n        .attr('class', 'bar')\n        .on('mouseover', onMouseOver)\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(bars)\n        .attr('x', (d: IGroupDataItem) => {\n          return Number(innerScaleBand(String(d.groupLabel)));\n        })\n        .attr('width', (d) => barWidth)\n        .attr('fill', (d, i) => colors(String(i)))\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        .attr('y', barY)\n        // Hide bar's bottom border\n        .attr('stroke-dasharray',\n          (d: IGroupDataItem): string => {\n            const currentHeight = gHeight - (y(d.value));\n            return `${barWidth} 0 ${currentHeight} ${barWidth}`;\n          })\n        .attr('height', (d: IGroupDataItem): number => gHeight - (y(d.value)));\n\n      bars.exit().remove();\n      g.exit().remove();\n\n      const xText = xAxisLabel\n        .selectAll('text')\n        .data([axis.x.label]);\n\n      xText.enter().append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xText)\n        .attr('transform',\n          'translate(' + (Number(width) / 2) + ' ,' +\n          ((height - xAxisHeight(props.axis) - (margin.left * 2)) + axis.x.margin) + ')')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n\n      const yText = yAxisLabel\n        .selectAll('text')\n        .data([axis.y.label]);\n\n      yText.enter().append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0)\n        .attr('x', 0 - (gHeight / 2 - (margin.top * 2)))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text((d) => d);\n    },\n\n    makeGrid() {\n      gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IHistogramProps>) {\n      if (!newProps.data) {\n        return;\n      }\n      this.mergeProps(newProps);\n      if (!props.data.bins) {\n        return;\n      }\n      this.sizeSVG();\n      const { data, visible } = props;\n      dataSets = [] as IGroupData;\n\n      data.counts.forEach((count) => {\n        count.data.forEach((value, i) => {\n          if (!dataSets[i]) {\n            dataSets[i] = [];\n          }\n          dataSets[i].push({\n            groupLabel: count.label,\n            label: data.bins[i],\n            value: visible[data.bins[i]] !== false && visible[count.label] !== false ? value : 0,\n          } as IGroupDataItem);\n        });\n      });\n\n      this._drawScales();\n      drawGrid(x, y, gridX, gridY, props, this.valuesCount(data.counts));\n      this.updateChart(data.bins, dataSets);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HistogramD3;\n});\n","import {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport get from 'lodash.get';\n\nimport attrs from './d3/attrs';\nimport { IAxes } from './Histogram';\n\n// Gridlines in y axis function\nexport const makeYGridlines = (y, ticks: number = 5) => {\n  return axisLeft(y)\n    .ticks(ticks);\n};\n\n// Gridlines in x axis function\nexport const makeXGridlines = (x, ticks: number = 5) => {\n  return axisBottom(x)\n    .ticks(ticks);\n};\n\nexport const drawGrid = (x, y, gridX, gridY, props, ticks) => {\n  const { height, width, axis, grid, margin } = props;\n  const axisWidth = axis.y.style['stroke-width'];\n\n  const offset = {\n    x: yAxisWidth(axis) + axisWidth,\n    y: gridHeight(props),\n  };\n\n  if (grid.x.visible) {\n    // Add the X gridlines\n    gridX.attr('transform', `translate(${offset.x}, ${offset.y})`)\n      .transition()\n      .call(makeXGridlines(x, get(grid, 'x.ticks', ticks))\n        .tickSize(-height + xAxisHeight(props.axis) + (margin.top * 2))\n        .tickFormat(() => ''));\n\n    attrs(gridX.selectAll('.tick line'), grid.x.style);\n    attrs(gridX.selectAll('.domain'), { ...axis.y.style, stroke: 'transparent' });\n  }\n\n  if (grid.y.visible) {\n    // add the Y gridlines\n    gridY.attr('transform', 'translate(' + (yAxisWidth(axis) + axisWidth) + ', 0)')\n      .transition()\n      .call(makeYGridlines(y, get(grid, 'y.ticks', ticks))\n        .tickSize(-width + (margin.left * 2) + yAxisWidth(axis))\n        .tickFormat(() => ''),\n      );\n\n    attrs(gridY.selectAll('.tick line'), grid.y.style);\n\n    // Hide the first horizontal grid line to show axis\n    gridY.selectAll('.gridY .tick line').filter((d, i) => i === 0)\n      .attr('display', 'none');\n    attrs(gridY.selectAll('.domain'), { ...axis.x.style, stroke: 'transparent' });\n  }\n};\n\nexport const gridHeight = (props): number => {\n  const { height, margin, axis } = props;\n  return height - (margin.top * 2) - xAxisHeight(axis);\n};\n\nexport const yAxisWidth = (axis: IAxes) => {\n  return axis.y.label === ''\n    ? axis.y.width\n    : axis.y.width + 30;\n};\n\nexport const xAxisHeight = (axis: IAxes) => {\n  return axis.x.label === ''\n    ? axis.x.height\n    : axis.x.height + 30 + get(axis, 'x.margin', 0);\n};\n\nexport const gridWidth = (props): number => {\n  const { axis, width, margin } = props;\n  return width - (margin.left * 2) - yAxisWidth(axis);\n};\n","import { IHistogramData } from '../../src';\nimport filterRange from '../../src/colors/filterRange';\nimport { IGrid } from '../../src/Histogram';\nimport { lineStyle } from '../../src/utils/defaults';\n\nexport const grid: IGrid = {\n  x: {\n    style: {\n      ...lineStyle,\n      'stroke': '#ccc',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      'stroke': '#ccc',\n      'stroke-opacity': 0.4,\n    },\n    ticks: 5,\n  },\n};\n\nexport const data: IHistogramData = {\n  bins: ['Data 1', 'Data 6', 'Data 3', 'Dat 4'],\n  counts: [\n    {\n      data: [1, 2, 3, 4],\n      label: 'DataSet 1',\n    },\n    {\n      data: [13, 14, 15, 16],\n      label: 'DataSet 2',\n    },\n  ],\n};\n\nexport const data2 = {\n  bins: ['bin 1', 'bin 2', 'bin 3 with a long name', 'bin 4', 'bin 5', 'bin 6', 'bin 7'],\n  counts: [\n    {\n      borderColors: ['red'],\n      data: [1, 2, 3, 4, 5, 6, 7],\n      label: 'Data 1',\n    },\n  ],\n  title: 'Plot 1',\n};\n\nexport const data3 = {\n  bins: ['bin 1', 'bin 2', 'bin 3'],\n  counts: [\n    {\n      borderColors: ['red'],\n      colors: ['red'],\n      data: [100, 50, 40],\n      label: 'Data 1',\n    },\n    {\n      borderColors: ['red'],\n      colors: ['blue'],\n      data: [32, 1, 5, 0],\n      label: 'Data 2',\n    },\n  ],\n};\n\nexport const theme = filterRange(['rgba(255, 113, 1, 0.5)', '#fff6ef', 'rgba(0, 169, 123, 0.5)', '#f6fffd',\n  '#D7263D', 'rgba(215, 38, 61, 0.05)',\n  '#0f2629', '#ededed', 'rgba(86, 180, 191, 0.5)', '#f5fbfb', '#000000', '#0f2629', '#D7263D', '#FBD7D9',\n  '#ffebec', '#963540', '#22545a', '#56b4bf', '#56b4bf', '#56b4bf', '#FF7101', '#449098', '#77c3cb', '#d4eef8',\n  '#ff7101', '#FF7101', '#cc5a00', '#ff8d33', '#fef9e5', '#7d5d2e', '#00a97b', '#008762', '#33ba95', '#dbf1d6',\n  '#227839', '#0f5e7b', '#d4eef8', '#0f5e7b', '#F9C80E', '#007656', '#c5e5e9', '#f9c80e', '#a9a9a9',\n  '#dbdbdb', '#cccccc', '#e6e6e6', '#56b4bf', '#449098', '#77c3cb', '#22545a', '#ff7101', '#cdcdcd', '#ffffff',\n  '#d7263d', '#00a97b', '#888888', '#e6e6e6', '#f2f2f2', '#f4f4f4']);\n","import {\n  scaleLinear,\n  ScaleLinear,\n  scaleLog,\n  ScaleLogarithmic,\n  scaleTime,\n  ScaleTime,\n} from 'd3-scale';\n\nimport { IAxes } from '../';\n\nexport type AnyScale = ScaleLinear<number, number>\n  | ScaleTime<any, any>\n  | ScaleLogarithmic<any, any>;\n\nexport const buildScales = (axis: IAxes) => {\n  let x: AnyScale;\n  let y: AnyScale;\n  switch (axis.x.scale) {\n    case 'LOG':\n      x = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      x = scaleTime();\n      break;\n    default:\n      x = scaleLinear();\n      break;\n  }\n\n  switch (axis.y.scale) {\n    case 'LOG':\n      y = scaleLog().clamp(true); // clamp values below 1 to be equal to 0\n      break;\n    case 'TIME':\n      y = scaleTime();\n      break;\n    default:\n      y = scaleLinear();\n      break;\n  }\n  return [x, y];\n};\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport {\n  area,\n  curveCatmullRom,\n  CurveFactory,\n  CurveFactoryLineOnly,\n  line,\n} from 'd3-shape';\nimport {\n  timeFormat,\n  timeParse,\n} from 'd3-time-format';\nimport get from 'lodash.get';\nimport merge from 'lodash.merge';\n\nimport attrs from './d3/attrs';\nimport {\n  drawGrid,\n  gridWidth,\n  xAxisHeight as getXAxisHeight,\n  yAxisWidth as getYAxisWidth,\n} from './grid';\nimport { IChartAdaptor } from './Histogram';\nimport {\n  formatTick,\n  shouldFormatTick,\n} from './HistogramD3';\nimport {\n  ILineChartDataSet,\n  ILineChartProps,\n  ILineProps,\n  ISVGPoint,\n} from './LineChart';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n  lineStyle,\n} from './utils/defaults';\nimport {\n  AnyScale,\n  buildScales,\n} from './utils/scales';\nimport { DeepPartial } from './utils/types';\n\nconst ZERO_SUBSITUTE: number = 1e-6;\n\nexport const lineChartD3 = ((): IChartAdaptor<ILineChartProps> => {\n  let tipContainer;\n  let xParseTime;\n  let xFormatTime;\n  let tipContent;\n\n  const lineProps: ILineProps = {\n    curveType: curveCatmullRom,\n    fill: {\n      fill: '#eee',\n      show: false,\n    },\n    show: true,\n    stroke: '#005870',\n    strokeDashArray: '5 5',\n    strokeDashOffset: 0,\n  };\n\n  const pointProps: ISVGPoint = {\n    ...lineStyle,\n    fill: 'rgba(255, 255, 255, 0)',\n    radius: 4,\n    show: true,\n    stroke: '#005870',\n  };\n\n  const props: ILineChartProps = {\n    axis: defaultAxis,\n    className: 'line-chart-d3',\n    data: [],\n    grid: defaultGrid,\n    height: 250,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (info, i, d) => {\n      switch (typeof info[i].x) {\n        case 'object': // date\n          return xFormatTime(info[i].x) + ', ' + info[i].y;\n        default:\n          return Number(info[i].x).toFixed(3) + ', ' + info[i].y;\n      }\n    },\n    visible: {},\n    width: 200,\n  };\n\n  const datumProps = {\n    line: lineProps,\n    point: pointProps,\n  };\n\n  const curve = (\n    curveType: CurveFactory | CurveFactoryLineOnly,\n    yAxisWidth: number,\n    x,\n    y,\n  ) => line()\n    .curve(curveType)\n    .x((d: any) => x(d.x) + yAxisWidth)\n    .y((d: any) => y(d.y));\n\n  // let props: ILineChartProps;\n  let svg: Selection<any, any, any, any>;\n  let container: Selection<SVGElement, any, any, any>;\n  let lineContainer: Selection<any, any, any, any>;\n  let gridX: Selection<any, any, any, any>;\n  let gridY: Selection<any, any, any, any>;\n  let xScale: any; // AnyScale;\n  let yScale: any; // AnyScale;\n  let xAxisContainer: Selection<any, any, any, any>;\n  let yAxisContainer: Selection<any, any, any, any>;\n\n  const LineChartD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<ILineChartProps> = {}) {\n      this.mergeProps(newProps);\n      this._makeSvg(el);\n      this.makeScales();\n      [xScale, yScale] = buildScales(props.axis);\n      this.makeGrid();\n      container = svg\n        .append<SVGElement>('g')\n        .attr('class', 'linechart-container');\n\n      lineContainer = container\n        .append<SVGElement>('g')\n        .attr('class', 'line-container');\n      this._createLines(props.data);\n      this.update(el, props);\n    },\n\n    mergeProps(newProps: DeepPartial<ILineChartProps>) {\n      merge(props, newProps);\n      if (newProps.data) {\n        props.data = newProps.data as ILineChartProps['data'];\n      }\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n      this.sizeSVG();\n\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    sizeSVG() {\n      const { margin, width, height, className } = props;\n      const scale = {\n        x: 1 - (margin.left / Number(width)),\n        y: 1 - (margin.top / Number(height)),\n      };\n      svg.attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top}) scale(${scale.x},${scale.y})`);\n    },\n\n    /**\n     * Iterate over the dataset drawing points for sets marked as\n     * requiring points.\n     */\n    _drawDataPointSet(data: ILineChartProps['data']) {\n      const { axis, tip } = props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      const pointContainer = container.selectAll<SVGElement, {}>('g').data(data);\n\n      // Don't ask why but we must reference tipContentFn as props.tipContentFn otherwise\n      // it doesn't update with props changes\n      const onMouseOver = (d: ILineChartDataSet<any>, i: number) => {\n        tipContent.html(() => props.tipContentFn([d as any], 0, 0, ''));\n        tip.fx.in(tipContainer);\n      };\n      const points = pointContainer.enter()\n        .append<SVGElement>('g')\n        .attr('class', (d, i: number) => 'point-container' + i)\n        .merge(pointContainer)\n        .selectAll<SVGElement, {}>('circle')\n        .data((d) => {\n          return d.data.map((dx) => ({\n            ...dx,\n            point: d.point,\n          }));\n        });\n\n      // UPDATE - Update old elements as needed.\n      points.attr('class', 'update');\n\n      // ENTER + UPDATE\n      // After merging the entered elements with the update selection,\n      // apply operations to both.\n      points.enter().append<SVGElement>('circle')\n        .attr('class', 'enter')\n        .on('mouseover', (d, i) => {\n          tipContent.html(() => props.tipContentFn([d as any], 0, 0, ''));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .merge(points)\n        .attr('class', 'point')\n        .attr('cy', (d) => yScale(d.y))\n        .attr('r', (d, i: number) => 0)\n        .attr('fill', (d) => d.point.fill)\n        .attr('stroke', (d) => d.point.stroke)\n        .attr('cx', (d) => {\n          return xScale(d.x) + yAxisWidth;\n        })\n        .transition()\n        .duration(400)\n        .attr('r', (d) => d.point.show ? d.point.radius : 0)\n        .delay(650);\n\n      // EXIT - Remove old elements as needed.\n      pointContainer.exit().remove();\n      points.exit().remove();\n    },\n\n    makeScales() {\n      xAxisContainer = svg.append('g').attr('class', 'x-axis');\n      yAxisContainer = svg.append('g').attr('class', 'y-axis');\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: ILineChartProps['data']) {\n      // @TODO Grid not rendering down to x axis\n      const { axis, height } = props;\n      const w = gridWidth(props);\n      let yDomain;\n      let xDomain;\n      const ys: any[] = [];\n      const xs: any[] = [];\n      const yAxis = axisLeft<number>(yScale).ticks(axis.y.ticks);\n\n      const yTickSize = get(axis, 'y.tickSize', undefined);\n      if (yTickSize !== undefined) {\n        yAxis.tickSize(yTickSize);\n      }\n      if (shouldFormatTick(axis.y)) {\n        yAxis.tickFormat(formatTick(axis.y));\n      }\n\n      const xAxis = axisBottom<number | string>(xScale)\n        .ticks(axis.x.ticks);;\n\n      if (shouldFormatTick(axis.x)) {\n        xAxis.tickFormat(formatTick(axis.x));\n      }\n\n      const xAxisHeight = getXAxisHeight(axis);\n      const yAxisWidth = getYAxisWidth(axis);\n\n      data.forEach((datum) => {\n        datum.data.forEach((d) => {\n          let parsedY = d.y;\n          let parsedX = d.x;\n          if (axis.y.scale === 'LOG' && d.y === 0) {\n            parsedY = ZERO_SUBSITUTE;\n          }\n          if (axis.x.scale === 'LOG' && d.x === 0) {\n            parsedX = ZERO_SUBSITUTE;\n          }\n          ys.push((parsedY));\n          xs.push((parsedX));\n        });\n      });\n      yDomain = extent(ys);\n      xDomain = extent(xs);\n      // domain mustn't be 0 as log(0) gives Infinity. 1 lower domain gives better looking graphs\n      if (axis.y.scale === 'LOG' && yDomain[0] === ZERO_SUBSITUTE) {\n        yDomain[0] = 1;\n      }\n      if (axis.x.scale === 'LOG' && xDomain[0] === ZERO_SUBSITUTE) {\n        xDomain[0] = 1;\n      }\n      xScale\n        .domain(xDomain)\n        .rangeRound([0, w]);\n\n      yScale.domain(yDomain)\n        .range([Number(height) - xAxisHeight, 0]);\n\n      yAxisContainer\n        .attr('transform', `translate(${yAxisWidth}, 0)`)\n        .transition()\n        .call(yAxis);\n\n      xAxisContainer\n        .attr('transform', `translate(${yAxisWidth},${(Number(height) - xAxisHeight)})`)\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    // @TODO wont work adding / removing lines once chart is created\n    _createLines(data: Array<ILineChartDataSet<any>>) {\n      data.forEach((d, i) => {\n        lineContainer.append('path')\n          .attr('class', `line-${i}`);\n      });\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          lineContainer.append('path')\n            .attr('class', `fill-${i}`);\n\n        });\n\n    },\n\n    /**\n     * Iterate over data and update lines\n     */\n    _drawLines(data: Array<ILineChartDataSet<any>>, oldData: Array<ILineChartDataSet<any>>) {\n      const { axis } = props;\n      const yAxisWidth = getYAxisWidth(axis);\n\n      // Remove old lines\n      oldData.forEach((d, i) => {\n        const keep = data.find(((newD) => newD.label === d.label));\n        if (keep === undefined) {\n          lineContainer.select(`.line-${i}`)\n            .remove();\n        }\n      })\n\n      // change the line\n      data.forEach((d, i) => {\n        let selection = lineContainer.select(`.line-${i}`)\n        if (selection.empty()) {\n          lineContainer.append('path')\n            .attr('class', `line-${i}`);\n          selection = lineContainer.select(`.line-${i}`)\n        }\n\n        selection\n          .attr('fill', 'none')\n          .attr('stroke-dashoffset', d.line.strokeDashOffset)\n          .attr('stroke-dasharray', d.line.strokeDashOffset)\n          .attr('stroke', d.line.stroke)\n          .transition()\n          .duration(500)\n          .attr('d', curve(d.line.curveType, yAxisWidth, xScale, yScale)(d.data as any) as any)\n          .delay(50);\n      });\n    },\n\n    /**\n     * Iterates ove data and updates area fills\n     */\n    drawAreas(data: Array<ILineChartDataSet<any>>, oldData: Array<ILineChartDataSet<any>>) {\n      const { axis, height } = props;\n      const yAxisWidth = getYAxisWidth(axis);\n      const xAxisHeight = getXAxisHeight(axis);\n      const thisArea = (curveType) => area()\n        .curve(curveType)\n        .x((d: any) => xScale(d.x) + yAxisWidth)\n        .y0((d) => Number(height) - xAxisHeight)\n        .y1((d: any) => yScale(d.y));\n\n      // Remove old lines\n      oldData.forEach((d, i) => {\n        const keep = data.find(((newD) => newD.label === d.label));\n        if (keep === undefined) {\n          lineContainer.select(`.fill-${i}`).remove();\n        }\n      })\n\n      // change the line\n      data\n        .forEach((d, i) => {\n          let selection = lineContainer.select(`.fill-${i}`);\n          if (selection.empty()) {\n            lineContainer.append('path')\n              .attr('class', `fill-${i}`);\n            selection = lineContainer.select(`.fill-${i}`)\n\n          }\n          selection\n            .attr('fill', d.line.fill.fill)\n            .style('opacity', d.line.show && d.line.fill.show ? 1 : 0)\n            .transition()\n            .duration(500)\n            .delay(50)\n            .attr('d', thisArea(d.line.curveType)(d.data) as any)\n\n            ;\n        });\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(data: ILineChartProps['data']): number {\n      return data.reduce((a: number, b): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    makeGrid() {\n      gridX = svg.append('g')\n        .attr('class', 'grid gridX');\n      gridY = svg.append('g')\n        .attr('class', 'grid gridY');\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<ILineChartProps>) {\n      if (!newProps.data) {\n        return;\n      }\n      const oldData = [...props.data];\n      this.mergeProps(newProps);\n      this.sizeSVG();\n      [xScale, yScale] = buildScales(props.axis);\n      let data = props.data;\n\n      xParseTime = timeParse(props.axis.x.dateFormat);\n      xFormatTime = timeFormat(props.axis.x.dateFormat);\n      data = data.map((datum) => {\n        if (props.axis.x.scale === 'TIME') {\n          datum.data = datum.data.map((d) => {\n            const newd = {\n              ...d,\n              x: typeof d.x === 'object'\n                ? d.x\n                : xParseTime(d.x.toString()),\n            };\n            return newd;\n          });\n        }\n        // Assign in default line & point styles\n        return Object.assign({}, datumProps, datum);\n      });\n      this._drawScales(data);\n      this._drawLines(data, oldData);\n      this.drawAreas(data, oldData);\n      drawGrid(xScale, yScale, gridX, gridY, props, this.valuesCount(data));\n      this._drawDataPointSet(data);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return LineChartD3;\n});\n","import {\n  CurveFactory,\n  CurveFactoryLineOnly,\n} from 'd3-shape';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IAxes,\n  IChartAdaptor,\n  IGrid,\n  IMargin,\n  ISVGLineStyle,\n  TipContentFn,\n} from './Histogram';\nimport { lineChartD3 } from './lineChartD3';\nimport { DeepPartial } from './utils/types';\n\ninterface IState {\n  parentWidth?: number;\n}\n\nexport type IChartPointValue = number | string | Date | object;\nexport interface IChartPoint<X extends IChartPointValue = Date | number, Y extends IChartPointValue = number> {\n  x: X;\n  y: Y;\n}\nexport interface ILineProps {\n  show: boolean;\n  fill: {\n    show: boolean;\n    fill: string;\n  };\n  curveType: CurveFactory | CurveFactoryLineOnly;\n  stroke: string;\n  strokeDashOffset: number;\n  strokeDashArray: string;\n}\n\nexport interface ILineChartDataSet<T> {\n  label: string;\n  point: {\n    radius: number;\n    stroke: string;\n    fill: string;\n    show: boolean;\n  };\n  line: ILineProps;\n  data: T[];\n}\n\nexport interface ISVGPoint extends ISVGLineStyle {\n  radius?: 4;\n  show: boolean;\n}\n\nexport interface ILineChartProps<T extends IChartPoint<IChartPointValue, IChartPointValue> = IChartPoint> {\n  axis: IAxes;\n  className: string;\n  data: Array<ILineChartDataSet<T>>;\n  grid: IGrid;\n  height: number | string;\n  margin: IMargin;\n  tip: any;\n  tipContainer?: string;\n  tipContentFn: TipContentFn<{ x: string | number, y: string | number }>;\n  visible: { [key: string]: boolean };\n  width: number | string;\n}\n\nclass LineChart extends React.Component<DeepPartial<ILineChartProps>, IState> {\n\n  private chart: IChartAdaptor<ILineChartProps>;\n  private ref: HTMLDivElement | null = null;\n\n  constructor(props: DeepPartial<ILineChartProps>) {\n    super(props);\n    this.chart = lineChartD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.chart.create(el, this.getChartState()));\n\n  }\n\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state. If a histogram has been assigned\n   * to the props, then render this data. Otherwise generate\n   * a random normal dist\n   */\n  public getChartState(): DeepPartial<ILineChartProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillUnmount() {\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.destroy(el);\n  }\n\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  public render(): JSX.Element {\n    return <div ref={(ref) => this.ref = ref} className=\"chart-container\"></div>;\n  }\n}\n\nexport default LineChart;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport merge from 'lodash.merge';\n\nimport colorScheme from './colors';\nimport { IChartAdaptor } from './Histogram';\nimport { IChartPoint } from './LineChart';\nimport { IScatterPlotProps } from './ScatterPlot';\nimport { DeepPartial } from './utils/types';\n\nexport const scatterPlotD3 = ((): IChartAdaptor<IScatterPlotProps> => {\n  let svg: Selection<any, any, any, any>;\n  const yScale = scaleLinear();\n  const xScale = scaleLinear();\n  const domainByTrait = {};\n  let xAxis;\n  let color;\n  let yAxis;\n\n  const props: IScatterPlotProps = {\n    choices: [],\n    className: 'scatter-plot-d3',\n    colorScheme,\n    data: {\n      keys: [],\n      values: []\n    },\n    delay: 0,\n    distModels: [],\n    duration: 400,\n    height: 300,\n    legendWidth: 100,\n    padding: 20,\n    radius: 4,\n    split: '',\n    width: '100%',\n  };\n\n  const GenerateChart = {\n\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IScatterPlotProps> = props) {\n      merge(props, newProps);\n      this.update(el, newProps);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element, data: IScatterPlotProps['data']) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { width, className, height, legendWidth, padding } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', Number(width) + padding + legendWidth)\n        .attr('height', height + padding)\n        .append('g')\n        .attr('transform', 'translate(' + padding + ',' + padding / 2 + ')');\n\n      color = scaleOrdinal(props.colorScheme);\n    },\n\n    /**\n     * Draw the chart scales\n     */\n    _drawScales(data: IScatterPlotProps['data']['keys']) {\n      const { height, padding, width } = props;\n      const xSize = Number(width) / data.length;\n      const ySize = height / data.length;\n      xScale.range([padding / 2, xSize - padding / 2]);\n      yScale.range([height - padding / 2, padding / 2]);\n\n      svg.selectAll('.x.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'x axis')\n        .attr('transform', (d, i) =>\n          'translate(' + (data.length - i - 1) * xSize + ',0)')\n        .each(function (this: any, d: any) {\n          xScale.domain(domainByTrait[d]);\n          select(this).call(xAxis);\n        });\n\n      svg.selectAll('.y.axis')\n        .data(data)\n        .enter().append('g')\n        .attr('class', 'y axis')\n        .attr('transform', (d: any, i: number) => 'translate(0,' + i * ySize + ')')\n        .each(function (this: any, d: any) {\n          yScale.domain(domainByTrait[d]);\n          select(this).call(yAxis);\n        });\n    },\n\n    /**\n     * Make a legend showing spit choice options\n     */\n    _drawLegend() {\n      const { choices, padding, width, split } = props;\n      if (choices === undefined) {\n        return;\n      }\n      const legend = svg.append('g')\n        .attr('transform', 'translate(' + (Number(width) + padding / 2) +\n          ', ' + (padding + 50) + ')');\n\n      legend.append('g').append('text')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('dy', '.71em')\n        .text((d) => split);\n      legend.selectAll('.legendItem')\n        .data(choices)\n        .enter().append('g')\n        .each(function (this: any, c, i: number) {\n          const cell = select(this);\n          cell.append('rect')\n            .attr('class', 'legendItem')\n            .attr('x', 0)\n            .attr('y', 20 + (i * 15))\n            .attr('fill', color(i))\n            .attr('height', 10)\n            .attr('width', 10);\n\n          cell.append('text')\n            .attr('x', 15)\n            .attr('y', 20 + (i * 15))\n            .attr('dy', '.71em')\n            .text((d) => c);\n        });\n\n      legend.exit().remove();\n    },\n\n    /**\n     * Draw scatter points\n     */\n    _drawPoints(traits, width: number, height: number) {\n      const { data, delay, duration,\n        choices, split, padding, radius } = props;\n      const n = traits.length;\n      const cell = svg.selectAll('.cell')\n        .data(cross(traits, traits))\n        .enter().append('g')\n        .attr('class', 'cell')\n        .attr('transform', (d) => 'translate(' + (n - d.i - 1) * width +\n          ',' + d.j * width + ')')\n        .each(plot);\n\n      // Titles for the diagonal.\n      cell.filter((d) => d.i === d.j).append('text')\n        .attr('x', padding)\n        .attr('y', padding)\n        .attr('dy', '.71em')\n        .text((d) => d.x);\n\n      /**\n       * Plot a point\n       */\n      function plot(this: any, p: IChartPoint) {\n        const plotCell = select(this);\n        let circle: Selection<SVGCircleElement, any, any, any>;\n        xScale.domain(domainByTrait[Number(p.x)]);\n        yScale.domain(domainByTrait[Number(p.y)]);\n\n        plotCell.append<SVGRectElement>('rect')\n          .attr('class', 'frame')\n          .attr('x', padding / 2)\n          .attr('y', padding / 2)\n          .attr('width', width - padding)\n          .attr('height', height - padding);\n\n        circle = plotCell.selectAll('circle')\n          .data(data.values)\n          .enter().append('circle')\n          .attr('r', (d) => radius)\n          .attr('cx', (d) => xScale(d[Number(p.x)]))\n          .attr('cy', (d) => yScale(d[Number(p.y)]))\n          .style('fill', (d) => {\n            if (d[split]) {\n              const i = choices.findIndex((c) => c === d[split]);\n              return color(i);\n            }\n            return '#eeaabb';\n          });\n\n        circle\n          .transition()\n          .duration(duration)\n          .delay(delay)\n          .attr('r', (d) => radius);\n      }\n\n      /**\n       * Create cross array\n       * // @TODO looks like d3 has its own cross function now...\n       */\n      function cross(a, b) {\n        const c: Array<{ x: number; i: number; y: number; j: number; }> = [];\n        const nx = a.length;\n        const m = b.length;\n        let i: number;\n        let j: number;\n        for (i = -1; ++i < nx;) {\n          for (j = -1; ++j < m;) {\n            c.push({ x: a[i], i, y: b[j], j });\n          }\n        }\n        return c;\n      }\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IScatterPlotProps>) {\n      merge(props, newProps);\n      if (!props.data) {\n        return;\n      }\n      const { data, distModels, height, width } = props;\n      this._makeSvg(el, props.data);\n      this._drawLegend();\n      const traits = data.keys.filter((k) => distModels.indexOf(k) !== -1);\n      const xSize = Number(width) / traits.length;\n      const ySize = height / traits.length;\n      const n = traits.length;\n\n      traits.forEach((trait) => {\n        domainByTrait[trait] = extent<any>(data.values, (d) => d[trait]);\n      });\n      xAxis = axisBottom(xScale)\n        .ticks(6)\n        .tickSize(xSize * n);\n      yAxis = axisLeft(yScale)\n        .ticks(6)\n        .tickSize(-ySize * n);\n\n      this._drawScales(traits);\n      this._drawPoints(traits, xSize, ySize);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return GenerateChart;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n} from './Histogram';\nimport { scatterPlotD3 } from './ScatterPlotD3';\nimport { DeepPartial } from './utils/types';\n\nexport interface IScatterPlotProps {\n  choices: string[];\n  className: string;\n  data: {\n    keys: string[],\n    values: any[];\n  };\n  delay: number;\n  distModels: string[];\n  duration: number;\n  height: number;\n  legendWidth: number;\n  colorScheme: string[];\n  padding: number;\n  radius: number;\n  split: string;\n  width: string | number;\n}\nclass ScatterPlot extends Component<DeepPartial<IScatterPlotProps>, IChartState> {\n\n  private chart: IChartAdaptor<IScatterPlotProps>;\n  private ref: HTMLDivElement | null = null;\n\n  public static defaultProps = {\n    height: 400,\n    width: '100%',\n  };\n\n  constructor(props: IScatterPlotProps) {\n    super(props);\n    this.chart = scatterPlotD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (el) {\n      const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n      this.setState({\n        parentWidth: width,\n      }, () => this.chart.create(el, this.getChartState()));\n    }\n  }\n\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.create(el, this.getChartState());\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  private getChartState(): DeepPartial<IScatterPlotProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  public componentWillReceiveProps(props: DeepPartial<IScatterPlotProps>) {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.update(el, this.getChartState());\n  }\n\n  public componentWillUnmount() {\n    const { width } = this.props;\n    if (typeof width === 'string' && width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.chart.destroy(el);\n  }\n\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  public render() {\n    return <div ref={(ref) => this.ref = ref} className=\"scatterplot-chart-container\"></div>;\n  }\n}\n\nexport default ScatterPlot;\n","import { extent } from 'd3-array';\nimport {\n  axisBottom,\n  axisLeft,\n} from 'd3-axis';\nimport {\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3-scale';\nimport {\n  select,\n  Selection,\n} from 'd3-selection';\nimport merge from 'lodash.merge';\n\nimport colorScheme from './colors';\nimport attrs from './d3/attrs';\nimport {\n  IChartAdaptor,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n} from './Histogram';\nimport tips, { makeTip } from './tip';\nimport {\n  axis as defaultAxis,\n  grid as defaultGrid,\n} from './utils/defaults';\nimport { DeepPartial } from './utils/types';\n\nexport const horizontalHistogramD3 = ((): IChartAdaptor<IHistogramProps> => {\n  let svg: Selection<any, any, any, any>;;\n  let tipContainer;\n  let tipContent;\n  const x = scaleLinear();\n  const y = scaleBand();\n\n  // Gridlines in y axis function\n  function make_y_gridlines(ticks: number = 5) {\n    return axisBottom(x)\n      .ticks(ticks);\n  }\n\n  // Gridlines in x axis function\n  function make_x_gridlines(ticks: number = 5) {\n    return axisLeft(y)\n      .ticks(ticks);\n  }\n\n  const props: IHistogramProps = {\n    axis: defaultAxis,\n    bar: {\n      groupMargin: 0.1,\n      margin: 10,\n      width: 50,\n    },\n    className: 'histogram-d3',\n    colorScheme,\n    data: {\n      bins: [],\n      colorScheme: [],\n      counts: [],\n    },\n    delay: 0,\n    domain: {\n      max: null,\n      min: null,\n    },\n    duration: 400,\n    grid: defaultGrid,\n    height: 200,\n    margin: {\n      bottom: 0,\n      left: 5,\n      right: 0,\n      top: 5,\n    },\n    stacked: false,\n    stroke: {\n      color: '#005870',\n      dasharray: '',\n      linecap: 'butt',\n      width: 0,\n    },\n    tip: tips,\n    tipContainer: 'body',\n    tipContentFn: (bins: string[], i: number, d: number): string =>\n      bins[i] + '<br />' + d,\n    visible: {},\n    width: 200,\n  };\n\n  const HorizontalHistogramD3 = {\n    /**\n     * Initialization\n     */\n    create(el: Element, newProps: DeepPartial<IHistogramProps> = {}) {\n      merge(props, newProps);\n      this.update(el, newProps);\n    },\n\n    /**\n     * Make the SVG container element\n     * Recreate if it previously existed\n     */\n    _makeSvg(el: Element) {\n      if (svg) {\n        svg.selectAll('svg > *').remove();\n        svg.remove();\n        const childNodes = el.getElementsByTagName('svg');\n        if (childNodes.length > 0) {\n          el.removeChild(childNodes[0]);\n        }\n      }\n      const { margin, width, height, className } = props;\n\n      // Reference to svg element containing chart\n      svg = select(el).append('svg')\n        .attr('class', className)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', `0 0 ${width} ${height}`)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')');\n      const r = makeTip(props.tipContainer, tipContainer);\n      tipContent = r.tipContent;\n      tipContainer = r.tipContainer;\n    },\n\n    /**\n     * Get a max count of values in each data set\n     */\n    valuesCount(counts: IHistogramDataSet[]): number {\n      return counts.reduce((a: number, b: IHistogramDataSet): number => {\n        return b.data.length > a ? b.data.length : a;\n      }, 0);\n    },\n\n    /**\n     * Draw scales\n     */\n    _drawScales(data: IHistogramData) {\n      const { margin, width, height, axis } = props;\n      const valuesCount = this.valuesCount(data.counts);\n\n      svg.selectAll('.y-axis').remove();\n      svg.selectAll('.x-axis').remove();\n\n      const h = this.gridHeight();\n      let xDomain;\n      let xAxis;\n      let yAxis;\n      let xRange;\n      const allCounts = data.counts.reduce((a: number[], b: IHistogramDataSet): number[] => {\n        return [...a, ...b.data];\n      }, []);\n\n      y.domain(data.bins)\n        .rangeRound([0, h]);\n\n      xAxis = axisBottom(x).ticks(axis.x.ticks);\n      yAxis = axisLeft(y).ticks(axis.y.ticks);\n\n      if (h / valuesCount < 10) {\n        // Show one in 10 x axis labels\n        xAxis.tickValues(x.domain().filter((d, i) => !(i % 10)));\n      }\n\n      xDomain = extent(allCounts, (d) => d);\n      xDomain[0] = 0;\n      xRange = [0, Number(width) - (margin.top * 2) - axis.y.width];\n      x.range(xRange)\n        .domain(xDomain);\n\n      svg.append('g').attr('class', 'y-axis')\n        .attr('transform', 'translate(' + axis.y.width + ', 0)')\n        .call(yAxis);\n\n      svg.append('g').attr('class', 'x-axis')\n        .attr('transform', 'translate(' + axis.y.width + ',' +\n          (height - axis.x.height - (margin.left * 2)) + ')')\n        .call(xAxis);\n\n      attrs(svg.selectAll('.y-axis .domain, .y-axis .tick line'), axis.y.style);\n      attrs(svg.selectAll('.y-axis .tick text'), axis.y.text.style as any);\n\n      attrs(svg.selectAll('.x-axis .domain, .x-axis .tick line'), axis.x.style);\n      attrs(svg.selectAll('.x-axis .tick text'), axis.x.text.style as any);\n    },\n\n    /**\n     * Draw the bars\n     * @param {Object} info Bar data etc\n     */\n    _drawBars(info: IHistogramData) {\n      const valuesCount = this.valuesCount(info.counts);\n      info.counts.forEach((set: IHistogramDataSet, setIndex: number) => {\n        this.drawDataSet(info.bins, set, setIndex, info.counts.length);\n      });\n    },\n\n    /**\n     * Calculate the width of the area used to display the\n     * chart bars. Removes chart margins and Y axis from\n     * chart total width.\n     */\n    gridWidth(): number {\n      const { axis, width, margin } = props;\n      return Number(width) - (margin.left * 2) - axis.y.width;\n    },\n\n    /**\n     * Calculate the height of the area used to display the\n     * chart bars. Removes chart margins and X axis from\n     * chart total height.\n     */\n    gridHeight(): number {\n      const { height, margin, axis } = props;\n      return height - (margin.top * 2) - axis.x.height;\n    },\n\n    /**\n     * Returns the margin between similar bars in different data sets\n     * @return {Number} Margin\n     */\n    groupedMargin(): number {\n      const { data } = props;\n      return ((data.counts.length - 1) * 3);\n    },\n\n    /**\n     * Calculate the bar height\n     * @return {number} bar height\n     */\n    barHeight() {\n      const { axis, width, margin, data, bar, stroke } = props;\n      const h = this.gridHeight();\n      const valuesCount = this.valuesCount(data.counts);\n      const setCount = data.counts.length;\n      let barHeight = (h / valuesCount) - (bar.margin * 2) - this.groupedMargin();\n\n      // Small bars - reduce margin and re-calcualate bar width\n      if (barHeight < 5) {\n        bar.margin = 1;\n        barHeight = Math.max(1, (h - (valuesCount + 1) * bar.margin) /\n          valuesCount);\n      }\n\n      // show data sets next to each other...\n      return barHeight / setCount;\n    },\n\n    /**\n     * Draw a single data set into the chart\n     * @param {Array} bins Data set labels\n     * @param {Object} set HistogramDataSet\n     * @param {number} setIndex Data set index\n     * @param {number} setCount Total number of data sets\n     */\n    drawDataSet(\n      bins: string[], set: IHistogramDataSet,\n      setIndex: number, setCount: number,\n    ) {\n      const { height, width, margin, bar, delay, duration,\n        axis, stroke, tip, tipContentFn } = props;\n      let barItem;\n      const barHeight = this.barHeight();\n      const colors = scaleOrdinal(set.colors || props.colorScheme);\n      const borderColors = set.borderColors ? scaleOrdinal(set.borderColors) : null;\n\n      const selector = '.bar-' + setIndex;\n      const multiLineOffset = (index) => setCount === 1\n        ? 0\n        : ((index + setIndex) * (barHeight + this.groupedMargin()));\n\n      svg.selectAll(selector).remove();\n\n      // Set up bar initial props\n      barItem = svg.selectAll(selector)\n        .data(set.data)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar ' + selector)\n        .attr('y', (d, index, all) => {\n          return bar.margin\n            + (barHeight + (bar.margin * 2)) * (index)\n            + multiLineOffset(index);\n        })\n        .attr('height', (d) => barHeight)\n        .attr('fill', (d, i) => colors(String(i)))\n        .on('mouseover', (d: number, i: number) => {\n          tipContent.html(() => tipContentFn(bins, i, d));\n          tip.fx.in(tipContainer);\n        })\n        .on('mousemove', () => tip.fx.move(tipContainer))\n        .on('mouseout', () => tip.fx.out(tipContainer))\n        .attr('x', (d: number): number => axis.y.width + axis.y.style['stroke-width'])\n        .attr('width', 0);\n\n      barItem.attr('stroke', (d, i) => {\n        if (borderColors) {\n          return borderColors(i);\n        }\n        return typeof stroke.color === 'function'\n          ? stroke.color(d, i, (j: number) => colors[j])\n          : stroke.color;\n      })\n        .attr('shape-rendering', 'crispEdges')\n        .attr('stroke-width', stroke.width)\n        .attr('stroke-linecap', stroke.linecap);\n\n      barItem.attr('stroke-dasharray', stroke.dasharray);\n\n      // Animate in bar\n      barItem\n        .transition()\n        .duration(duration)\n        .delay(delay)\n        // Hide bar's left border\n        .attr('stroke-dasharray',\n          (d: number): string => {\n            const currentWidth = x(d);\n            return `${currentWidth + barHeight + currentWidth} ${barHeight}`;\n          })\n        .attr('width',\n          (d: number): number => x(d));\n\n      barItem.exit().remove();\n    },\n\n    /**\n     * Draw a grid onto the chart background\n     */\n    _drawGrid() {\n      const { data, height, width, axis, grid, margin } = props;\n      const ticks = this.valuesCount(data.counts);\n      const axisWidth = axis.y.style['stroke-width'];\n      const offset = {\n        x: axis.y.width + this.groupedMargin() / 2,\n        y: 0,\n      };\n      let g;\n      let gy;\n\n      // Horizontal lines\n      if (grid.x.visible) {\n        // Add the X gridlines\n        g = svg.append('g')\n          .attr('class', 'grid gridX')\n          .attr('transform', `translate(${offset.x}, ${offset.y})`);\n\n        g.call(make_x_gridlines(grid.x.ticks || ticks)\n          .tickSize(-width + (margin.left * 2) + axis.y.width)\n          .tickFormat(() => ''));\n\n        attrs(g.selectAll('.tick line'), grid.x.style);\n        attrs(g.selectAll('.domain'), { ...axis.y.style, stroke: 'transparent' });\n      }\n\n      // Vertical lines.....\n      if (grid.y.visible) {\n        // add the Y gridlines\n        gy = svg.append('g')\n          .attr('class', 'grid gridY')\n          .attr('transform', 'translate(' + (axis.y.width + axisWidth) + ', '\n            + (height - axis.x.height - (margin.top * 2)) + ')')\n          .call(make_y_gridlines(grid.y.ticks || ticks)\n            .tickSize(-height + (margin.left * 2) + axis.x.height) // Line Length\n            .tickFormat(() => ''),\n          );\n        attrs(gy.selectAll('.tick line'), grid.y.style);\n\n        attrs(gy.selectAll('.domain'), { ...axis.x.style, stroke: 'transparent' });\n      }\n    },\n\n    /**\n     * Update chart\n     */\n    update(el: Element, newProps: DeepPartial<IHistogramProps>) {\n      if (!props.data) {\n        return;\n      }\n      merge(props, newProps);\n      this._makeSvg(el);\n      if (!props.data.bins) {\n        return;\n      }\n\n      this._drawScales(props.data);\n      this._drawGrid();\n      this._drawBars(props.data);\n    },\n\n    /**\n     * Any necessary clean up\n     */\n    destroy(el: Element) {\n      svg.selectAll('svg > *').remove();\n    },\n  };\n  return HorizontalHistogramD3;\n});\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  IChartAdaptor,\n  IChartState,\n  IHistogramProps,\n} from './Histogram';\nimport { horizontalHistogramD3 } from './HorizontalHistogramD3';\nimport { DeepPartial } from './utils/types';\n\n/**\n * Horizontal Histogram component\n */\nclass HorizontalHistogram extends Component<DeepPartial<IHistogramProps>, IChartState> {\n\n  private histogram: IChartAdaptor<IHistogramProps>;\n  private ref: HTMLDivElement | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(props: DeepPartial<IHistogramProps>) {\n    super(props);\n    this.histogram = horizontalHistogramD3();\n    this.state = {\n      parentWidth: 300,\n    };\n  }\n\n  /**\n   * Handle the page resize\n   */\n  private handleResize() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    const width = (this.ref && this.ref.offsetWidth) ? this.ref.offsetWidth : 0;\n\n    this.setState({\n      parentWidth: width,\n    }, () => this.histogram.create(el, this.getChartState()));\n  }\n\n  /**\n   * Component mounted\n   */\n  public componentDidMount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.histogram.create(el, this.getChartState());\n    if (this.props.width === '100%') {\n      window.addEventListener('resize', (e) => this.handleResize());\n      this.handleResize();\n    }\n  }\n\n  /**\n   * Component updated\n   */\n  public componentDidUpdate() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.histogram.update(el, this.getChartState());\n  }\n\n  /**\n   * Get the chart state\n   */\n  public getChartState(): DeepPartial<IHistogramProps> {\n    let { width } = this.props;\n    const { children, ...rest } = this.props;\n    if (width === '100%') {\n      width = this.state.parentWidth || 300;\n    }\n\n    return {\n      ...rest,\n      width,\n    };\n  }\n\n  /**\n   * Props recieved, update the chart\n   */\n  public componentWillReceiveProps() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    this.histogram.update(el, this.getChartState());\n  }\n\n  /**\n   * Component will un mount, remove the chart and\n   * any event listeners\n   */\n  public componentWillUnmount() {\n    const el = this.getDOMNode();\n    if (!el) {\n      return;\n    }\n    if (this.props.width === '100%') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    this.histogram.destroy(el);\n  }\n\n  /**\n   * Get the chart's dom node\n   */\n  private getDOMNode(): Element | undefined {\n    const node = ReactDOM.findDOMNode(this.ref);\n    if (node instanceof HTMLElement) {\n      return node;\n    }\n    return undefined;\n  }\n\n  /**\n   * Render\n   */\n  public render(): JSX.Element {\n    return (<div ref={(ref) => this.ref = ref} className=\"histogram-chart-container\"></div>);\n  }\n}\n\nexport default HorizontalHistogram;\n","export {\n  default as Histogram,\n  IAxes,\n  IHistogramBar,\n  IHistogramData,\n  IHistogramDataSet,\n  IHistogramProps,\n  IStroke,\n} from './Histogram';\n\nexport {\n  default as LineChart,\n  IChartPoint,\n  ILineChartDataSet,\n  ILineChartProps,\n} from './LineChart';\n\nexport { default as Legend } from './Legend';\nexport { default as JoyPlot } from './JoyPlot';\n// import Map from './Map';\nexport { default as PieChart } from './PieChart';\nexport { default as ScatterPlot } from './ScatterPlot';\nexport { default as HorizontalHistogram } from './HorizontalHistogram';\nexport { default as filterRange } from './colors/filterRange';\n\nexport {\n  axis as defaultAxis,\n  lineStyle as defaultLineStyle,\n  stroke as defaultStroke,\n  line as defaultLine,\n  grid as defaultGrid,\n} from './utils/defaults';\n\n"],"sourceRoot":""}